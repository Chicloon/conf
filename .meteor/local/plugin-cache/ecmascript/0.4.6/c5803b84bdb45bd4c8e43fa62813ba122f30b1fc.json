{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.abide.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.abide.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.abide.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.abide.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.abide"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * Abide module.\n   * @module foundation.abide\n   */\n\n  var Abide = function () {\n    /**\n     * Creates a new instance of Abide.\n     * @class\n     * @fires Abide#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Abide(element) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      (0, _classCallCheck3['default'])(this, Abide);\n\n      this.$element = element;\n      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Abide');\n    }\n\n    /**\n     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n     * @private\n     */\n\n\n    Abide.prototype._init = function () {\n      function _init() {\n        this.$inputs = this.$element.find('input, textarea, select');\n\n        this._events();\n      }\n\n      return _init;\n    }();\n\n    /**\n     * Initializes events for Abide.\n     * @private\n     */\n\n\n    Abide.prototype._events = function () {\n      function _events() {\n        var _this2 = this;\n\n        this.$element.off('.abide').on('reset.zf.abide', function () {\n          _this2.resetForm();\n        }).on('submit.zf.abide', function () {\n          return _this2.validateForm();\n        });\n\n        if (this.options.validateOn === 'fieldChange') {\n          this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {\n            _this2.validateInput($(e.target));\n          });\n        }\n\n        if (this.options.liveValidate) {\n          this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {\n            _this2.validateInput($(e.target));\n          });\n        }\n      }\n\n      return _events;\n    }();\n\n    /**\n     * Calls necessary functions to update Abide upon DOM change\n     * @private\n     */\n\n\n    Abide.prototype._reflow = function () {\n      function _reflow() {\n        this._init();\n      }\n\n      return _reflow;\n    }();\n\n    /**\n     * Checks whether or not a form element has the required attribute and if it's checked or not\n     * @param {Object} element - jQuery object to check for required attribute\n     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n     */\n\n\n    Abide.prototype.requiredCheck = function () {\n      function requiredCheck($el) {\n        if (!$el.attr('required')) return true;\n\n        var isGood = true;\n\n        switch ($el[0].type) {\n          case 'checkbox':\n            isGood = $el[0].checked;\n            break;\n\n          case 'select':\n          case 'select-one':\n          case 'select-multiple':\n            var opt = $el.find('option:selected');\n            if (!opt.length || !opt.val()) isGood = false;\n            break;\n\n          default:\n            if (!$el.val() || !$el.val().length) isGood = false;\n        }\n\n        return isGood;\n      }\n\n      return requiredCheck;\n    }();\n\n    /**\n     * Based on $el, get the first element with selector in this order:\n     * 1. The element's direct sibling('s).\n     * 3. The element's parent's children.\n     *\n     * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n     *\n     * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n     * @returns {Object} jQuery object with the selector.\n     */\n\n\n    Abide.prototype.findFormError = function () {\n      function findFormError($el) {\n        var $error = $el.siblings(this.options.formErrorSelector);\n\n        if (!$error.length) {\n          $error = $el.parent().find(this.options.formErrorSelector);\n        }\n\n        return $error;\n      }\n\n      return findFormError;\n    }();\n\n    /**\n     * Get the first element in this order:\n     * 2. The <label> with the attribute `[for=\"someInputId\"]`\n     * 3. The `.closest()` <label>\n     *\n     * @param {Object} $el - jQuery object to check for required attribute\n     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n     */\n\n\n    Abide.prototype.findLabel = function () {\n      function findLabel($el) {\n        var id = $el[0].id;\n        var $label = this.$element.find('label[for=\"' + id + '\"]');\n\n        if (!$label.length) {\n          return $el.closest('label');\n        }\n\n        return $label;\n      }\n\n      return findLabel;\n    }();\n\n    /**\n     * Get the set of labels associated with a set of radio els in this order\n     * 2. The <label> with the attribute `[for=\"someInputId\"]`\n     * 3. The `.closest()` <label>\n     *\n     * @param {Object} $el - jQuery object to check for required attribute\n     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n     */\n\n\n    Abide.prototype.findRadioLabels = function () {\n      function findRadioLabels($els) {\n        var _this3 = this;\n\n        var labels = $els.map(function (i, el) {\n          var id = el.id;\n          var $label = _this3.$element.find('label[for=\"' + id + '\"]');\n\n          if (!$label.length) {\n            $label = $(el).closest('label');\n          }\n          return $label[0];\n        });\n\n        return $(labels);\n      }\n\n      return findRadioLabels;\n    }();\n\n    /**\n     * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n     * @param {Object} $el - jQuery object to add the class to\n     */\n\n\n    Abide.prototype.addErrorClasses = function () {\n      function addErrorClasses($el) {\n        var $label = this.findLabel($el);\n        var $formError = this.findFormError($el);\n\n        if ($label.length) {\n          $label.addClass(this.options.labelErrorClass);\n        }\n\n        if ($formError.length) {\n          $formError.addClass(this.options.formErrorClass);\n        }\n\n        $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n      }\n\n      return addErrorClasses;\n    }();\n\n    /**\n     * Remove CSS error classes etc from an entire radio button group\n     * @param {String} groupName - A string that specifies the name of a radio button group\n     *\n     */\n\n    Abide.prototype.removeRadioErrorClasses = function () {\n      function removeRadioErrorClasses(groupName) {\n        var $els = this.$element.find(':radio[name=\"' + groupName + '\"]');\n        var $labels = this.findRadioLabels($els);\n        var $formErrors = this.findFormError($els);\n\n        if ($labels.length) {\n          $labels.removeClass(this.options.labelErrorClass);\n        }\n\n        if ($formErrors.length) {\n          $formErrors.removeClass(this.options.formErrorClass);\n        }\n\n        $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n      }\n\n      return removeRadioErrorClasses;\n    }();\n\n    /**\n     * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n     * @param {Object} $el - jQuery object to remove the class from\n     */\n\n\n    Abide.prototype.removeErrorClasses = function () {\n      function removeErrorClasses($el) {\n        // radios need to clear all of the els\n        if ($el[0].type == 'radio') {\n          return this.removeRadioErrorClasses($el.attr('name'));\n        }\n\n        var $label = this.findLabel($el);\n        var $formError = this.findFormError($el);\n\n        if ($label.length) {\n          $label.removeClass(this.options.labelErrorClass);\n        }\n\n        if ($formError.length) {\n          $formError.removeClass(this.options.formErrorClass);\n        }\n\n        $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n      }\n\n      return removeErrorClasses;\n    }();\n\n    /**\n     * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\n     * @fires Abide#invalid\n     * @fires Abide#valid\n     * @param {Object} element - jQuery object to validate, should be an HTML input\n     * @returns {Boolean} goodToGo - If the input is valid or not.\n     */\n\n\n    Abide.prototype.validateInput = function () {\n      function validateInput($el) {\n        var clearRequire = this.requiredCheck($el),\n            validated = false,\n            customValidator = true,\n            validator = $el.attr('data-validator'),\n            equalTo = true;\n\n        // don't validate ignored inputs or hidden inputs\n        if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]')) {\n          return true;\n        }\n\n        switch ($el[0].type) {\n          case 'radio':\n            validated = this.validateRadio($el.attr('name'));\n            break;\n\n          case 'checkbox':\n            validated = clearRequire;\n            break;\n\n          case 'select':\n          case 'select-one':\n          case 'select-multiple':\n            validated = clearRequire;\n            break;\n\n          default:\n            validated = this.validateText($el);\n        }\n\n        if (validator) {\n          customValidator = this.matchValidation($el, validator, $el.attr('required'));\n        }\n\n        if ($el.attr('data-equalto')) {\n          equalTo = this.options.validators.equalTo($el);\n        }\n\n        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\n        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\n\n        /**\n         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n         * Trigger includes the DOM element of the input.\n         * @event Abide#valid\n         * @event Abide#invalid\n         */\n        $el.trigger(message, [$el]);\n\n        return goodToGo;\n      }\n\n      return validateInput;\n    }();\n\n    /**\n     * Goes through a form and if there are any invalid inputs, it will display the form error element\n     * @returns {Boolean} noError - true if no errors were detected...\n     * @fires Abide#formvalid\n     * @fires Abide#forminvalid\n     */\n\n\n    Abide.prototype.validateForm = function () {\n      function validateForm() {\n        var acc = [];\n        var _this = this;\n\n        this.$inputs.each(function () {\n          acc.push(_this.validateInput($(this)));\n        });\n\n        var noError = acc.indexOf(false) === -1;\n\n        this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');\n\n        /**\n         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n         * Trigger includes the element of the form.\n         * @event Abide#formvalid\n         * @event Abide#forminvalid\n         */\n        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n\n        return noError;\n      }\n\n      return validateForm;\n    }();\n\n    /**\n     * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n     * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n     * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n     * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n     */\n\n\n    Abide.prototype.validateText = function () {\n      function validateText($el, pattern) {\n        // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n        pattern = pattern || $el.attr('pattern') || $el.attr('type');\n        var inputText = $el.val();\n        var valid = false;\n\n        if (inputText.length) {\n          // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n          if (this.options.patterns.hasOwnProperty(pattern)) {\n            valid = this.options.patterns[pattern].test(inputText);\n          }\n          // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n          else if (pattern !== $el.attr('type')) {\n              valid = new RegExp(pattern).test(inputText);\n            } else {\n              valid = true;\n            }\n        }\n        // An empty field is valid if it's not required\n        else if (!$el.prop('required')) {\n            valid = true;\n          }\n\n        return valid;\n      }\n\n      return validateText;\n    }();\n\n    /**\n     * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n     * @param {String} groupName - A string that specifies the name of a radio button group\n     * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n     */\n\n\n    Abide.prototype.validateRadio = function () {\n      function validateRadio(groupName) {\n        // If at least one radio in the group has the `required` attribute, the group is considered required\n        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n        var $group = this.$element.find(':radio[name=\"' + groupName + '\"]');\n        var valid = false,\n            required = false;\n\n        // For the group to be required, at least one radio needs to be required\n        $group.each(function (i, e) {\n          if ($(e).attr('required')) {\n            required = true;\n          }\n        });\n        if (!required) valid = true;\n\n        if (!valid) {\n          // For the group to be valid, at least one radio needs to be checked\n          $group.each(function (i, e) {\n            if ($(e).prop('checked')) {\n              valid = true;\n            }\n          });\n        };\n\n        return valid;\n      }\n\n      return validateRadio;\n    }();\n\n    /**\n     * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n     * @param {Object} $el - jQuery input element.\n     * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n     * @param {Boolean} required - self explanatory?\n     * @returns {Boolean} - true if validations passed.\n     */\n\n\n    Abide.prototype.matchValidation = function () {\n      function matchValidation($el, validators, required) {\n        var _this4 = this;\n\n        required = required ? true : false;\n\n        var clear = validators.split(' ').map(function (v) {\n          return _this4.options.validators[v]($el, required, $el.parent());\n        });\n        return clear.indexOf(false) === -1;\n      }\n\n      return matchValidation;\n    }();\n\n    /**\n     * Resets form inputs and styles\n     * @fires Abide#formreset\n     */\n\n\n    Abide.prototype.resetForm = function () {\n      function resetForm() {\n        var $form = this.$element,\n            opts = this.options;\n\n        $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);\n        $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);\n        $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);\n        $form.find('[data-abide-error]').css('display', 'none');\n        $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n        $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n        $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n        /**\n         * Fires when the form has been reset.\n         * @event Abide#formreset\n         */\n        $form.trigger('formreset.zf.abide', [$form]);\n      }\n\n      return resetForm;\n    }();\n\n    /**\n     * Destroys an instance of Abide.\n     * Removes error styles and classes from elements, without resetting their values.\n     */\n\n\n    Abide.prototype.destroy = function () {\n      function destroy() {\n        var _this = this;\n        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');\n\n        this.$inputs.off('.abide').each(function () {\n          _this.removeErrorClasses($(this));\n        });\n\n        Foundation.unregisterPlugin(this);\n      }\n\n      return destroy;\n    }();\n\n    return Abide;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Abide.defaults = {\n    /**\n     * The default event to validate inputs. Checkboxes and radios validate immediately.\n     * Remove or change this value for manual validation.\n     * @option\n     * @example 'fieldChange'\n     */\n    validateOn: 'fieldChange',\n\n    /**\n     * Class to be applied to input labels on failed validation.\n     * @option\n     * @example 'is-invalid-label'\n     */\n    labelErrorClass: 'is-invalid-label',\n\n    /**\n     * Class to be applied to inputs on failed validation.\n     * @option\n     * @example 'is-invalid-input'\n     */\n    inputErrorClass: 'is-invalid-input',\n\n    /**\n     * Class selector to use to target Form Errors for show/hide.\n     * @option\n     * @example '.form-error'\n     */\n    formErrorSelector: '.form-error',\n\n    /**\n     * Class added to Form Errors on failed validation.\n     * @option\n     * @example 'is-visible'\n     */\n    formErrorClass: 'is-visible',\n\n    /**\n     * Set to true to validate text inputs on any value change.\n     * @option\n     * @example false\n     */\n    liveValidate: false,\n\n    patterns: {\n      alpha: /^[a-zA-Z]+$/,\n      alpha_numeric: /^[a-zA-Z0-9]+$/,\n      integer: /^[-+]?\\d+$/,\n      number: /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n\n      // amex, visa, diners\n      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n      cvv: /^([0-9]){3,4}$/,\n\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n      email: /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n\n      url: /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n      // abc.de\n      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n\n      datetime: /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n      // YYYY-MM-DD\n      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n      // HH:MM:SS\n      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n      dateISO: /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n      // MM/DD/YYYY\n      month_day_year: /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n      // DD/MM/YYYY\n      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n\n      // #FFF or #FFFFFF\n      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/\n    },\n\n    /**\n     * Optional validation functions to be used. `equalTo` being the only default included function.\n     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n     * el : The jQuery element to validate.\n     * required : Boolean value of the required attribute be present or not.\n     * parent : The direct parent of the input.\n     * @option\n     */\n    validators: {\n      equalTo: function () {\n        function equalTo(el, required, parent) {\n          return $('#' + el.attr('data-equalto')).val() === el.val();\n        }\n\n        return equalTo;\n      }()\n    }\n  };\n\n  // Window exports\n  Foundation.plugin(Abide, 'Abide');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.abide.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/js/foundation.abide.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * Abide module.\n * @module foundation.abide\n */\n\nclass Abide {\n  /**\n   * Creates a new instance of Abide.\n   * @class\n   * @fires Abide#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  constructor(element, options = {}) {\n    this.$element = element;\n    this.options  = $.extend({}, Abide.defaults, this.$element.data(), options);\n\n    this._init();\n\n    Foundation.registerPlugin(this, 'Abide');\n  }\n\n  /**\n   * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n   * @private\n   */\n  _init() {\n    this.$inputs = this.$element.find('input, textarea, select');\n\n    this._events();\n  }\n\n  /**\n   * Initializes events for Abide.\n   * @private\n   */\n  _events() {\n    this.$element.off('.abide')\n      .on('reset.zf.abide', () => {\n        this.resetForm();\n      })\n      .on('submit.zf.abide', () => {\n        return this.validateForm();\n      });\n\n    if (this.options.validateOn === 'fieldChange') {\n      this.$inputs\n        .off('change.zf.abide')\n        .on('change.zf.abide', (e) => {\n          this.validateInput($(e.target));\n        });\n    }\n\n    if (this.options.liveValidate) {\n      this.$inputs\n        .off('input.zf.abide')\n        .on('input.zf.abide', (e) => {\n          this.validateInput($(e.target));\n        });\n    }\n  }\n\n  /**\n   * Calls necessary functions to update Abide upon DOM change\n   * @private\n   */\n  _reflow() {\n    this._init();\n  }\n\n  /**\n   * Checks whether or not a form element has the required attribute and if it's checked or not\n   * @param {Object} element - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  requiredCheck($el) {\n    if (!$el.attr('required')) return true;\n\n    var isGood = true;\n\n    switch ($el[0].type) {\n      case 'checkbox':\n        isGood = $el[0].checked;\n        break;\n\n      case 'select':\n      case 'select-one':\n      case 'select-multiple':\n        var opt = $el.find('option:selected');\n        if (!opt.length || !opt.val()) isGood = false;\n        break;\n\n      default:\n        if(!$el.val() || !$el.val().length) isGood = false;\n    }\n\n    return isGood;\n  }\n\n  /**\n   * Based on $el, get the first element with selector in this order:\n   * 1. The element's direct sibling('s).\n   * 3. The element's parent's children.\n   *\n   * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n   *\n   * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n   * @returns {Object} jQuery object with the selector.\n   */\n  findFormError($el) {\n    var $error = $el.siblings(this.options.formErrorSelector);\n\n    if (!$error.length) {\n      $error = $el.parent().find(this.options.formErrorSelector);\n    }\n\n    return $error;\n  }\n\n  /**\n   * Get the first element in this order:\n   * 2. The <label> with the attribute `[for=\"someInputId\"]`\n   * 3. The `.closest()` <label>\n   *\n   * @param {Object} $el - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  findLabel($el) {\n    var id = $el[0].id;\n    var $label = this.$element.find(`label[for=\"${id}\"]`);\n\n    if (!$label.length) {\n      return $el.closest('label');\n    }\n\n    return $label;\n  }\n\n  /**\n   * Get the set of labels associated with a set of radio els in this order\n   * 2. The <label> with the attribute `[for=\"someInputId\"]`\n   * 3. The `.closest()` <label>\n   *\n   * @param {Object} $el - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  findRadioLabels($els) {\n    var labels = $els.map((i, el) => {\n      var id = el.id;\n      var $label = this.$element.find(`label[for=\"${id}\"]`);\n\n      if (!$label.length) {\n        $label = $(el).closest('label');\n      }\n      return $label[0];\n    });\n\n    return $(labels);\n  }\n\n  /**\n   * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n   * @param {Object} $el - jQuery object to add the class to\n   */\n  addErrorClasses($el) {\n    var $label = this.findLabel($el);\n    var $formError = this.findFormError($el);\n\n    if ($label.length) {\n      $label.addClass(this.options.labelErrorClass);\n    }\n\n    if ($formError.length) {\n      $formError.addClass(this.options.formErrorClass);\n    }\n\n    $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n  }\n\n  /**\n   * Remove CSS error classes etc from an entire radio button group\n   * @param {String} groupName - A string that specifies the name of a radio button group\n   *\n   */\n\n  removeRadioErrorClasses(groupName) {\n    var $els = this.$element.find(`:radio[name=\"${groupName}\"]`);\n    var $labels = this.findRadioLabels($els);\n    var $formErrors = this.findFormError($els);\n\n    if ($labels.length) {\n      $labels.removeClass(this.options.labelErrorClass);\n    }\n\n    if ($formErrors.length) {\n      $formErrors.removeClass(this.options.formErrorClass);\n    }\n\n    $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n\n  }\n\n  /**\n   * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n   * @param {Object} $el - jQuery object to remove the class from\n   */\n  removeErrorClasses($el) {\n    // radios need to clear all of the els\n    if($el[0].type == 'radio') {\n      return this.removeRadioErrorClasses($el.attr('name'));\n    }\n\n    var $label = this.findLabel($el);\n    var $formError = this.findFormError($el);\n\n    if ($label.length) {\n      $label.removeClass(this.options.labelErrorClass);\n    }\n\n    if ($formError.length) {\n      $formError.removeClass(this.options.formErrorClass);\n    }\n\n    $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n  }\n\n  /**\n   * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\n   * @fires Abide#invalid\n   * @fires Abide#valid\n   * @param {Object} element - jQuery object to validate, should be an HTML input\n   * @returns {Boolean} goodToGo - If the input is valid or not.\n   */\n  validateInput($el) {\n    var clearRequire = this.requiredCheck($el),\n        validated = false,\n        customValidator = true,\n        validator = $el.attr('data-validator'),\n        equalTo = true;\n\n    // don't validate ignored inputs or hidden inputs\n    if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]')) {\n      return true;\n    }\n\n    switch ($el[0].type) {\n      case 'radio':\n        validated = this.validateRadio($el.attr('name'));\n        break;\n\n      case 'checkbox':\n        validated = clearRequire;\n        break;\n\n      case 'select':\n      case 'select-one':\n      case 'select-multiple':\n        validated = clearRequire;\n        break;\n\n      default:\n        validated = this.validateText($el);\n    }\n\n    if (validator) {\n      customValidator = this.matchValidation($el, validator, $el.attr('required'));\n    }\n\n    if ($el.attr('data-equalto')) {\n      equalTo = this.options.validators.equalTo($el);\n    }\n\n\n    var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n    var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\n    this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\n\n    /**\n     * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n     * Trigger includes the DOM element of the input.\n     * @event Abide#valid\n     * @event Abide#invalid\n     */\n    $el.trigger(message, [$el]);\n\n    return goodToGo;\n  }\n\n  /**\n   * Goes through a form and if there are any invalid inputs, it will display the form error element\n   * @returns {Boolean} noError - true if no errors were detected...\n   * @fires Abide#formvalid\n   * @fires Abide#forminvalid\n   */\n  validateForm() {\n    var acc = [];\n    var _this = this;\n\n    this.$inputs.each(function() {\n      acc.push(_this.validateInput($(this)));\n    });\n\n    var noError = acc.indexOf(false) === -1;\n\n    this.$element.find('[data-abide-error]').css('display', (noError ? 'none' : 'block'));\n\n    /**\n     * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n     * Trigger includes the element of the form.\n     * @event Abide#formvalid\n     * @event Abide#forminvalid\n     */\n    this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n\n    return noError;\n  }\n\n  /**\n   * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n   * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n   * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n   * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n   */\n  validateText($el, pattern) {\n    // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n    pattern = (pattern || $el.attr('pattern') || $el.attr('type'));\n    var inputText = $el.val();\n    var valid = false;\n\n    if (inputText.length) {\n      // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n      if (this.options.patterns.hasOwnProperty(pattern)) {\n        valid = this.options.patterns[pattern].test(inputText);\n      }\n      // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n      else if (pattern !== $el.attr('type')) {\n        valid = new RegExp(pattern).test(inputText);\n      }\n      else {\n        valid = true;\n      }\n    }\n    // An empty field is valid if it's not required\n    else if (!$el.prop('required')) {\n      valid = true;\n    }\n\n    return valid;\n   }\n\n  /**\n   * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n   * @param {String} groupName - A string that specifies the name of a radio button group\n   * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n   */\n  validateRadio(groupName) {\n    // If at least one radio in the group has the `required` attribute, the group is considered required\n    // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n    var $group = this.$element.find(`:radio[name=\"${groupName}\"]`);\n    var valid = false, required = false;\n\n    // For the group to be required, at least one radio needs to be required\n    $group.each((i, e) => {\n      if ($(e).attr('required')) {\n        required = true;\n      }\n    });\n    if(!required) valid=true;\n\n    if (!valid) {\n      // For the group to be valid, at least one radio needs to be checked\n      $group.each((i, e) => {\n        if ($(e).prop('checked')) {\n          valid = true;\n        }\n      });\n    };\n\n    return valid;\n  }\n\n  /**\n   * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n   * @param {Object} $el - jQuery input element.\n   * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n   * @param {Boolean} required - self explanatory?\n   * @returns {Boolean} - true if validations passed.\n   */\n  matchValidation($el, validators, required) {\n    required = required ? true : false;\n\n    var clear = validators.split(' ').map((v) => {\n      return this.options.validators[v]($el, required, $el.parent());\n    });\n    return clear.indexOf(false) === -1;\n  }\n\n  /**\n   * Resets form inputs and styles\n   * @fires Abide#formreset\n   */\n  resetForm() {\n    var $form = this.$element,\n        opts = this.options;\n\n    $(`.${opts.labelErrorClass}`, $form).not('small').removeClass(opts.labelErrorClass);\n    $(`.${opts.inputErrorClass}`, $form).not('small').removeClass(opts.inputErrorClass);\n    $(`${opts.formErrorSelector}.${opts.formErrorClass}`).removeClass(opts.formErrorClass);\n    $form.find('[data-abide-error]').css('display', 'none');\n    $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n    $(':input:radio', $form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');\n    $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');\n    /**\n     * Fires when the form has been reset.\n     * @event Abide#formreset\n     */\n    $form.trigger('formreset.zf.abide', [$form]);\n  }\n\n  /**\n   * Destroys an instance of Abide.\n   * Removes error styles and classes from elements, without resetting their values.\n   */\n  destroy() {\n    var _this = this;\n    this.$element\n      .off('.abide')\n      .find('[data-abide-error]')\n        .css('display', 'none');\n\n    this.$inputs\n      .off('.abide')\n      .each(function() {\n        _this.removeErrorClasses($(this));\n      });\n\n    Foundation.unregisterPlugin(this);\n  }\n}\n\n/**\n * Default settings for plugin\n */\nAbide.defaults = {\n  /**\n   * The default event to validate inputs. Checkboxes and radios validate immediately.\n   * Remove or change this value for manual validation.\n   * @option\n   * @example 'fieldChange'\n   */\n  validateOn: 'fieldChange',\n\n  /**\n   * Class to be applied to input labels on failed validation.\n   * @option\n   * @example 'is-invalid-label'\n   */\n  labelErrorClass: 'is-invalid-label',\n\n  /**\n   * Class to be applied to inputs on failed validation.\n   * @option\n   * @example 'is-invalid-input'\n   */\n  inputErrorClass: 'is-invalid-input',\n\n  /**\n   * Class selector to use to target Form Errors for show/hide.\n   * @option\n   * @example '.form-error'\n   */\n  formErrorSelector: '.form-error',\n\n  /**\n   * Class added to Form Errors on failed validation.\n   * @option\n   * @example 'is-visible'\n   */\n  formErrorClass: 'is-visible',\n\n  /**\n   * Set to true to validate text inputs on any value change.\n   * @option\n   * @example false\n   */\n  liveValidate: false,\n\n  patterns: {\n    alpha : /^[a-zA-Z]+$/,\n    alpha_numeric : /^[a-zA-Z0-9]+$/,\n    integer : /^[-+]?\\d+$/,\n    number : /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n\n    // amex, visa, diners\n    card : /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n    cvv : /^([0-9]){3,4}$/,\n\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n    email : /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n\n    url : /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n    // abc.de\n    domain : /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n\n    datetime : /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n    // YYYY-MM-DD\n    date : /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n    // HH:MM:SS\n    time : /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n    dateISO : /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n    // MM/DD/YYYY\n    month_day_year : /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n    // DD/MM/YYYY\n    day_month_year : /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n\n    // #FFF or #FFFFFF\n    color : /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/\n  },\n\n  /**\n   * Optional validation functions to be used. `equalTo` being the only default included function.\n   * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n   * el : The jQuery element to validate.\n   * required : Boolean value of the required attribute be present or not.\n   * parent : The direct parent of the input.\n   * @option\n   */\n  validators: {\n    equalTo: function (el, required, parent) {\n      return $(`#${el.attr('data-equalto')}`).val() === el.val();\n    }\n  }\n}\n\n// Window exports\nFoundation.plugin(Abide, 'Abide');\n\n}(jQuery);\n"]},"hash":"c5803b84bdb45bd4c8e43fa62813ba122f30b1fc"}
