{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.sticky.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.sticky.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.sticky.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.sticky.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.sticky"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * Sticky module.\n   * @module foundation.sticky\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   */\n\n  var Sticky = function () {\n    /**\n     * Creates a new instance of a sticky thing.\n     * @class\n     * @param {jQuery} element - jQuery object to make sticky.\n     * @param {Object} options - options object passed when creating the element programmatically.\n     */\n\n    function Sticky(element, options) {\n      (0, _classCallCheck3['default'])(this, Sticky);\n\n      this.$element = element;\n      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Sticky');\n    }\n\n    /**\n     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n     * @function\n     * @private\n     */\n\n\n    Sticky.prototype._init = function () {\n      function _init() {\n        var $parent = this.$element.parent('[data-sticky-container]'),\n            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\n            _this = this;\n\n        if (!$parent.length) {\n          this.wasWrapped = true;\n        }\n        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\n        this.$container.addClass(this.options.containerClass);\n\n        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });\n\n        this.scrollCount = this.options.checkEvery;\n        this.isStuck = false;\n        $(window).one('load.zf.sticky', function () {\n          if (_this.options.anchor !== '') {\n            _this.$anchor = $('#' + _this.options.anchor);\n          } else {\n            _this._parsePoints();\n          }\n\n          _this._setSizes(function () {\n            _this._calc(false);\n          });\n          _this._events(id.split('-').reverse().join('-'));\n        });\n      }\n\n      return _init;\n    }();\n\n    /**\n     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n     * @function\n     * @private\n     */\n\n\n    Sticky.prototype._parsePoints = function () {\n      function _parsePoints() {\n        var top = this.options.topAnchor == \"\" ? 1 : this.options.topAnchor,\n            btm = this.options.btmAnchor == \"\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\n            pts = [top, btm],\n            breaks = {};\n        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\n          var pt;\n          if (typeof pts[i] === 'number') {\n            pt = pts[i];\n          } else {\n            var place = pts[i].split(':'),\n                anchor = $('#' + place[0]);\n\n            pt = anchor.offset().top;\n            if (place[1] && place[1].toLowerCase() === 'bottom') {\n              pt += anchor[0].getBoundingClientRect().height;\n            }\n          }\n          breaks[i] = pt;\n        }\n\n        this.points = breaks;\n        return;\n      }\n\n      return _parsePoints;\n    }();\n\n    /**\n     * Adds event handlers for the scrolling element.\n     * @private\n     * @param {String} id - psuedo-random id for unique scroll event listener.\n     */\n\n\n    Sticky.prototype._events = function () {\n      function _events(id) {\n        var _this = this,\n            scrollListener = this.scrollListener = 'scroll.zf.' + id;\n        if (this.isOn) {\n          return;\n        }\n        if (this.canStick) {\n          this.isOn = true;\n          $(window).off(scrollListener).on(scrollListener, function (e) {\n            if (_this.scrollCount === 0) {\n              _this.scrollCount = _this.options.checkEvery;\n              _this._setSizes(function () {\n                _this._calc(false, window.pageYOffset);\n              });\n            } else {\n              _this.scrollCount--;\n              _this._calc(false, window.pageYOffset);\n            }\n          });\n        }\n\n        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {\n          _this._setSizes(function () {\n            _this._calc(false);\n            if (_this.canStick) {\n              if (!_this.isOn) {\n                _this._events(id);\n              }\n            } else if (_this.isOn) {\n              _this._pauseListeners(scrollListener);\n            }\n          });\n        });\n      }\n\n      return _events;\n    }();\n\n    /**\n     * Removes event handlers for scroll and change events on anchor.\n     * @fires Sticky#pause\n     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n     */\n\n\n    Sticky.prototype._pauseListeners = function () {\n      function _pauseListeners(scrollListener) {\n        this.isOn = false;\n        $(window).off(scrollListener);\n\n        /**\n         * Fires when the plugin is paused due to resize event shrinking the view.\n         * @event Sticky#pause\n         * @private\n         */\n        this.$element.trigger('pause.zf.sticky');\n      }\n\n      return _pauseListeners;\n    }();\n\n    /**\n     * Called on every `scroll` event and on `_init`\n     * fires functions based on booleans and cached values\n     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n     */\n\n\n    Sticky.prototype._calc = function () {\n      function _calc(checkSizes, scroll) {\n        if (checkSizes) {\n          this._setSizes();\n        }\n\n        if (!this.canStick) {\n          if (this.isStuck) {\n            this._removeSticky(true);\n          }\n          return false;\n        }\n\n        if (!scroll) {\n          scroll = window.pageYOffset;\n        }\n\n        if (scroll >= this.topPoint) {\n          if (scroll <= this.bottomPoint) {\n            if (!this.isStuck) {\n              this._setSticky();\n            }\n          } else {\n            if (this.isStuck) {\n              this._removeSticky(false);\n            }\n          }\n        } else {\n          if (this.isStuck) {\n            this._removeSticky(true);\n          }\n        }\n      }\n\n      return _calc;\n    }();\n\n    /**\n     * Causes the $element to become stuck.\n     * Adds `position: fixed;`, and helper classes.\n     * @fires Sticky#stuckto\n     * @function\n     * @private\n     */\n\n\n    Sticky.prototype._setSticky = function () {\n      function _setSticky() {\n        var _this = this,\n            stickTo = this.options.stickTo,\n            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n            css = {};\n\n        css[mrgn] = this.options[mrgn] + 'em';\n        css[stickTo] = 0;\n        css[notStuckTo] = 'auto';\n        css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])[\"padding-left\"], 10);\n        this.isStuck = true;\n        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)\n        /**\n         * Fires when the $element has become `position: fixed;`\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n         * @event Sticky#stuckto\n         */\n        .trigger('sticky.zf.stuckto:' + stickTo);\n        this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\", function () {\n          _this._setSizes();\n        });\n      }\n\n      return _setSticky;\n    }();\n\n    /**\n     * Causes the $element to become unstuck.\n     * Removes `position: fixed;`, and helper classes.\n     * Adds other helper classes.\n     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n     * @fires Sticky#unstuckfrom\n     * @private\n     */\n\n\n    Sticky.prototype._removeSticky = function () {\n      function _removeSticky(isTop) {\n        var stickTo = this.options.stickTo,\n            stickToTop = stickTo === 'top',\n            css = {},\n            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\n            mrgn = stickToTop ? 'marginTop' : 'marginBottom',\n            notStuckTo = stickToTop ? 'bottom' : 'top',\n            topOrBottom = isTop ? 'top' : 'bottom';\n\n        css[mrgn] = 0;\n\n        css['bottom'] = 'auto';\n        if (isTop) {\n          css['top'] = 0;\n        } else {\n          css['top'] = anchorPt;\n        }\n\n        css['left'] = '';\n        this.isStuck = false;\n        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)\n        /**\n         * Fires when the $element has become anchored.\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n         * @event Sticky#unstuckfrom\n         */\n        .trigger('sticky.zf.unstuckfrom:' + topOrBottom);\n      }\n\n      return _removeSticky;\n    }();\n\n    /**\n     * Sets the $element and $container sizes for plugin.\n     * Calls `_setBreakPoints`.\n     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n     * @private\n     */\n\n\n    Sticky.prototype._setSizes = function () {\n      function _setSizes(cb) {\n        this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);\n        if (!this.canStick) {\n          cb();\n        }\n        var _this = this,\n            newElemWidth = this.$container[0].getBoundingClientRect().width,\n            comp = window.getComputedStyle(this.$container[0]),\n            pdng = parseInt(comp['padding-right'], 10);\n\n        if (this.$anchor && this.$anchor.length) {\n          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n        } else {\n          this._parsePoints();\n        }\n\n        this.$element.css({\n          'max-width': newElemWidth - pdng + 'px'\n        });\n\n        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n        if (this.$element.css(\"display\") == \"none\") {\n          newContainerHeight = 0;\n        }\n        this.containerHeight = newContainerHeight;\n        this.$container.css({\n          height: newContainerHeight\n        });\n        this.elemHeight = newContainerHeight;\n\n        if (this.isStuck) {\n          this.$element.css({ \"left\": this.$container.offset().left + parseInt(comp['padding-left'], 10) });\n        }\n\n        this._setBreakPoints(newContainerHeight, function () {\n          if (cb) {\n            cb();\n          }\n        });\n      }\n\n      return _setSizes;\n    }();\n\n    /**\n     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n     * @param {Function} cb - optional callback function to be called on completion.\n     * @private\n     */\n\n\n    Sticky.prototype._setBreakPoints = function () {\n      function _setBreakPoints(elemHeight, cb) {\n        if (!this.canStick) {\n          if (cb) {\n            cb();\n          } else {\n            return false;\n          }\n        }\n        var mTop = emCalc(this.options.marginTop),\n            mBtm = emCalc(this.options.marginBottom),\n            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n\n        // topPoint = this.$anchor.offset().top || this.points[0],\n        // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n        winHeight = window.innerHeight;\n\n        if (this.options.stickTo === 'top') {\n          topPoint -= mTop;\n          bottomPoint -= elemHeight + mTop;\n        } else if (this.options.stickTo === 'bottom') {\n          topPoint -= winHeight - (elemHeight + mBtm);\n          bottomPoint -= winHeight - mBtm;\n        } else {\n          //this would be the stickTo: both option... tricky\n        }\n\n        this.topPoint = topPoint;\n        this.bottomPoint = bottomPoint;\n\n        if (cb) {\n          cb();\n        }\n      }\n\n      return _setBreakPoints;\n    }();\n\n    /**\n     * Destroys the current sticky element.\n     * Resets the element to the top position first.\n     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n     * @function\n     */\n\n\n    Sticky.prototype.destroy = function () {\n      function destroy() {\n        this._removeSticky(true);\n\n        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({\n          height: '',\n          top: '',\n          bottom: '',\n          'max-width': ''\n        }).off('resizeme.zf.trigger');\n        if (this.$anchor && this.$anchor.length) {\n          this.$anchor.off('change.zf.sticky');\n        }\n        $(window).off(this.scrollListener);\n\n        if (this.wasWrapped) {\n          this.$element.unwrap();\n        } else {\n          this.$container.removeClass(this.options.containerClass).css({\n            height: ''\n          });\n        }\n        Foundation.unregisterPlugin(this);\n      }\n\n      return destroy;\n    }();\n\n    return Sticky;\n  }();\n\n  Sticky.defaults = {\n    /**\n     * Customizable container template. Add your own classes for styling and sizing.\n     * @option\n     * @example '&lt;div data-sticky-container class=\"small-6 columns\"&gt;&lt;/div&gt;'\n     */\n    container: '<div data-sticky-container></div>',\n    /**\n     * Location in the view the element sticks to.\n     * @option\n     * @example 'top'\n     */\n    stickTo: 'top',\n    /**\n     * If anchored to a single element, the id of that element.\n     * @option\n     * @example 'exampleId'\n     */\n    anchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the top anchor.\n     * @option\n     * @example 'exampleId:top'\n     */\n    topAnchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the bottom anchor.\n     * @option\n     * @example 'exampleId:bottom'\n     */\n    btmAnchor: '',\n    /**\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginTop: 1,\n    /**\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginBottom: 1,\n    /**\n     * Breakpoint string that is the minimum screen size an element should become sticky.\n     * @option\n     * @example 'medium'\n     */\n    stickyOn: 'medium',\n    /**\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n     * @option\n     * @example 'sticky'\n     */\n    stickyClass: 'sticky',\n    /**\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n     * @option\n     * @example 'sticky-container'\n     */\n    containerClass: 'sticky-container',\n    /**\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n     * @option\n     * @example 50\n     */\n    checkEvery: -1\n  };\n\n  /**\n   * Helper function to calculate em values\n   * @param Number {em} - number of em's to calculate into pixels\n   */\n  function emCalc(em) {\n    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n  }\n\n  // Window exports\n  Foundation.plugin(Sticky, 'Sticky');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.sticky.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/js/foundation.sticky.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * Sticky module.\n * @module foundation.sticky\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n */\n\nclass Sticky {\n  /**\n   * Creates a new instance of a sticky thing.\n   * @class\n   * @param {jQuery} element - jQuery object to make sticky.\n   * @param {Object} options - options object passed when creating the element programmatically.\n   */\n  constructor(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n\n    this._init();\n\n    Foundation.registerPlugin(this, 'Sticky');\n  }\n\n  /**\n   * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n   * @function\n   * @private\n   */\n  _init() {\n    var $parent = this.$element.parent('[data-sticky-container]'),\n        id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\n        _this = this;\n\n    if (!$parent.length) {\n      this.wasWrapped = true;\n    }\n    this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\n    this.$container.addClass(this.options.containerClass);\n\n    this.$element.addClass(this.options.stickyClass)\n                 .attr({'data-resize': id});\n\n    this.scrollCount = this.options.checkEvery;\n    this.isStuck = false;\n    $(window).one('load.zf.sticky', function(){\n      if(_this.options.anchor !== ''){\n        _this.$anchor = $('#' + _this.options.anchor);\n      }else{\n        _this._parsePoints();\n      }\n\n      _this._setSizes(function(){\n        _this._calc(false);\n      });\n      _this._events(id.split('-').reverse().join('-'));\n    });\n  }\n\n  /**\n   * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n   * @function\n   * @private\n   */\n  _parsePoints() {\n    var top = this.options.topAnchor == \"\" ? 1 : this.options.topAnchor,\n        btm = this.options.btmAnchor== \"\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\n        pts = [top, btm],\n        breaks = {};\n    for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\n      var pt;\n      if (typeof pts[i] === 'number') {\n        pt = pts[i];\n      } else {\n        var place = pts[i].split(':'),\n            anchor = $(`#${place[0]}`);\n\n        pt = anchor.offset().top;\n        if (place[1] && place[1].toLowerCase() === 'bottom') {\n          pt += anchor[0].getBoundingClientRect().height;\n        }\n      }\n      breaks[i] = pt;\n    }\n\n\n    this.points = breaks;\n    return;\n  }\n\n  /**\n   * Adds event handlers for the scrolling element.\n   * @private\n   * @param {String} id - psuedo-random id for unique scroll event listener.\n   */\n  _events(id) {\n    var _this = this,\n        scrollListener = this.scrollListener = `scroll.zf.${id}`;\n    if (this.isOn) { return; }\n    if (this.canStick) {\n      this.isOn = true;\n      $(window).off(scrollListener)\n               .on(scrollListener, function(e) {\n                 if (_this.scrollCount === 0) {\n                   _this.scrollCount = _this.options.checkEvery;\n                   _this._setSizes(function() {\n                     _this._calc(false, window.pageYOffset);\n                   });\n                 } else {\n                   _this.scrollCount--;\n                   _this._calc(false, window.pageYOffset);\n                 }\n              });\n    }\n\n    this.$element.off('resizeme.zf.trigger')\n                 .on('resizeme.zf.trigger', function(e, el) {\n                     _this._setSizes(function() {\n                       _this._calc(false);\n                       if (_this.canStick) {\n                         if (!_this.isOn) {\n                           _this._events(id);\n                         }\n                       } else if (_this.isOn) {\n                         _this._pauseListeners(scrollListener);\n                       }\n                     });\n    });\n  }\n\n  /**\n   * Removes event handlers for scroll and change events on anchor.\n   * @fires Sticky#pause\n   * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n   */\n  _pauseListeners(scrollListener) {\n    this.isOn = false;\n    $(window).off(scrollListener);\n\n    /**\n     * Fires when the plugin is paused due to resize event shrinking the view.\n     * @event Sticky#pause\n     * @private\n     */\n     this.$element.trigger('pause.zf.sticky');\n  }\n\n  /**\n   * Called on every `scroll` event and on `_init`\n   * fires functions based on booleans and cached values\n   * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n   * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n   */\n  _calc(checkSizes, scroll) {\n    if (checkSizes) { this._setSizes(); }\n\n    if (!this.canStick) {\n      if (this.isStuck) {\n        this._removeSticky(true);\n      }\n      return false;\n    }\n\n    if (!scroll) { scroll = window.pageYOffset; }\n\n    if (scroll >= this.topPoint) {\n      if (scroll <= this.bottomPoint) {\n        if (!this.isStuck) {\n          this._setSticky();\n        }\n      } else {\n        if (this.isStuck) {\n          this._removeSticky(false);\n        }\n      }\n    } else {\n      if (this.isStuck) {\n        this._removeSticky(true);\n      }\n    }\n  }\n\n  /**\n   * Causes the $element to become stuck.\n   * Adds `position: fixed;`, and helper classes.\n   * @fires Sticky#stuckto\n   * @function\n   * @private\n   */\n  _setSticky() {\n    var _this = this,\n        stickTo = this.options.stickTo,\n        mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n        notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n        css = {};\n\n    css[mrgn] = `${this.options[mrgn]}em`;\n    css[stickTo] = 0;\n    css[notStuckTo] = 'auto';\n    css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])[\"padding-left\"], 10);\n    this.isStuck = true;\n    this.$element.removeClass(`is-anchored is-at-${notStuckTo}`)\n                 .addClass(`is-stuck is-at-${stickTo}`)\n                 .css(css)\n                 /**\n                  * Fires when the $element has become `position: fixed;`\n                  * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n                  * @event Sticky#stuckto\n                  */\n                 .trigger(`sticky.zf.stuckto:${stickTo}`);\n    this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\", function() {\n      _this._setSizes();\n    });\n  }\n\n  /**\n   * Causes the $element to become unstuck.\n   * Removes `position: fixed;`, and helper classes.\n   * Adds other helper classes.\n   * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n   * @fires Sticky#unstuckfrom\n   * @private\n   */\n  _removeSticky(isTop) {\n    var stickTo = this.options.stickTo,\n        stickToTop = stickTo === 'top',\n        css = {},\n        anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\n        mrgn = stickToTop ? 'marginTop' : 'marginBottom',\n        notStuckTo = stickToTop ? 'bottom' : 'top',\n        topOrBottom = isTop ? 'top' : 'bottom';\n\n    css[mrgn] = 0;\n\n    css['bottom'] = 'auto';\n    if(isTop) {\n      css['top'] = 0;\n    } else {\n      css['top'] = anchorPt;\n    }\n\n    css['left'] = '';\n    this.isStuck = false;\n    this.$element.removeClass(`is-stuck is-at-${stickTo}`)\n                 .addClass(`is-anchored is-at-${topOrBottom}`)\n                 .css(css)\n                 /**\n                  * Fires when the $element has become anchored.\n                  * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n                  * @event Sticky#unstuckfrom\n                  */\n                 .trigger(`sticky.zf.unstuckfrom:${topOrBottom}`);\n  }\n\n  /**\n   * Sets the $element and $container sizes for plugin.\n   * Calls `_setBreakPoints`.\n   * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n   * @private\n   */\n  _setSizes(cb) {\n    this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);\n    if (!this.canStick) { cb(); }\n    var _this = this,\n        newElemWidth = this.$container[0].getBoundingClientRect().width,\n        comp = window.getComputedStyle(this.$container[0]),\n        pdng = parseInt(comp['padding-right'], 10);\n\n    if (this.$anchor && this.$anchor.length) {\n      this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n    } else {\n      this._parsePoints();\n    }\n\n    this.$element.css({\n      'max-width': `${newElemWidth - pdng}px`\n    });\n\n    var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n    if (this.$element.css(\"display\") == \"none\") {\n      newContainerHeight = 0;\n    }\n    this.containerHeight = newContainerHeight;\n    this.$container.css({\n      height: newContainerHeight\n    });\n    this.elemHeight = newContainerHeight;\n\n  \tif (this.isStuck) {\n  \t\tthis.$element.css({\"left\":this.$container.offset().left + parseInt(comp['padding-left'], 10)});\n  \t}\n\n    this._setBreakPoints(newContainerHeight, function() {\n      if (cb) { cb(); }\n    });\n  }\n\n  /**\n   * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n   * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n   * @param {Function} cb - optional callback function to be called on completion.\n   * @private\n   */\n  _setBreakPoints(elemHeight, cb) {\n    if (!this.canStick) {\n      if (cb) { cb(); }\n      else { return false; }\n    }\n    var mTop = emCalc(this.options.marginTop),\n        mBtm = emCalc(this.options.marginBottom),\n        topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n        bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n        // topPoint = this.$anchor.offset().top || this.points[0],\n        // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n        winHeight = window.innerHeight;\n\n    if (this.options.stickTo === 'top') {\n      topPoint -= mTop;\n      bottomPoint -= (elemHeight + mTop);\n    } else if (this.options.stickTo === 'bottom') {\n      topPoint -= (winHeight - (elemHeight + mBtm));\n      bottomPoint -= (winHeight - mBtm);\n    } else {\n      //this would be the stickTo: both option... tricky\n    }\n\n    this.topPoint = topPoint;\n    this.bottomPoint = bottomPoint;\n\n    if (cb) { cb(); }\n  }\n\n  /**\n   * Destroys the current sticky element.\n   * Resets the element to the top position first.\n   * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n   * @function\n   */\n  destroy() {\n    this._removeSticky(true);\n\n    this.$element.removeClass(`${this.options.stickyClass} is-anchored is-at-top`)\n                 .css({\n                   height: '',\n                   top: '',\n                   bottom: '',\n                   'max-width': ''\n                 })\n                 .off('resizeme.zf.trigger');\n    if (this.$anchor && this.$anchor.length) {\n      this.$anchor.off('change.zf.sticky');\n    }\n    $(window).off(this.scrollListener);\n\n    if (this.wasWrapped) {\n      this.$element.unwrap();\n    } else {\n      this.$container.removeClass(this.options.containerClass)\n                     .css({\n                       height: ''\n                     });\n    }\n    Foundation.unregisterPlugin(this);\n  }\n}\n\nSticky.defaults = {\n  /**\n   * Customizable container template. Add your own classes for styling and sizing.\n   * @option\n   * @example '&lt;div data-sticky-container class=\"small-6 columns\"&gt;&lt;/div&gt;'\n   */\n  container: '<div data-sticky-container></div>',\n  /**\n   * Location in the view the element sticks to.\n   * @option\n   * @example 'top'\n   */\n  stickTo: 'top',\n  /**\n   * If anchored to a single element, the id of that element.\n   * @option\n   * @example 'exampleId'\n   */\n  anchor: '',\n  /**\n   * If using more than one element as anchor points, the id of the top anchor.\n   * @option\n   * @example 'exampleId:top'\n   */\n  topAnchor: '',\n  /**\n   * If using more than one element as anchor points, the id of the bottom anchor.\n   * @option\n   * @example 'exampleId:bottom'\n   */\n  btmAnchor: '',\n  /**\n   * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n   * @option\n   * @example 1\n   */\n  marginTop: 1,\n  /**\n   * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n   * @option\n   * @example 1\n   */\n  marginBottom: 1,\n  /**\n   * Breakpoint string that is the minimum screen size an element should become sticky.\n   * @option\n   * @example 'medium'\n   */\n  stickyOn: 'medium',\n  /**\n   * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n   * @option\n   * @example 'sticky'\n   */\n  stickyClass: 'sticky',\n  /**\n   * Class applied to sticky container. Foundation defaults to `sticky-container`.\n   * @option\n   * @example 'sticky-container'\n   */\n  containerClass: 'sticky-container',\n  /**\n   * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n   * @option\n   * @example 50\n   */\n  checkEvery: -1\n};\n\n/**\n * Helper function to calculate em values\n * @param Number {em} - number of em's to calculate into pixels\n */\nfunction emCalc(em) {\n  return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n}\n\n// Window exports\nFoundation.plugin(Sticky, 'Sticky');\n\n}(jQuery);\n"]},"hash":"b04a095e394d35dade977615fbea4c7412f58ff2"}
