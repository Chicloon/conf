{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/src/jquery.autocomplete.js","filenameRelative":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/src/jquery.autocomplete.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/src/jquery.autocomplete.js.map","sourceFileName":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/src/jquery.autocomplete.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"jquery.autocomplete"},"ignored":false,"code":"/**\n*  Ajax Autocomplete for jQuery, version 1.2.9\n*  (c) 2013 Tomas Kirda\n*\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\n*\n*/\n\n/*jslint  browser: true, white: true, plusplus: true */\n/*global define, window, document, jQuery */\n\n// Expose plugin as an AMD module if AMD loader is present:\n(function (factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function ($) {\n    'use strict';\n\n    var utils = function () {\n        return {\n            escapeRegExChars: function () {\n                function escapeRegExChars(value) {\n                    return value.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n                }\n\n                return escapeRegExChars;\n            }(),\n            createNode: function () {\n                function createNode(containerClass) {\n                    var div = document.createElement('div');\n                    div.className = containerClass;\n                    div.style.position = 'absolute';\n                    div.style.display = 'none';\n                    return div;\n                }\n\n                return createNode;\n            }()\n        };\n    }(),\n        keys = {\n        ESC: 27,\n        TAB: 9,\n        RETURN: 13,\n        LEFT: 37,\n        UP: 38,\n        RIGHT: 39,\n        DOWN: 40\n    };\n\n    function Autocomplete(el, options) {\n        var noop = function noop() {},\n            that = this,\n            defaults = {\n            autoSelectFirst: false,\n            appendTo: 'body',\n            serviceUrl: null,\n            lookup: null,\n            onSelect: null,\n            width: 'auto',\n            minChars: 1,\n            maxHeight: 300,\n            deferRequestBy: 0,\n            params: {},\n            formatResult: Autocomplete.formatResult,\n            delimiter: null,\n            zIndex: 9999,\n            type: 'GET',\n            noCache: false,\n            onSearchStart: noop,\n            onSearchComplete: noop,\n            onSearchError: noop,\n            containerClass: 'autocomplete-suggestions',\n            tabDisabled: false,\n            dataType: 'text',\n            currentRequest: null,\n            triggerSelectOnValidInput: true,\n            lookupFilter: function () {\n                function lookupFilter(suggestion, originalQuery, queryLowerCase) {\n                    return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;\n                }\n\n                return lookupFilter;\n            }(),\n            paramName: 'query',\n            transformResult: function () {\n                function transformResult(response) {\n                    return typeof response === 'string' ? $.parseJSON(response) : response;\n                }\n\n                return transformResult;\n            }()\n        };\n\n        // Shared variables:\n        that.element = el;\n        that.el = $(el);\n        that.suggestions = [];\n        that.badQueries = [];\n        that.selectedIndex = -1;\n        that.currentValue = that.element.value;\n        that.intervalId = 0;\n        that.cachedResponse = {};\n        that.onChangeInterval = null;\n        that.onChange = null;\n        that.isLocal = false;\n        that.suggestionsContainer = null;\n        that.options = $.extend({}, defaults, options);\n        that.classes = {\n            selected: 'autocomplete-selected',\n            suggestion: 'autocomplete-suggestion'\n        };\n        that.hint = null;\n        that.hintValue = '';\n        that.selection = null;\n\n        // Initialize and set options:\n        that.initialize();\n        that.setOptions(options);\n    }\n\n    Autocomplete.utils = utils;\n\n    $.Autocomplete = Autocomplete;\n\n    Autocomplete.formatResult = function (suggestion, currentValue) {\n        var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';\n\n        return suggestion.value.replace(new RegExp(pattern, 'gi'), '<strong>$1<\\/strong>');\n    };\n\n    Autocomplete.prototype = {\n\n        killerFn: null,\n\n        initialize: function () {\n            function initialize() {\n                var that = this,\n                    suggestionSelector = '.' + that.classes.suggestion,\n                    selected = that.classes.selected,\n                    options = that.options,\n                    container;\n\n                // Remove autocomplete attribute to prevent native suggestions:\n                that.element.setAttribute('autocomplete', 'off');\n\n                that.killerFn = function (e) {\n                    if ($(e.target).closest('.' + that.options.containerClass).length === 0) {\n                        that.killSuggestions();\n                        that.disableKillerFn();\n                    }\n                };\n\n                that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\n\n                container = $(that.suggestionsContainer);\n\n                container.appendTo(options.appendTo);\n\n                // Only set width if it was provided:\n                if (options.width !== 'auto') {\n                    container.width(options.width);\n                }\n\n                // Listen for mouse over event on suggestions list:\n                container.on('mouseover.autocomplete', suggestionSelector, function () {\n                    that.activate($(this).data('index'));\n                });\n\n                // Deselect active element when mouse leaves suggestions container:\n                container.on('mouseout.autocomplete', function () {\n                    that.selectedIndex = -1;\n                    container.children('.' + selected).removeClass(selected);\n                });\n\n                // Listen for click event on suggestions list:\n                container.on('click.autocomplete', suggestionSelector, function () {\n                    that.select($(this).data('index'));\n                });\n\n                that.fixPosition();\n\n                that.fixPositionCapture = function () {\n                    if (that.visible) {\n                        that.fixPosition();\n                    }\n                };\n\n                $(window).on('resize.autocomplete', that.fixPositionCapture);\n\n                that.el.on('keydown.autocomplete', function (e) {\n                    that.onKeyPress(e);\n                });\n                that.el.on('keyup.autocomplete', function (e) {\n                    that.onKeyUp(e);\n                });\n                that.el.on('blur.autocomplete', function () {\n                    that.onBlur();\n                });\n                that.el.on('focus.autocomplete', function () {\n                    that.onFocus();\n                });\n                that.el.on('change.autocomplete', function (e) {\n                    that.onKeyUp(e);\n                });\n            }\n\n            return initialize;\n        }(),\n\n        onFocus: function () {\n            function onFocus() {\n                var that = this;\n                that.fixPosition();\n                if (that.options.minChars <= that.el.val().length) {\n                    that.onValueChange();\n                }\n            }\n\n            return onFocus;\n        }(),\n\n        onBlur: function () {\n            function onBlur() {\n                this.enableKillerFn();\n            }\n\n            return onBlur;\n        }(),\n\n        setOptions: function () {\n            function setOptions(suppliedOptions) {\n                var that = this,\n                    options = that.options;\n\n                $.extend(options, suppliedOptions);\n\n                that.isLocal = $.isArray(options.lookup);\n\n                if (that.isLocal) {\n                    options.lookup = that.verifySuggestionsFormat(options.lookup);\n                }\n\n                // Adjust height, width and z-index:\n                $(that.suggestionsContainer).css({\n                    'max-height': options.maxHeight + 'px',\n                    'width': options.width + 'px',\n                    'z-index': options.zIndex\n                });\n            }\n\n            return setOptions;\n        }(),\n\n        clearCache: function () {\n            function clearCache() {\n                this.cachedResponse = {};\n                this.badQueries = [];\n            }\n\n            return clearCache;\n        }(),\n\n        clear: function () {\n            function clear() {\n                this.clearCache();\n                this.currentValue = '';\n                this.suggestions = [];\n            }\n\n            return clear;\n        }(),\n\n        disable: function () {\n            function disable() {\n                var that = this;\n                that.disabled = true;\n                if (that.currentRequest) {\n                    that.currentRequest.abort();\n                }\n            }\n\n            return disable;\n        }(),\n\n        enable: function () {\n            function enable() {\n                this.disabled = false;\n            }\n\n            return enable;\n        }(),\n\n        fixPosition: function () {\n            function fixPosition() {\n                var that = this,\n                    offset,\n                    styles;\n\n                // Don't adjsut position if custom container has been specified:\n                if (that.options.appendTo !== 'body') {\n                    return;\n                }\n\n                offset = that.el.offset();\n\n                styles = {\n                    top: offset.top + that.el.outerHeight() + 'px',\n                    left: offset.left + 'px'\n                };\n\n                if (that.options.width === 'auto') {\n                    styles.width = that.el.outerWidth() - 2 + 'px';\n                }\n\n                $(that.suggestionsContainer).css(styles);\n            }\n\n            return fixPosition;\n        }(),\n\n        enableKillerFn: function () {\n            function enableKillerFn() {\n                var that = this;\n                $(document).on('click.autocomplete', that.killerFn);\n            }\n\n            return enableKillerFn;\n        }(),\n\n        disableKillerFn: function () {\n            function disableKillerFn() {\n                var that = this;\n                $(document).off('click.autocomplete', that.killerFn);\n            }\n\n            return disableKillerFn;\n        }(),\n\n        killSuggestions: function () {\n            function killSuggestions() {\n                var that = this;\n                that.stopKillSuggestions();\n                that.intervalId = window.setInterval(function () {\n                    that.hide();\n                    that.stopKillSuggestions();\n                }, 50);\n            }\n\n            return killSuggestions;\n        }(),\n\n        stopKillSuggestions: function () {\n            function stopKillSuggestions() {\n                window.clearInterval(this.intervalId);\n            }\n\n            return stopKillSuggestions;\n        }(),\n\n        isCursorAtEnd: function () {\n            function isCursorAtEnd() {\n                var that = this,\n                    valLength = that.el.val().length,\n                    selectionStart = that.element.selectionStart,\n                    range;\n\n                if (typeof selectionStart === 'number') {\n                    return selectionStart === valLength;\n                }\n                if (document.selection) {\n                    range = document.selection.createRange();\n                    range.moveStart('character', -valLength);\n                    return valLength === range.text.length;\n                }\n                return true;\n            }\n\n            return isCursorAtEnd;\n        }(),\n\n        onKeyPress: function () {\n            function onKeyPress(e) {\n                var that = this;\n\n                // If suggestions are hidden and user presses arrow down, display suggestions:\n                if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\n                    that.suggest();\n                    return;\n                }\n\n                if (that.disabled || !that.visible) {\n                    return;\n                }\n\n                switch (e.which) {\n                    case keys.ESC:\n                        that.el.val(that.currentValue);\n                        that.hide();\n                        break;\n                    case keys.RIGHT:\n                        if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\n                            that.selectHint();\n                            break;\n                        }\n                        return;\n                    case keys.TAB:\n                        if (that.hint && that.options.onHint) {\n                            that.selectHint();\n                            return;\n                        }\n                    // Fall through to RETURN\n                    case keys.RETURN:\n                        if (that.selectedIndex === -1) {\n                            that.hide();\n                            return;\n                        }\n                        that.select(that.selectedIndex);\n                        if (e.which === keys.TAB && that.options.tabDisabled === false) {\n                            return;\n                        }\n                        break;\n                    case keys.UP:\n                        that.moveUp();\n                        break;\n                    case keys.DOWN:\n                        that.moveDown();\n                        break;\n                    default:\n                        return;\n                }\n\n                // Cancel event if function did not return:\n                e.stopImmediatePropagation();\n                e.preventDefault();\n            }\n\n            return onKeyPress;\n        }(),\n\n        onKeyUp: function () {\n            function onKeyUp(e) {\n                var that = this;\n\n                if (that.disabled) {\n                    return;\n                }\n\n                switch (e.which) {\n                    case keys.UP:\n                    case keys.DOWN:\n                        return;\n                }\n\n                clearInterval(that.onChangeInterval);\n\n                if (that.currentValue !== that.el.val()) {\n                    that.findBestHint();\n                    if (that.options.deferRequestBy > 0) {\n                        // Defer lookup in case when value changes very quickly:\n                        that.onChangeInterval = setInterval(function () {\n                            that.onValueChange();\n                        }, that.options.deferRequestBy);\n                    } else {\n                        that.onValueChange();\n                    }\n                }\n            }\n\n            return onKeyUp;\n        }(),\n\n        onValueChange: function () {\n            function onValueChange() {\n                var that = this,\n                    options = that.options,\n                    value = that.el.val(),\n                    query = that.getQuery(value),\n                    index;\n\n                if (that.selection) {\n                    that.selection = null;\n                    (options.onInvalidateSelection || $.noop).call(that.element);\n                }\n\n                clearInterval(that.onChangeInterval);\n                that.currentValue = value;\n                that.selectedIndex = -1;\n\n                // Check existing suggestion for the match before proceeding:\n                if (options.triggerSelectOnValidInput) {\n                    index = that.findSuggestionIndex(query);\n                    if (index !== -1) {\n                        that.select(index);\n                        return;\n                    }\n                }\n\n                if (query.length < options.minChars) {\n                    that.hide();\n                } else {\n                    that.getSuggestions(query);\n                }\n            }\n\n            return onValueChange;\n        }(),\n\n        findSuggestionIndex: function () {\n            function findSuggestionIndex(query) {\n                var that = this,\n                    index = -1,\n                    queryLowerCase = query.toLowerCase();\n\n                $.each(that.suggestions, function (i, suggestion) {\n                    if (suggestion.value.toLowerCase() === queryLowerCase) {\n                        index = i;\n                        return false;\n                    }\n                });\n\n                return index;\n            }\n\n            return findSuggestionIndex;\n        }(),\n\n        getQuery: function () {\n            function getQuery(value) {\n                var delimiter = this.options.delimiter,\n                    parts;\n\n                if (!delimiter) {\n                    return value;\n                }\n                parts = value.split(delimiter);\n                return $.trim(parts[parts.length - 1]);\n            }\n\n            return getQuery;\n        }(),\n\n        getSuggestionsLocal: function () {\n            function getSuggestionsLocal(query) {\n                var that = this,\n                    options = that.options,\n                    queryLowerCase = query.toLowerCase(),\n                    filter = options.lookupFilter,\n                    limit = parseInt(options.lookupLimit, 10),\n                    data;\n\n                data = {\n                    suggestions: $.grep(options.lookup, function (suggestion) {\n                        return filter(suggestion, query, queryLowerCase);\n                    })\n                };\n\n                if (limit && data.suggestions.length > limit) {\n                    data.suggestions = data.suggestions.slice(0, limit);\n                }\n\n                return data;\n            }\n\n            return getSuggestionsLocal;\n        }(),\n\n        getSuggestions: function () {\n            function getSuggestions(q) {\n                var response,\n                    that = this,\n                    options = that.options,\n                    serviceUrl = options.serviceUrl,\n                    data,\n                    cacheKey;\n\n                options.params[options.paramName] = q;\n                data = options.ignoreParams ? null : options.params;\n\n                if (that.isLocal) {\n                    response = that.getSuggestionsLocal(q);\n                } else {\n                    if ($.isFunction(serviceUrl)) {\n                        serviceUrl = serviceUrl.call(that.element, q);\n                    }\n                    cacheKey = serviceUrl + '?' + $.param(data || {});\n                    response = that.cachedResponse[cacheKey];\n                }\n\n                if (response && $.isArray(response.suggestions)) {\n                    that.suggestions = response.suggestions;\n                    that.suggest();\n                } else if (!that.isBadQuery(q)) {\n                    if (options.onSearchStart.call(that.element, options.params) === false) {\n                        return;\n                    }\n                    if (that.currentRequest) {\n                        that.currentRequest.abort();\n                    }\n                    that.currentRequest = $.ajax({\n                        url: serviceUrl,\n                        data: data,\n                        type: options.type,\n                        dataType: options.dataType\n                    }).done(function (data) {\n                        that.currentRequest = null;\n                        that.processResponse(data, q, cacheKey);\n                        options.onSearchComplete.call(that.element, q);\n                    }).fail(function (jqXHR, textStatus, errorThrown) {\n                        options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\n                    });\n                }\n            }\n\n            return getSuggestions;\n        }(),\n\n        isBadQuery: function () {\n            function isBadQuery(q) {\n                var badQueries = this.badQueries,\n                    i = badQueries.length;\n\n                while (i--) {\n                    if (q.indexOf(badQueries[i]) === 0) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n\n            return isBadQuery;\n        }(),\n\n        hide: function () {\n            function hide() {\n                var that = this;\n                that.visible = false;\n                that.selectedIndex = -1;\n                $(that.suggestionsContainer).hide();\n                that.signalHint(null);\n            }\n\n            return hide;\n        }(),\n\n        suggest: function () {\n            function suggest() {\n                if (this.suggestions.length === 0) {\n                    this.hide();\n                    return;\n                }\n\n                var that = this,\n                    options = that.options,\n                    formatResult = options.formatResult,\n                    value = that.getQuery(that.currentValue),\n                    className = that.classes.suggestion,\n                    classSelected = that.classes.selected,\n                    container = $(that.suggestionsContainer),\n                    beforeRender = options.beforeRender,\n                    html = '',\n                    index,\n                    width;\n\n                if (options.triggerSelectOnValidInput) {\n                    index = that.findSuggestionIndex(value);\n                    if (index !== -1) {\n                        that.select(index);\n                        return;\n                    }\n                }\n\n                // Build suggestions inner HTML:\n                $.each(that.suggestions, function (i, suggestion) {\n                    html += '<div class=\"' + className + '\" data-index=\"' + i + '\">' + formatResult(suggestion, value) + '</div>';\n                });\n\n                // If width is auto, adjust width before displaying suggestions,\n                // because if instance was created before input had width, it will be zero.\n                // Also it adjusts if input width has changed.\n                // -2px to account for suggestions border.\n                if (options.width === 'auto') {\n                    width = that.el.outerWidth() - 2;\n                    container.width(width > 0 ? width : 300);\n                }\n\n                container.html(html);\n\n                // Select first value by default:\n                if (options.autoSelectFirst) {\n                    that.selectedIndex = 0;\n                    container.children().first().addClass(classSelected);\n                }\n\n                if ($.isFunction(beforeRender)) {\n                    beforeRender.call(that.element, container);\n                }\n\n                container.show();\n                that.visible = true;\n\n                that.findBestHint();\n            }\n\n            return suggest;\n        }(),\n\n        findBestHint: function () {\n            function findBestHint() {\n                var that = this,\n                    value = that.el.val().toLowerCase(),\n                    bestMatch = null;\n\n                if (!value) {\n                    return;\n                }\n\n                $.each(that.suggestions, function (i, suggestion) {\n                    var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;\n                    if (foundMatch) {\n                        bestMatch = suggestion;\n                    }\n                    return !foundMatch;\n                });\n\n                that.signalHint(bestMatch);\n            }\n\n            return findBestHint;\n        }(),\n\n        signalHint: function () {\n            function signalHint(suggestion) {\n                var hintValue = '',\n                    that = this;\n                if (suggestion) {\n                    hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);\n                }\n                if (that.hintValue !== hintValue) {\n                    that.hintValue = hintValue;\n                    that.hint = suggestion;\n                    (this.options.onHint || $.noop)(hintValue);\n                }\n            }\n\n            return signalHint;\n        }(),\n\n        verifySuggestionsFormat: function () {\n            function verifySuggestionsFormat(suggestions) {\n                // If suggestions is string array, convert them to supported format:\n                if (suggestions.length && typeof suggestions[0] === 'string') {\n                    return $.map(suggestions, function (value) {\n                        return { value: value, data: null };\n                    });\n                }\n\n                return suggestions;\n            }\n\n            return verifySuggestionsFormat;\n        }(),\n\n        processResponse: function () {\n            function processResponse(response, originalQuery, cacheKey) {\n                var that = this,\n                    options = that.options,\n                    result = options.transformResult(response, originalQuery);\n\n                result.suggestions = that.verifySuggestionsFormat(result.suggestions);\n\n                // Cache results if cache is not disabled:\n                if (!options.noCache) {\n                    that.cachedResponse[cacheKey] = result;\n                    if (result.suggestions.length === 0) {\n                        that.badQueries.push(cacheKey);\n                    }\n                }\n\n                // Return if originalQuery is not matching current query:\n                if (originalQuery !== that.getQuery(that.currentValue)) {\n                    return;\n                }\n\n                that.suggestions = result.suggestions;\n                that.suggest();\n            }\n\n            return processResponse;\n        }(),\n\n        activate: function () {\n            function activate(index) {\n                var that = this,\n                    activeItem,\n                    selected = that.classes.selected,\n                    container = $(that.suggestionsContainer),\n                    children = container.children();\n\n                container.children('.' + selected).removeClass(selected);\n\n                that.selectedIndex = index;\n\n                if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\n                    activeItem = children.get(that.selectedIndex);\n                    $(activeItem).addClass(selected);\n                    return activeItem;\n                }\n\n                return null;\n            }\n\n            return activate;\n        }(),\n\n        selectHint: function () {\n            function selectHint() {\n                var that = this,\n                    i = $.inArray(that.hint, that.suggestions);\n\n                that.select(i);\n            }\n\n            return selectHint;\n        }(),\n\n        select: function () {\n            function select(i) {\n                var that = this;\n                that.hide();\n                that.onSelect(i);\n            }\n\n            return select;\n        }(),\n\n        moveUp: function () {\n            function moveUp() {\n                var that = this;\n\n                if (that.selectedIndex === -1) {\n                    return;\n                }\n\n                if (that.selectedIndex === 0) {\n                    $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\n                    that.selectedIndex = -1;\n                    that.el.val(that.currentValue);\n                    that.findBestHint();\n                    return;\n                }\n\n                that.adjustScroll(that.selectedIndex - 1);\n            }\n\n            return moveUp;\n        }(),\n\n        moveDown: function () {\n            function moveDown() {\n                var that = this;\n\n                if (that.selectedIndex === that.suggestions.length - 1) {\n                    return;\n                }\n\n                that.adjustScroll(that.selectedIndex + 1);\n            }\n\n            return moveDown;\n        }(),\n\n        adjustScroll: function () {\n            function adjustScroll(index) {\n                var that = this,\n                    activeItem = that.activate(index),\n                    offsetTop,\n                    upperBound,\n                    lowerBound,\n                    heightDelta = 25;\n\n                if (!activeItem) {\n                    return;\n                }\n\n                offsetTop = activeItem.offsetTop;\n                upperBound = $(that.suggestionsContainer).scrollTop();\n                lowerBound = upperBound + that.options.maxHeight - heightDelta;\n\n                if (offsetTop < upperBound) {\n                    $(that.suggestionsContainer).scrollTop(offsetTop);\n                } else if (offsetTop > lowerBound) {\n                    $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);\n                }\n\n                that.el.val(that.getValue(that.suggestions[index].value));\n                that.signalHint(null);\n            }\n\n            return adjustScroll;\n        }(),\n\n        onSelect: function () {\n            function onSelect(index) {\n                var that = this,\n                    onSelectCallback = that.options.onSelect,\n                    suggestion = that.suggestions[index];\n\n                that.currentValue = that.getValue(suggestion.value);\n                that.el.val(that.currentValue);\n                that.signalHint(null);\n                that.suggestions = [];\n                that.selection = suggestion;\n\n                if ($.isFunction(onSelectCallback)) {\n                    onSelectCallback.call(that.element, suggestion);\n                }\n            }\n\n            return onSelect;\n        }(),\n\n        getValue: function () {\n            function getValue(value) {\n                var that = this,\n                    delimiter = that.options.delimiter,\n                    currentValue,\n                    parts;\n\n                if (!delimiter) {\n                    return value;\n                }\n\n                currentValue = that.currentValue;\n                parts = currentValue.split(delimiter);\n\n                if (parts.length === 1) {\n                    return value;\n                }\n\n                return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\n            }\n\n            return getValue;\n        }(),\n\n        dispose: function () {\n            function dispose() {\n                var that = this;\n                that.el.off('.autocomplete').removeData('autocomplete');\n                that.disableKillerFn();\n                $(window).off('resize.autocomplete', that.fixPositionCapture);\n                $(that.suggestionsContainer).remove();\n            }\n\n            return dispose;\n        }()\n    };\n\n    // Create chainable jQuery plugin:\n    $.fn.autocomplete = function (options, args) {\n        var dataKey = 'autocomplete';\n        // If function invoked without argument return\n        // instance of the first matched element:\n        if (arguments.length === 0) {\n            return this.first().data(dataKey);\n        }\n\n        return this.each(function () {\n            var inputElement = $(this),\n                instance = inputElement.data(dataKey);\n\n            if (typeof options === 'string') {\n                if (instance && typeof instance[options] === 'function') {\n                    instance[options](args);\n                }\n            } else {\n                // If instance already exists, destroy it:\n                if (instance && instance.dispose) {\n                    instance.dispose();\n                }\n                instance = new Autocomplete(this, options);\n                inputElement.data(dataKey, instance);\n            }\n        });\n    };\n});","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/vendor/jquery.autocomplete/src/jquery.autocomplete.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/src/jquery.autocomplete.js.map","sourcesContent":["/**\n*  Ajax Autocomplete for jQuery, version 1.2.9\n*  (c) 2013 Tomas Kirda\n*\n*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.\n*  For details, see the web site: https://github.com/devbridge/jQuery-Autocomplete\n*\n*/\n\n/*jslint  browser: true, white: true, plusplus: true */\n/*global define, window, document, jQuery */\n\n// Expose plugin as an AMD module if AMD loader is present:\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    var\n        utils = (function () {\n            return {\n                escapeRegExChars: function (value) {\n                    return value.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n                },\n                createNode: function (containerClass) {\n                    var div = document.createElement('div');\n                    div.className = containerClass;\n                    div.style.position = 'absolute';\n                    div.style.display = 'none';\n                    return div;\n                }\n            };\n        }()),\n\n        keys = {\n            ESC: 27,\n            TAB: 9,\n            RETURN: 13,\n            LEFT: 37,\n            UP: 38,\n            RIGHT: 39,\n            DOWN: 40\n        };\n\n    function Autocomplete(el, options) {\n        var noop = function () { },\n            that = this,\n            defaults = {\n                autoSelectFirst: false,\n                appendTo: 'body',\n                serviceUrl: null,\n                lookup: null,\n                onSelect: null,\n                width: 'auto',\n                minChars: 1,\n                maxHeight: 300,\n                deferRequestBy: 0,\n                params: {},\n                formatResult: Autocomplete.formatResult,\n                delimiter: null,\n                zIndex: 9999,\n                type: 'GET',\n                noCache: false,\n                onSearchStart: noop,\n                onSearchComplete: noop,\n                onSearchError: noop,\n                containerClass: 'autocomplete-suggestions',\n                tabDisabled: false,\n                dataType: 'text',\n                currentRequest: null,\n                triggerSelectOnValidInput: true,\n                lookupFilter: function (suggestion, originalQuery, queryLowerCase) {\n                    return suggestion.value.toLowerCase().indexOf(queryLowerCase) !== -1;\n                },\n                paramName: 'query',\n                transformResult: function (response) {\n                    return typeof response === 'string' ? $.parseJSON(response) : response;\n                }\n            };\n\n        // Shared variables:\n        that.element = el;\n        that.el = $(el);\n        that.suggestions = [];\n        that.badQueries = [];\n        that.selectedIndex = -1;\n        that.currentValue = that.element.value;\n        that.intervalId = 0;\n        that.cachedResponse = {};\n        that.onChangeInterval = null;\n        that.onChange = null;\n        that.isLocal = false;\n        that.suggestionsContainer = null;\n        that.options = $.extend({}, defaults, options);\n        that.classes = {\n            selected: 'autocomplete-selected',\n            suggestion: 'autocomplete-suggestion'\n        };\n        that.hint = null;\n        that.hintValue = '';\n        that.selection = null;\n\n        // Initialize and set options:\n        that.initialize();\n        that.setOptions(options);\n    }\n\n    Autocomplete.utils = utils;\n\n    $.Autocomplete = Autocomplete;\n\n    Autocomplete.formatResult = function (suggestion, currentValue) {\n        var pattern = '(' + utils.escapeRegExChars(currentValue) + ')';\n\n        return suggestion.value.replace(new RegExp(pattern, 'gi'), '<strong>$1<\\/strong>');\n    };\n\n    Autocomplete.prototype = {\n\n        killerFn: null,\n\n        initialize: function () {\n            var that = this,\n                suggestionSelector = '.' + that.classes.suggestion,\n                selected = that.classes.selected,\n                options = that.options,\n                container;\n\n            // Remove autocomplete attribute to prevent native suggestions:\n            that.element.setAttribute('autocomplete', 'off');\n\n            that.killerFn = function (e) {\n                if ($(e.target).closest('.' + that.options.containerClass).length === 0) {\n                    that.killSuggestions();\n                    that.disableKillerFn();\n                }\n            };\n\n            that.suggestionsContainer = Autocomplete.utils.createNode(options.containerClass);\n\n            container = $(that.suggestionsContainer);\n\n            container.appendTo(options.appendTo);\n\n            // Only set width if it was provided:\n            if (options.width !== 'auto') {\n                container.width(options.width);\n            }\n\n            // Listen for mouse over event on suggestions list:\n            container.on('mouseover.autocomplete', suggestionSelector, function () {\n                that.activate($(this).data('index'));\n            });\n\n            // Deselect active element when mouse leaves suggestions container:\n            container.on('mouseout.autocomplete', function () {\n                that.selectedIndex = -1;\n                container.children('.' + selected).removeClass(selected);\n            });\n\n            // Listen for click event on suggestions list:\n            container.on('click.autocomplete', suggestionSelector, function () {\n                that.select($(this).data('index'));\n            });\n\n            that.fixPosition();\n\n            that.fixPositionCapture = function () {\n                if (that.visible) {\n                    that.fixPosition();\n                }\n            };\n\n            $(window).on('resize.autocomplete', that.fixPositionCapture);\n\n            that.el.on('keydown.autocomplete', function (e) { that.onKeyPress(e); });\n            that.el.on('keyup.autocomplete', function (e) { that.onKeyUp(e); });\n            that.el.on('blur.autocomplete', function () { that.onBlur(); });\n            that.el.on('focus.autocomplete', function () { that.onFocus(); });\n            that.el.on('change.autocomplete', function (e) { that.onKeyUp(e); });\n        },\n\n        onFocus: function () {\n            var that = this;\n            that.fixPosition();\n            if (that.options.minChars <= that.el.val().length) {\n                that.onValueChange();\n            }\n        },\n\n        onBlur: function () {\n            this.enableKillerFn();\n        },\n\n        setOptions: function (suppliedOptions) {\n            var that = this,\n                options = that.options;\n\n            $.extend(options, suppliedOptions);\n\n            that.isLocal = $.isArray(options.lookup);\n\n            if (that.isLocal) {\n                options.lookup = that.verifySuggestionsFormat(options.lookup);\n            }\n\n            // Adjust height, width and z-index:\n            $(that.suggestionsContainer).css({\n                'max-height': options.maxHeight + 'px',\n                'width': options.width + 'px',\n                'z-index': options.zIndex\n            });\n        },\n\n        clearCache: function () {\n            this.cachedResponse = {};\n            this.badQueries = [];\n        },\n\n        clear: function () {\n            this.clearCache();\n            this.currentValue = '';\n            this.suggestions = [];\n        },\n\n        disable: function () {\n            var that = this;\n            that.disabled = true;\n            if (that.currentRequest) {\n                that.currentRequest.abort();\n            }\n        },\n\n        enable: function () {\n            this.disabled = false;\n        },\n\n        fixPosition: function () {\n            var that = this,\n                offset,\n                styles;\n\n            // Don't adjsut position if custom container has been specified:\n            if (that.options.appendTo !== 'body') {\n                return;\n            }\n\n            offset = that.el.offset();\n\n            styles = {\n                top: (offset.top + that.el.outerHeight()) + 'px',\n                left: offset.left + 'px'\n            };\n\n            if (that.options.width === 'auto') {\n                styles.width = (that.el.outerWidth() - 2) + 'px';\n            }\n\n            $(that.suggestionsContainer).css(styles);\n        },\n\n        enableKillerFn: function () {\n            var that = this;\n            $(document).on('click.autocomplete', that.killerFn);\n        },\n\n        disableKillerFn: function () {\n            var that = this;\n            $(document).off('click.autocomplete', that.killerFn);\n        },\n\n        killSuggestions: function () {\n            var that = this;\n            that.stopKillSuggestions();\n            that.intervalId = window.setInterval(function () {\n                that.hide();\n                that.stopKillSuggestions();\n            }, 50);\n        },\n\n        stopKillSuggestions: function () {\n            window.clearInterval(this.intervalId);\n        },\n\n        isCursorAtEnd: function () {\n            var that = this,\n                valLength = that.el.val().length,\n                selectionStart = that.element.selectionStart,\n                range;\n\n            if (typeof selectionStart === 'number') {\n                return selectionStart === valLength;\n            }\n            if (document.selection) {\n                range = document.selection.createRange();\n                range.moveStart('character', -valLength);\n                return valLength === range.text.length;\n            }\n            return true;\n        },\n\n        onKeyPress: function (e) {\n            var that = this;\n\n            // If suggestions are hidden and user presses arrow down, display suggestions:\n            if (!that.disabled && !that.visible && e.which === keys.DOWN && that.currentValue) {\n                that.suggest();\n                return;\n            }\n\n            if (that.disabled || !that.visible) {\n                return;\n            }\n\n            switch (e.which) {\n                case keys.ESC:\n                    that.el.val(that.currentValue);\n                    that.hide();\n                    break;\n                case keys.RIGHT:\n                    if (that.hint && that.options.onHint && that.isCursorAtEnd()) {\n                        that.selectHint();\n                        break;\n                    }\n                    return;\n                case keys.TAB:\n                    if (that.hint && that.options.onHint) {\n                        that.selectHint();\n                        return;\n                    }\n                    // Fall through to RETURN\n                case keys.RETURN:\n                    if (that.selectedIndex === -1) {\n                        that.hide();\n                        return;\n                    }\n                    that.select(that.selectedIndex);\n                    if (e.which === keys.TAB && that.options.tabDisabled === false) {\n                        return;\n                    }\n                    break;\n                case keys.UP:\n                    that.moveUp();\n                    break;\n                case keys.DOWN:\n                    that.moveDown();\n                    break;\n                default:\n                    return;\n            }\n\n            // Cancel event if function did not return:\n            e.stopImmediatePropagation();\n            e.preventDefault();\n        },\n\n        onKeyUp: function (e) {\n            var that = this;\n\n            if (that.disabled) {\n                return;\n            }\n\n            switch (e.which) {\n                case keys.UP:\n                case keys.DOWN:\n                    return;\n            }\n\n            clearInterval(that.onChangeInterval);\n\n            if (that.currentValue !== that.el.val()) {\n                that.findBestHint();\n                if (that.options.deferRequestBy > 0) {\n                    // Defer lookup in case when value changes very quickly:\n                    that.onChangeInterval = setInterval(function () {\n                        that.onValueChange();\n                    }, that.options.deferRequestBy);\n                } else {\n                    that.onValueChange();\n                }\n            }\n        },\n\n        onValueChange: function () {\n            var that = this,\n                options = that.options,\n                value = that.el.val(),\n                query = that.getQuery(value),\n                index;\n\n            if (that.selection) {\n                that.selection = null;\n                (options.onInvalidateSelection || $.noop).call(that.element);\n            }\n\n            clearInterval(that.onChangeInterval);\n            that.currentValue = value;\n            that.selectedIndex = -1;\n\n            // Check existing suggestion for the match before proceeding:\n            if (options.triggerSelectOnValidInput) {\n                index = that.findSuggestionIndex(query);\n                if (index !== -1) {\n                    that.select(index);\n                    return;\n                }\n            }\n\n            if (query.length < options.minChars) {\n                that.hide();\n            } else {\n                that.getSuggestions(query);\n            }\n        },\n\n        findSuggestionIndex: function (query) {\n            var that = this,\n                index = -1,\n                queryLowerCase = query.toLowerCase();\n\n            $.each(that.suggestions, function (i, suggestion) {\n                if (suggestion.value.toLowerCase() === queryLowerCase) {\n                    index = i;\n                    return false;\n                }\n            });\n\n            return index;\n        },\n\n        getQuery: function (value) {\n            var delimiter = this.options.delimiter,\n                parts;\n\n            if (!delimiter) {\n                return value;\n            }\n            parts = value.split(delimiter);\n            return $.trim(parts[parts.length - 1]);\n        },\n\n        getSuggestionsLocal: function (query) {\n            var that = this,\n                options = that.options,\n                queryLowerCase = query.toLowerCase(),\n                filter = options.lookupFilter,\n                limit = parseInt(options.lookupLimit, 10),\n                data;\n\n            data = {\n                suggestions: $.grep(options.lookup, function (suggestion) {\n                    return filter(suggestion, query, queryLowerCase);\n                })\n            };\n\n            if (limit && data.suggestions.length > limit) {\n                data.suggestions = data.suggestions.slice(0, limit);\n            }\n\n            return data;\n        },\n\n        getSuggestions: function (q) {\n            var response,\n                that = this,\n                options = that.options,\n                serviceUrl = options.serviceUrl,\n                data,\n                cacheKey;\n\n            options.params[options.paramName] = q;\n            data = options.ignoreParams ? null : options.params;\n\n            if (that.isLocal) {\n                response = that.getSuggestionsLocal(q);\n            } else {\n                if ($.isFunction(serviceUrl)) {\n                    serviceUrl = serviceUrl.call(that.element, q);\n                }\n                cacheKey = serviceUrl + '?' + $.param(data || {});\n                response = that.cachedResponse[cacheKey];\n            }\n\n            if (response && $.isArray(response.suggestions)) {\n                that.suggestions = response.suggestions;\n                that.suggest();\n            } else if (!that.isBadQuery(q)) {\n                if (options.onSearchStart.call(that.element, options.params) === false) {\n                    return;\n                }\n                if (that.currentRequest) {\n                    that.currentRequest.abort();\n                }\n                that.currentRequest = $.ajax({\n                    url: serviceUrl,\n                    data: data,\n                    type: options.type,\n                    dataType: options.dataType\n                }).done(function (data) {\n                    that.currentRequest = null;\n                    that.processResponse(data, q, cacheKey);\n                    options.onSearchComplete.call(that.element, q);\n                }).fail(function (jqXHR, textStatus, errorThrown) {\n                    options.onSearchError.call(that.element, q, jqXHR, textStatus, errorThrown);\n                });\n            }\n        },\n\n        isBadQuery: function (q) {\n            var badQueries = this.badQueries,\n                i = badQueries.length;\n\n            while (i--) {\n                if (q.indexOf(badQueries[i]) === 0) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        hide: function () {\n            var that = this;\n            that.visible = false;\n            that.selectedIndex = -1;\n            $(that.suggestionsContainer).hide();\n            that.signalHint(null);\n        },\n\n        suggest: function () {\n            if (this.suggestions.length === 0) {\n                this.hide();\n                return;\n            }\n\n            var that = this,\n                options = that.options,\n                formatResult = options.formatResult,\n                value = that.getQuery(that.currentValue),\n                className = that.classes.suggestion,\n                classSelected = that.classes.selected,\n                container = $(that.suggestionsContainer),\n                beforeRender = options.beforeRender,\n                html = '',\n                index,\n                width;\n\n            if (options.triggerSelectOnValidInput) {\n                index = that.findSuggestionIndex(value);\n                if (index !== -1) {\n                    that.select(index);\n                    return;\n                }\n            }\n\n            // Build suggestions inner HTML:\n            $.each(that.suggestions, function (i, suggestion) {\n                html += '<div class=\"' + className + '\" data-index=\"' + i + '\">' + formatResult(suggestion, value) + '</div>';\n            });\n\n            // If width is auto, adjust width before displaying suggestions,\n            // because if instance was created before input had width, it will be zero.\n            // Also it adjusts if input width has changed.\n            // -2px to account for suggestions border.\n            if (options.width === 'auto') {\n                width = that.el.outerWidth() - 2;\n                container.width(width > 0 ? width : 300);\n            }\n\n            container.html(html);\n\n            // Select first value by default:\n            if (options.autoSelectFirst) {\n                that.selectedIndex = 0;\n                container.children().first().addClass(classSelected);\n            }\n\n            if ($.isFunction(beforeRender)) {\n                beforeRender.call(that.element, container);\n            }\n\n            container.show();\n            that.visible = true;\n\n            that.findBestHint();\n        },\n\n        findBestHint: function () {\n            var that = this,\n                value = that.el.val().toLowerCase(),\n                bestMatch = null;\n\n            if (!value) {\n                return;\n            }\n\n            $.each(that.suggestions, function (i, suggestion) {\n                var foundMatch = suggestion.value.toLowerCase().indexOf(value) === 0;\n                if (foundMatch) {\n                    bestMatch = suggestion;\n                }\n                return !foundMatch;\n            });\n\n            that.signalHint(bestMatch);\n        },\n\n        signalHint: function (suggestion) {\n            var hintValue = '',\n                that = this;\n            if (suggestion) {\n                hintValue = that.currentValue + suggestion.value.substr(that.currentValue.length);\n            }\n            if (that.hintValue !== hintValue) {\n                that.hintValue = hintValue;\n                that.hint = suggestion;\n                (this.options.onHint || $.noop)(hintValue);\n            }\n        },\n\n        verifySuggestionsFormat: function (suggestions) {\n            // If suggestions is string array, convert them to supported format:\n            if (suggestions.length && typeof suggestions[0] === 'string') {\n                return $.map(suggestions, function (value) {\n                    return { value: value, data: null };\n                });\n            }\n\n            return suggestions;\n        },\n\n        processResponse: function (response, originalQuery, cacheKey) {\n            var that = this,\n                options = that.options,\n                result = options.transformResult(response, originalQuery);\n\n            result.suggestions = that.verifySuggestionsFormat(result.suggestions);\n\n            // Cache results if cache is not disabled:\n            if (!options.noCache) {\n                that.cachedResponse[cacheKey] = result;\n                if (result.suggestions.length === 0) {\n                    that.badQueries.push(cacheKey);\n                }\n            }\n\n            // Return if originalQuery is not matching current query:\n            if (originalQuery !== that.getQuery(that.currentValue)) {\n                return;\n            }\n\n            that.suggestions = result.suggestions;\n            that.suggest();\n        },\n\n        activate: function (index) {\n            var that = this,\n                activeItem,\n                selected = that.classes.selected,\n                container = $(that.suggestionsContainer),\n                children = container.children();\n\n            container.children('.' + selected).removeClass(selected);\n\n            that.selectedIndex = index;\n\n            if (that.selectedIndex !== -1 && children.length > that.selectedIndex) {\n                activeItem = children.get(that.selectedIndex);\n                $(activeItem).addClass(selected);\n                return activeItem;\n            }\n\n            return null;\n        },\n\n        selectHint: function () {\n            var that = this,\n                i = $.inArray(that.hint, that.suggestions);\n\n            that.select(i);\n        },\n\n        select: function (i) {\n            var that = this;\n            that.hide();\n            that.onSelect(i);\n        },\n\n        moveUp: function () {\n            var that = this;\n\n            if (that.selectedIndex === -1) {\n                return;\n            }\n\n            if (that.selectedIndex === 0) {\n                $(that.suggestionsContainer).children().first().removeClass(that.classes.selected);\n                that.selectedIndex = -1;\n                that.el.val(that.currentValue);\n                that.findBestHint();\n                return;\n            }\n\n            that.adjustScroll(that.selectedIndex - 1);\n        },\n\n        moveDown: function () {\n            var that = this;\n\n            if (that.selectedIndex === (that.suggestions.length - 1)) {\n                return;\n            }\n\n            that.adjustScroll(that.selectedIndex + 1);\n        },\n\n        adjustScroll: function (index) {\n            var that = this,\n                activeItem = that.activate(index),\n                offsetTop,\n                upperBound,\n                lowerBound,\n                heightDelta = 25;\n\n            if (!activeItem) {\n                return;\n            }\n\n            offsetTop = activeItem.offsetTop;\n            upperBound = $(that.suggestionsContainer).scrollTop();\n            lowerBound = upperBound + that.options.maxHeight - heightDelta;\n\n            if (offsetTop < upperBound) {\n                $(that.suggestionsContainer).scrollTop(offsetTop);\n            } else if (offsetTop > lowerBound) {\n                $(that.suggestionsContainer).scrollTop(offsetTop - that.options.maxHeight + heightDelta);\n            }\n\n            that.el.val(that.getValue(that.suggestions[index].value));\n            that.signalHint(null);\n        },\n\n        onSelect: function (index) {\n            var that = this,\n                onSelectCallback = that.options.onSelect,\n                suggestion = that.suggestions[index];\n\n            that.currentValue = that.getValue(suggestion.value);\n            that.el.val(that.currentValue);\n            that.signalHint(null);\n            that.suggestions = [];\n            that.selection = suggestion;\n\n            if ($.isFunction(onSelectCallback)) {\n                onSelectCallback.call(that.element, suggestion);\n            }\n        },\n\n        getValue: function (value) {\n            var that = this,\n                delimiter = that.options.delimiter,\n                currentValue,\n                parts;\n\n            if (!delimiter) {\n                return value;\n            }\n\n            currentValue = that.currentValue;\n            parts = currentValue.split(delimiter);\n\n            if (parts.length === 1) {\n                return value;\n            }\n\n            return currentValue.substr(0, currentValue.length - parts[parts.length - 1].length) + value;\n        },\n\n        dispose: function () {\n            var that = this;\n            that.el.off('.autocomplete').removeData('autocomplete');\n            that.disableKillerFn();\n            $(window).off('resize.autocomplete', that.fixPositionCapture);\n            $(that.suggestionsContainer).remove();\n        }\n    };\n\n    // Create chainable jQuery plugin:\n    $.fn.autocomplete = function (options, args) {\n        var dataKey = 'autocomplete';\n        // If function invoked without argument return\n        // instance of the first matched element:\n        if (arguments.length === 0) {\n            return this.first().data(dataKey);\n        }\n\n        return this.each(function () {\n            var inputElement = $(this),\n                instance = inputElement.data(dataKey);\n\n            if (typeof options === 'string') {\n                if (instance && typeof instance[options] === 'function') {\n                    instance[options](args);\n                }\n            } else {\n                // If instance already exists, destroy it:\n                if (instance && instance.dispose) {\n                    instance.dispose();\n                }\n                instance = new Autocomplete(this, options);\n                inputElement.data(dataKey, instance);\n            }\n        });\n    };\n}));\n"]},"hash":"822367b986d70827c3df03f30bbcac8edc3a1e68"}
