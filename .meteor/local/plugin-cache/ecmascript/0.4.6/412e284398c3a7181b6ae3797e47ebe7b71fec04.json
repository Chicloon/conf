{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/dist/plugins/foundation.offcanvas.js","filenameRelative":"/packages/zurb:foundation-sites/dist/plugins/foundation.offcanvas.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/dist/plugins/foundation.offcanvas.js.map","sourceFileName":"/packages/zurb:foundation-sites/dist/plugins/foundation.offcanvas.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.offcanvas"},"ignored":false,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n!function ($) {\n\n  /**\n   * OffCanvas module.\n   * @module foundation.offcanvas\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.triggers\n   * @requires foundation.util.motion\n   */\n\n  var OffCanvas = function () {\n    /**\n     * Creates a new instance of an off-canvas wrapper.\n     * @class\n     * @fires OffCanvas#init\n     * @param {Object} element - jQuery object to initialize.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function OffCanvas(element, options) {\n      _classCallCheck(this, OffCanvas);\n\n      this.$element = element;\n      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);\n      this.$lastTrigger = $();\n      this.$triggers = $();\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'OffCanvas');\n    }\n\n    /**\n     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n     * @function\n     * @private\n     */\n\n    _createClass(OffCanvas, [{\n      key: '_init',\n      value: function () {\n        function _init() {\n          var id = this.$element.attr('id');\n\n          this.$element.attr('aria-hidden', 'true');\n\n          // Find triggers that affect this element and add aria-expanded to them\n          this.$triggers = $(document).find('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-expanded', 'false').attr('aria-controls', id);\n\n          // Add a close trigger over the body if necessary\n          if (this.options.closeOnClick) {\n            if ($('.js-off-canvas-exit').length) {\n              this.$exiter = $('.js-off-canvas-exit');\n            } else {\n              var exiter = document.createElement('div');\n              exiter.setAttribute('class', 'js-off-canvas-exit');\n              $('[data-off-canvas-content]').append(exiter);\n\n              this.$exiter = $(exiter);\n            }\n          }\n\n          this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\n\n          if (this.options.isRevealed) {\n            this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\n            this._setMQChecker();\n          }\n          if (!this.options.transitionTime) {\n            this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;\n          }\n        }\n\n        return _init;\n      }()\n\n      /**\n       * Adds event handlers to the off-canvas wrapper and the exit overlay.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function () {\n        function _events() {\n          this.$element.off('.zf.trigger .zf.offcanvas').on({\n            'open.zf.trigger': this.open.bind(this),\n            'close.zf.trigger': this.close.bind(this),\n            'toggle.zf.trigger': this.toggle.bind(this),\n            'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\n          });\n\n          if (this.options.closeOnClick && this.$exiter.length) {\n            this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });\n          }\n        }\n\n        return _events;\n      }()\n\n      /**\n       * Applies event listener for elements that will reveal at certain breakpoints.\n       * @private\n       */\n\n    }, {\n      key: '_setMQChecker',\n      value: function () {\n        function _setMQChecker() {\n          var _this = this;\n\n          $(window).on('changed.zf.mediaquery', function () {\n            if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\n              _this.reveal(true);\n            } else {\n              _this.reveal(false);\n            }\n          }).one('load.zf.offcanvas', function () {\n            if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\n              _this.reveal(true);\n            }\n          });\n        }\n\n        return _setMQChecker;\n      }()\n\n      /**\n       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n       * @param {Boolean} isRevealed - true if element should be revealed.\n       * @function\n       */\n\n    }, {\n      key: 'reveal',\n      value: function () {\n        function reveal(isRevealed) {\n          var $closer = this.$element.find('[data-close]');\n          if (isRevealed) {\n            this.close();\n            this.isRevealed = true;\n            // if (!this.options.forceTop) {\n            //   var scrollPos = parseInt(window.pageYOffset);\n            //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n            // }\n            // if (this.options.isSticky) { this._stick(); }\n            this.$element.off('open.zf.trigger toggle.zf.trigger');\n            if ($closer.length) {\n              $closer.hide();\n            }\n          } else {\n            this.isRevealed = false;\n            // if (this.options.isSticky || !this.options.forceTop) {\n            //   this.$element[0].style.transform = '';\n            //   $(window).off('scroll.zf.offcanvas');\n            // }\n            this.$element.on({\n              'open.zf.trigger': this.open.bind(this),\n              'toggle.zf.trigger': this.toggle.bind(this)\n            });\n            if ($closer.length) {\n              $closer.show();\n            }\n          }\n        }\n\n        return reveal;\n      }()\n\n      /**\n       * Opens the off-canvas menu.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       * @fires OffCanvas#opened\n       */\n\n    }, {\n      key: 'open',\n      value: function () {\n        function open(event, trigger) {\n          if (this.$element.hasClass('is-open') || this.isRevealed) {\n            return;\n          }\n          var _this = this,\n              $body = $(document.body);\n\n          if (this.options.forceTop) {\n            $('body').scrollTop(0);\n          }\n          // window.pageYOffset = 0;\n\n          // if (!this.options.forceTop) {\n          //   var scrollPos = parseInt(window.pageYOffset);\n          //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n          //   if (this.$exiter.length) {\n          //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n          //   }\n          // }\n          /**\n           * Fires when the off-canvas menu opens.\n           * @event OffCanvas#opened\n           */\n          Foundation.Move(this.options.transitionTime, this.$element, function () {\n            $('[data-off-canvas-wrapper]').addClass('is-off-canvas-open is-open-' + _this.options.position);\n\n            _this.$element.addClass('is-open');\n\n            // if (_this.options.isSticky) {\n            //   _this._stick();\n            // }\n          });\n\n          this.$triggers.attr('aria-expanded', 'true');\n          this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');\n\n          if (this.options.closeOnClick) {\n            this.$exiter.addClass('is-visible');\n          }\n\n          if (trigger) {\n            this.$lastTrigger = trigger;\n          }\n\n          if (this.options.autoFocus) {\n            this.$element.one(Foundation.transitionend(this.$element), function () {\n              _this.$element.find('a, button').eq(0).focus();\n            });\n          }\n\n          if (this.options.trapFocus) {\n            $('[data-off-canvas-content]').attr('tabindex', '-1');\n            this._trapFocus();\n          }\n        }\n\n        return open;\n      }()\n\n      /**\n       * Traps focus within the offcanvas on open.\n       * @private\n       */\n\n    }, {\n      key: '_trapFocus',\n      value: function () {\n        function _trapFocus() {\n          var focusable = Foundation.Keyboard.findFocusable(this.$element),\n              first = focusable.eq(0),\n              last = focusable.eq(-1);\n\n          focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {\n            if (e.which === 9 || e.keycode === 9) {\n              if (e.target === last[0] && !e.shiftKey) {\n                e.preventDefault();\n                first.focus();\n              }\n              if (e.target === first[0] && e.shiftKey) {\n                e.preventDefault();\n                last.focus();\n              }\n            }\n          });\n        }\n\n        return _trapFocus;\n      }()\n\n      /**\n       * Allows the offcanvas to appear sticky utilizing translate properties.\n       * @private\n       */\n      // OffCanvas.prototype._stick = function() {\n      //   var elStyle = this.$element[0].style;\n      //\n      //   if (this.options.closeOnClick) {\n      //     var exitStyle = this.$exiter[0].style;\n      //   }\n      //\n      //   $(window).on('scroll.zf.offcanvas', function(e) {\n      //     console.log(e);\n      //     var pageY = window.pageYOffset;\n      //     elStyle.transform = 'translate(0,' + pageY + 'px)';\n      //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }\n      //   });\n      //   // this.$element.trigger('stuck.zf.offcanvas');\n      // };\n      /**\n       * Closes the off-canvas menu.\n       * @function\n       * @param {Function} cb - optional cb to fire after closure.\n       * @fires OffCanvas#closed\n       */\n\n    }, {\n      key: 'close',\n      value: function () {\n        function close(cb) {\n          if (!this.$element.hasClass('is-open') || this.isRevealed) {\n            return;\n          }\n\n          var _this = this;\n\n          //  Foundation.Move(this.options.transitionTime, this.$element, function() {\n          $('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-' + _this.options.position);\n          _this.$element.removeClass('is-open');\n          // Foundation._reflow();\n          // });\n          this.$element.attr('aria-hidden', 'true')\n          /**\n           * Fires when the off-canvas menu opens.\n           * @event OffCanvas#closed\n           */\n          .trigger('closed.zf.offcanvas');\n          // if (_this.options.isSticky || !_this.options.forceTop) {\n          //   setTimeout(function() {\n          //     _this.$element[0].style.transform = '';\n          //     $(window).off('scroll.zf.offcanvas');\n          //   }, this.options.transitionTime);\n          // }\n          if (this.options.closeOnClick) {\n            this.$exiter.removeClass('is-visible');\n          }\n\n          this.$triggers.attr('aria-expanded', 'false');\n          if (this.options.trapFocus) {\n            $('[data-off-canvas-content]').removeAttr('tabindex');\n          }\n        }\n\n        return close;\n      }()\n\n      /**\n       * Toggles the off-canvas menu open or closed.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       */\n\n    }, {\n      key: 'toggle',\n      value: function () {\n        function toggle(event, trigger) {\n          if (this.$element.hasClass('is-open')) {\n            this.close(event, trigger);\n          } else {\n            this.open(event, trigger);\n          }\n        }\n\n        return toggle;\n      }()\n\n      /**\n       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_handleKeyboard',\n      value: function () {\n        function _handleKeyboard(event) {\n          if (event.which !== 27) return;\n\n          event.stopPropagation();\n          event.preventDefault();\n          this.close();\n          this.$lastTrigger.focus();\n        }\n\n        return _handleKeyboard;\n      }()\n\n      /**\n       * Destroys the offcanvas plugin.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function () {\n        function destroy() {\n          this.close();\n          this.$element.off('.zf.trigger .zf.offcanvas');\n          this.$exiter.off('.zf.offcanvas');\n\n          Foundation.unregisterPlugin(this);\n        }\n\n        return destroy;\n      }()\n    }]);\n\n    return OffCanvas;\n  }();\n\n  OffCanvas.defaults = {\n    /**\n     * Allow the user to click outside of the menu to close it.\n     * @option\n     * @example true\n     */\n    closeOnClick: true,\n\n    /**\n     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n     * @option\n     * @example 500\n     */\n    transitionTime: 0,\n\n    /**\n     * Direction the offcanvas opens from. Determines class applied to body.\n     * @option\n     * @example left\n     */\n    position: 'left',\n\n    /**\n     * Force the page to scroll to top on open.\n     * @option\n     * @example true\n     */\n    forceTop: true,\n\n    /**\n     * Allow the offcanvas to remain open for certain breakpoints.\n     * @option\n     * @example false\n     */\n    isRevealed: false,\n\n    /**\n     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n     * @option\n     * @example reveal-for-large\n     */\n    revealOn: null,\n\n    /**\n     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n     * @option\n     * @example true\n     */\n    autoFocus: true,\n\n    /**\n     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n     * @option\n     * TODO improve the regex testing for this.\n     * @example reveal-for-large\n     */\n    revealClass: 'reveal-for-',\n\n    /**\n     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n     * @option\n     * @example true\n     */\n    trapFocus: false\n  };\n\n  // Window exports\n  Foundation.plugin(OffCanvas, 'OffCanvas');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/dist/plugins/foundation.offcanvas.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/dist/plugins/foundation.offcanvas.js.map","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * OffCanvas module.\n   * @module foundation.offcanvas\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.triggers\n   * @requires foundation.util.motion\n   */\n\n  var OffCanvas = function () {\n    /**\n     * Creates a new instance of an off-canvas wrapper.\n     * @class\n     * @fires OffCanvas#init\n     * @param {Object} element - jQuery object to initialize.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function OffCanvas(element, options) {\n      _classCallCheck(this, OffCanvas);\n\n      this.$element = element;\n      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);\n      this.$lastTrigger = $();\n      this.$triggers = $();\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'OffCanvas');\n    }\n\n    /**\n     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n     * @function\n     * @private\n     */\n\n\n    _createClass(OffCanvas, [{\n      key: '_init',\n      value: function _init() {\n        var id = this.$element.attr('id');\n\n        this.$element.attr('aria-hidden', 'true');\n\n        // Find triggers that affect this element and add aria-expanded to them\n        this.$triggers = $(document).find('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-expanded', 'false').attr('aria-controls', id);\n\n        // Add a close trigger over the body if necessary\n        if (this.options.closeOnClick) {\n          if ($('.js-off-canvas-exit').length) {\n            this.$exiter = $('.js-off-canvas-exit');\n          } else {\n            var exiter = document.createElement('div');\n            exiter.setAttribute('class', 'js-off-canvas-exit');\n            $('[data-off-canvas-content]').append(exiter);\n\n            this.$exiter = $(exiter);\n          }\n        }\n\n        this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\n\n        if (this.options.isRevealed) {\n          this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\n          this._setMQChecker();\n        }\n        if (!this.options.transitionTime) {\n          this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;\n        }\n      }\n\n      /**\n       * Adds event handlers to the off-canvas wrapper and the exit overlay.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        this.$element.off('.zf.trigger .zf.offcanvas').on({\n          'open.zf.trigger': this.open.bind(this),\n          'close.zf.trigger': this.close.bind(this),\n          'toggle.zf.trigger': this.toggle.bind(this),\n          'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\n        });\n\n        if (this.options.closeOnClick && this.$exiter.length) {\n          this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });\n        }\n      }\n\n      /**\n       * Applies event listener for elements that will reveal at certain breakpoints.\n       * @private\n       */\n\n    }, {\n      key: '_setMQChecker',\n      value: function _setMQChecker() {\n        var _this = this;\n\n        $(window).on('changed.zf.mediaquery', function () {\n          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\n            _this.reveal(true);\n          } else {\n            _this.reveal(false);\n          }\n        }).one('load.zf.offcanvas', function () {\n          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\n            _this.reveal(true);\n          }\n        });\n      }\n\n      /**\n       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n       * @param {Boolean} isRevealed - true if element should be revealed.\n       * @function\n       */\n\n    }, {\n      key: 'reveal',\n      value: function reveal(isRevealed) {\n        var $closer = this.$element.find('[data-close]');\n        if (isRevealed) {\n          this.close();\n          this.isRevealed = true;\n          // if (!this.options.forceTop) {\n          //   var scrollPos = parseInt(window.pageYOffset);\n          //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n          // }\n          // if (this.options.isSticky) { this._stick(); }\n          this.$element.off('open.zf.trigger toggle.zf.trigger');\n          if ($closer.length) {\n            $closer.hide();\n          }\n        } else {\n          this.isRevealed = false;\n          // if (this.options.isSticky || !this.options.forceTop) {\n          //   this.$element[0].style.transform = '';\n          //   $(window).off('scroll.zf.offcanvas');\n          // }\n          this.$element.on({\n            'open.zf.trigger': this.open.bind(this),\n            'toggle.zf.trigger': this.toggle.bind(this)\n          });\n          if ($closer.length) {\n            $closer.show();\n          }\n        }\n      }\n\n      /**\n       * Opens the off-canvas menu.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       * @fires OffCanvas#opened\n       */\n\n    }, {\n      key: 'open',\n      value: function open(event, trigger) {\n        if (this.$element.hasClass('is-open') || this.isRevealed) {\n          return;\n        }\n        var _this = this,\n            $body = $(document.body);\n\n        if (this.options.forceTop) {\n          $('body').scrollTop(0);\n        }\n        // window.pageYOffset = 0;\n\n        // if (!this.options.forceTop) {\n        //   var scrollPos = parseInt(window.pageYOffset);\n        //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n        //   if (this.$exiter.length) {\n        //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';\n        //   }\n        // }\n        /**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#opened\n         */\n        Foundation.Move(this.options.transitionTime, this.$element, function () {\n          $('[data-off-canvas-wrapper]').addClass('is-off-canvas-open is-open-' + _this.options.position);\n\n          _this.$element.addClass('is-open');\n\n          // if (_this.options.isSticky) {\n          //   _this._stick();\n          // }\n        });\n\n        this.$triggers.attr('aria-expanded', 'true');\n        this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');\n\n        if (this.options.closeOnClick) {\n          this.$exiter.addClass('is-visible');\n        }\n\n        if (trigger) {\n          this.$lastTrigger = trigger;\n        }\n\n        if (this.options.autoFocus) {\n          this.$element.one(Foundation.transitionend(this.$element), function () {\n            _this.$element.find('a, button').eq(0).focus();\n          });\n        }\n\n        if (this.options.trapFocus) {\n          $('[data-off-canvas-content]').attr('tabindex', '-1');\n          this._trapFocus();\n        }\n      }\n\n      /**\n       * Traps focus within the offcanvas on open.\n       * @private\n       */\n\n    }, {\n      key: '_trapFocus',\n      value: function _trapFocus() {\n        var focusable = Foundation.Keyboard.findFocusable(this.$element),\n            first = focusable.eq(0),\n            last = focusable.eq(-1);\n\n        focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {\n          if (e.which === 9 || e.keycode === 9) {\n            if (e.target === last[0] && !e.shiftKey) {\n              e.preventDefault();\n              first.focus();\n            }\n            if (e.target === first[0] && e.shiftKey) {\n              e.preventDefault();\n              last.focus();\n            }\n          }\n        });\n      }\n\n      /**\n       * Allows the offcanvas to appear sticky utilizing translate properties.\n       * @private\n       */\n      // OffCanvas.prototype._stick = function() {\n      //   var elStyle = this.$element[0].style;\n      //\n      //   if (this.options.closeOnClick) {\n      //     var exitStyle = this.$exiter[0].style;\n      //   }\n      //\n      //   $(window).on('scroll.zf.offcanvas', function(e) {\n      //     console.log(e);\n      //     var pageY = window.pageYOffset;\n      //     elStyle.transform = 'translate(0,' + pageY + 'px)';\n      //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }\n      //   });\n      //   // this.$element.trigger('stuck.zf.offcanvas');\n      // };\n      /**\n       * Closes the off-canvas menu.\n       * @function\n       * @param {Function} cb - optional cb to fire after closure.\n       * @fires OffCanvas#closed\n       */\n\n    }, {\n      key: 'close',\n      value: function close(cb) {\n        if (!this.$element.hasClass('is-open') || this.isRevealed) {\n          return;\n        }\n\n        var _this = this;\n\n        //  Foundation.Move(this.options.transitionTime, this.$element, function() {\n        $('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-' + _this.options.position);\n        _this.$element.removeClass('is-open');\n        // Foundation._reflow();\n        // });\n        this.$element.attr('aria-hidden', 'true')\n        /**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#closed\n         */\n        .trigger('closed.zf.offcanvas');\n        // if (_this.options.isSticky || !_this.options.forceTop) {\n        //   setTimeout(function() {\n        //     _this.$element[0].style.transform = '';\n        //     $(window).off('scroll.zf.offcanvas');\n        //   }, this.options.transitionTime);\n        // }\n        if (this.options.closeOnClick) {\n          this.$exiter.removeClass('is-visible');\n        }\n\n        this.$triggers.attr('aria-expanded', 'false');\n        if (this.options.trapFocus) {\n          $('[data-off-canvas-content]').removeAttr('tabindex');\n        }\n      }\n\n      /**\n       * Toggles the off-canvas menu open or closed.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle(event, trigger) {\n        if (this.$element.hasClass('is-open')) {\n          this.close(event, trigger);\n        } else {\n          this.open(event, trigger);\n        }\n      }\n\n      /**\n       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_handleKeyboard',\n      value: function _handleKeyboard(event) {\n        if (event.which !== 27) return;\n\n        event.stopPropagation();\n        event.preventDefault();\n        this.close();\n        this.$lastTrigger.focus();\n      }\n\n      /**\n       * Destroys the offcanvas plugin.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.close();\n        this.$element.off('.zf.trigger .zf.offcanvas');\n        this.$exiter.off('.zf.offcanvas');\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return OffCanvas;\n  }();\n\n  OffCanvas.defaults = {\n    /**\n     * Allow the user to click outside of the menu to close it.\n     * @option\n     * @example true\n     */\n    closeOnClick: true,\n\n    /**\n     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n     * @option\n     * @example 500\n     */\n    transitionTime: 0,\n\n    /**\n     * Direction the offcanvas opens from. Determines class applied to body.\n     * @option\n     * @example left\n     */\n    position: 'left',\n\n    /**\n     * Force the page to scroll to top on open.\n     * @option\n     * @example true\n     */\n    forceTop: true,\n\n    /**\n     * Allow the offcanvas to remain open for certain breakpoints.\n     * @option\n     * @example false\n     */\n    isRevealed: false,\n\n    /**\n     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n     * @option\n     * @example reveal-for-large\n     */\n    revealOn: null,\n\n    /**\n     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n     * @option\n     * @example true\n     */\n    autoFocus: true,\n\n    /**\n     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n     * @option\n     * TODO improve the regex testing for this.\n     * @example reveal-for-large\n     */\n    revealClass: 'reveal-for-',\n\n    /**\n     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n     * @option\n     * @example true\n     */\n    trapFocus: false\n  };\n\n  // Window exports\n  Foundation.plugin(OffCanvas, 'OffCanvas');\n}(jQuery);"]},"hash":"412e284398c3a7181b6ae3797e47ebe7b71fec04"}
