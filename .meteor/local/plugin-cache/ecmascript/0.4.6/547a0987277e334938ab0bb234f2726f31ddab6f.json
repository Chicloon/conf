{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js","filenameRelative":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js.map","sourceFileName":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"jquery.mockjax"},"ignored":false,"code":"var _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/*!\n * MockJax - jQuery Plugin to Mock Ajax requests\n *\n * Version:  1.5.1\n * Released:\n * Home:   http://github.com/appendto/jquery-mockjax\n * Author:   Jonathan Sharp (http://jdsharp.com)\n * License:  MIT,GPL\n *\n * Copyright (c) 2011 appendTo LLC.\n * Dual licensed under the MIT or GPL licenses.\n * http://appendto.com/open-source-licenses\n */\n(function ($) {\n\tvar _ajax = $.ajax,\n\t    mockHandlers = [],\n\t    CALLBACK_REGEX = /=\\?(&|$)/,\n\t    jsc = new Date().getTime();\n\n\t// Parse the given XML string.\n\tfunction parseXML(xml) {\n\t\tif (window['DOMParser'] == undefined && window.ActiveXObject) {\n\t\t\tDOMParser = function DOMParser() {};\n\t\t\tDOMParser.prototype.parseFromString = function (xmlString) {\n\t\t\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\t\t\tdoc.async = 'false';\n\t\t\t\tdoc.loadXML(xmlString);\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tvar xmlDoc = new DOMParser().parseFromString(xml, 'text/xml');\n\t\t\tif ($.isXMLDoc(xmlDoc)) {\n\t\t\t\tvar err = $('parsererror', xmlDoc);\n\t\t\t\tif (err.length == 1) {\n\t\t\t\t\tthrow 'Error: ' + $(xmlDoc).text();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow 'Unable to parse XML';\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tvar msg = e.name == undefined ? e : e.name + ': ' + e.message;\n\t\t\t$(document).trigger('xmlParseError', [msg]);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn xmlDoc;\n\t}\n\n\t// Trigger a jQuery event\n\tfunction trigger(s, type, args) {\n\t\t(s.context ? $(s.context) : $.event).trigger(type, args);\n\t}\n\n\t// Check if the data field on the mock handler and the request match. This\n\t// can be used to restrict a mock handler to being used only when a certain\n\t// set of data is passed to it.\n\tfunction isMockDataEqual(mock, live) {\n\t\tvar identical = false;\n\t\t// Test for situations where the data is a querystring (not an object)\n\t\tif (typeof live === 'string') {\n\t\t\t// Querystring may be a regex\n\t\t\treturn $.isFunction(mock.test) ? mock.test(live) : mock == live;\n\t\t}\n\t\t$.each(mock, function (k, v) {\n\t\t\tif (live[k] === undefined) {\n\t\t\t\tidentical = false;\n\t\t\t\treturn identical;\n\t\t\t} else {\n\t\t\t\tidentical = true;\n\t\t\t\tif ((0, _typeof3['default'])(live[k]) == 'object') {\n\t\t\t\t\treturn isMockDataEqual(mock[k], live[k]);\n\t\t\t\t} else {\n\t\t\t\t\tif ($.isFunction(mock[k].test)) {\n\t\t\t\t\t\tidentical = mock[k].test(live[k]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tidentical = mock[k] == live[k];\n\t\t\t\t\t}\n\t\t\t\t\treturn identical;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn identical;\n\t}\n\n\t// Check the given handler should mock the given request\n\tfunction getMockForRequest(handler, requestSettings) {\n\t\t// If the mock was registered with a function, let the function decide if we\n\t\t// want to mock this request\n\t\tif ($.isFunction(handler)) {\n\t\t\treturn handler(requestSettings);\n\t\t}\n\n\t\t// Inspect the URL of the request and check if the mock handler's url\n\t\t// matches the url for this ajax request\n\t\tif ($.isFunction(handler.url.test)) {\n\t\t\t// The user provided a regex for the url, test it\n\t\t\tif (!handler.url.test(requestSettings.url)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\t// Look for a simple wildcard '*' or a direct URL match\n\t\t\tvar star = handler.url.indexOf('*');\n\t\t\tif (handler.url !== requestSettings.url && star === -1 || !new RegExp(handler.url.replace(/[-[\\]{}()+?.,\\\\^$|#\\s]/g, \"\\\\$&\").replace('*', '.+')).test(requestSettings.url)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Inspect the data submitted in the request (either POST body or GET query string)\n\t\tif (handler.data && requestSettings.data) {\n\t\t\tif (!isMockDataEqual(handler.data, requestSettings.data)) {\n\t\t\t\t// They're not identical, do not mock this request\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t// Inspect the request type\n\t\tif (handler && handler.type && handler.type.toLowerCase() != requestSettings.type.toLowerCase()) {\n\t\t\t// The request type doesn't match (GET vs. POST)\n\t\t\treturn null;\n\t\t}\n\n\t\treturn handler;\n\t}\n\n\t// If logging is enabled, log the mock to the console\n\tfunction logMock(mockHandler, requestSettings) {\n\t\tvar c = $.extend({}, $.mockjaxSettings, mockHandler);\n\t\tif (c.log && $.isFunction(c.log)) {\n\t\t\tc.log('MOCK ' + requestSettings.type.toUpperCase() + ': ' + requestSettings.url, $.extend({}, requestSettings));\n\t\t}\n\t}\n\n\t// Process the xhr objects send operation\n\tfunction _xhrSend(mockHandler, requestSettings, origSettings) {\n\n\t\t// This is a substitute for < 1.4 which lacks $.proxy\n\t\tvar process = function (that) {\n\t\t\treturn function () {\n\t\t\t\treturn function () {\n\t\t\t\t\t// The request has returned\n\t\t\t\t\tthis.status = mockHandler.status;\n\t\t\t\t\tthis.statusText = mockHandler.statusText;\n\t\t\t\t\tthis.readyState = 4;\n\n\t\t\t\t\t// We have an executable function, call it to give\n\t\t\t\t\t// the mock handler a chance to update it's data\n\t\t\t\t\tif ($.isFunction(mockHandler.response)) {\n\t\t\t\t\t\tmockHandler.response(origSettings);\n\t\t\t\t\t}\n\t\t\t\t\t// Copy over our mock to our xhr object before passing control back to\n\t\t\t\t\t// jQuery's onreadystatechange callback\n\t\t\t\t\tif (requestSettings.dataType == 'json' && (0, _typeof3['default'])(mockHandler.responseText) == 'object') {\n\t\t\t\t\t\tthis.responseText = JSON.stringify(mockHandler.responseText);\n\t\t\t\t\t} else if (requestSettings.dataType == 'xml') {\n\t\t\t\t\t\tif (typeof mockHandler.responseXML == 'string') {\n\t\t\t\t\t\t\tthis.responseXML = parseXML(mockHandler.responseXML);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.responseXML = mockHandler.responseXML;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.responseText = mockHandler.responseText;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof mockHandler.status == 'number' || typeof mockHandler.status == 'string') {\n\t\t\t\t\t\tthis.status = mockHandler.status;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof mockHandler.statusText === \"string\") {\n\t\t\t\t\t\tthis.statusText = mockHandler.statusText;\n\t\t\t\t\t}\n\t\t\t\t\t// jQuery < 1.4 doesn't have onreadystate change for xhr\n\t\t\t\t\tif ($.isFunction(this.onreadystatechange)) {\n\t\t\t\t\t\tif (mockHandler.isTimeout) {\n\t\t\t\t\t\t\tthis.status = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.onreadystatechange(mockHandler.isTimeout ? 'timeout' : undefined);\n\t\t\t\t\t} else if (mockHandler.isTimeout) {\n\t\t\t\t\t\t// Fix for 1.3.2 timeout to keep success from firing.\n\t\t\t\t\t\tthis.status = -1;\n\t\t\t\t\t}\n\t\t\t\t}.apply(that);\n\t\t\t};\n\t\t}(this);\n\n\t\tif (mockHandler.proxy) {\n\t\t\t// We're proxying this request and loading in an external file instead\n\t\t\t_ajax({\n\t\t\t\tglobal: false,\n\t\t\t\turl: mockHandler.proxy,\n\t\t\t\ttype: mockHandler.proxyType,\n\t\t\t\tdata: mockHandler.data,\n\t\t\t\tdataType: requestSettings.dataType === \"script\" ? \"text/plain\" : requestSettings.dataType,\n\t\t\t\tcomplete: function () {\n\t\t\t\t\tfunction complete(xhr, txt) {\n\t\t\t\t\t\tmockHandler.responseXML = xhr.responseXML;\n\t\t\t\t\t\tmockHandler.responseText = xhr.responseText;\n\t\t\t\t\t\tmockHandler.status = xhr.status;\n\t\t\t\t\t\tmockHandler.statusText = xhr.statusText;\n\t\t\t\t\t\tthis.responseTimer = setTimeout(process, mockHandler.responseTime || 0);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn complete;\n\t\t\t\t}()\n\t\t\t});\n\t\t} else {\n\t\t\t// type == 'POST' || 'GET' || 'DELETE'\n\t\t\tif (requestSettings.async === false) {\n\t\t\t\t// TODO: Blocking delay\n\t\t\t\tprocess();\n\t\t\t} else {\n\t\t\t\tthis.responseTimer = setTimeout(process, mockHandler.responseTime || 50);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Construct a mocked XHR Object\n\tfunction _xhr(mockHandler, requestSettings, origSettings, origHandler) {\n\t\t// Extend with our default mockjax settings\n\t\tmockHandler = $.extend(true, {}, $.mockjaxSettings, mockHandler);\n\n\t\tif (typeof mockHandler.headers === 'undefined') {\n\t\t\tmockHandler.headers = {};\n\t\t}\n\t\tif (mockHandler.contentType) {\n\t\t\tmockHandler.headers['content-type'] = mockHandler.contentType;\n\t\t}\n\n\t\treturn {\n\t\t\tstatus: mockHandler.status,\n\t\t\tstatusText: mockHandler.statusText,\n\t\t\treadyState: 1,\n\t\t\topen: function () {\n\t\t\t\tfunction open() {}\n\n\t\t\t\treturn open;\n\t\t\t}(),\n\t\t\tsend: function () {\n\t\t\t\tfunction send() {\n\t\t\t\t\torigHandler.fired = true;\n\t\t\t\t\t_xhrSend.call(this, mockHandler, requestSettings, origSettings);\n\t\t\t\t}\n\n\t\t\t\treturn send;\n\t\t\t}(),\n\t\t\tabort: function () {\n\t\t\t\tfunction abort() {\n\t\t\t\t\tclearTimeout(this.responseTimer);\n\t\t\t\t}\n\n\t\t\t\treturn abort;\n\t\t\t}(),\n\t\t\tsetRequestHeader: function () {\n\t\t\t\tfunction setRequestHeader(header, value) {\n\t\t\t\t\tmockHandler.headers[header] = value;\n\t\t\t\t}\n\n\t\t\t\treturn setRequestHeader;\n\t\t\t}(),\n\t\t\tgetResponseHeader: function () {\n\t\t\t\tfunction getResponseHeader(header) {\n\t\t\t\t\t// 'Last-modified', 'Etag', 'content-type' are all checked by jQuery\n\t\t\t\t\tif (mockHandler.headers && mockHandler.headers[header]) {\n\t\t\t\t\t\t// Return arbitrary headers\n\t\t\t\t\t\treturn mockHandler.headers[header];\n\t\t\t\t\t} else if (header.toLowerCase() == 'last-modified') {\n\t\t\t\t\t\treturn mockHandler.lastModified || new Date().toString();\n\t\t\t\t\t} else if (header.toLowerCase() == 'etag') {\n\t\t\t\t\t\treturn mockHandler.etag || '';\n\t\t\t\t\t} else if (header.toLowerCase() == 'content-type') {\n\t\t\t\t\t\treturn mockHandler.contentType || 'text/plain';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn getResponseHeader;\n\t\t\t}(),\n\t\t\tgetAllResponseHeaders: function () {\n\t\t\t\tfunction getAllResponseHeaders() {\n\t\t\t\t\tvar headers = '';\n\t\t\t\t\t$.each(mockHandler.headers, function (k, v) {\n\t\t\t\t\t\theaders += k + ': ' + v + \"\\n\";\n\t\t\t\t\t});\n\t\t\t\t\treturn headers;\n\t\t\t\t}\n\n\t\t\t\treturn getAllResponseHeaders;\n\t\t\t}()\n\t\t};\n\t}\n\n\t// Process a JSONP mock request.\n\tfunction processJsonpMock(requestSettings, mockHandler, origSettings) {\n\t\t// Handle JSONP Parameter Callbacks, we need to replicate some of the jQuery core here\n\t\t// because there isn't an easy hook for the cross domain script tag of jsonp\n\n\t\tprocessJsonpUrl(requestSettings);\n\n\t\trequestSettings.dataType = \"json\";\n\t\tif (requestSettings.data && CALLBACK_REGEX.test(requestSettings.data) || CALLBACK_REGEX.test(requestSettings.url)) {\n\t\t\tcreateJsonpCallback(requestSettings, mockHandler);\n\n\t\t\t// We need to make sure\n\t\t\t// that a JSONP style response is executed properly\n\n\t\t\tvar rurl = /^(\\w+:)?\\/\\/([^\\/?#]+)/,\n\t\t\t    parts = rurl.exec(requestSettings.url),\n\t\t\t    remote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);\n\n\t\t\trequestSettings.dataType = \"script\";\n\t\t\tif (requestSettings.type.toUpperCase() === \"GET\" && remote) {\n\t\t\t\tvar newMockReturn = processJsonpRequest(requestSettings, mockHandler, origSettings);\n\n\t\t\t\t// Check if we are supposed to return a Deferred back to the mock call, or just\n\t\t\t\t// signal success\n\t\t\t\tif (newMockReturn) {\n\t\t\t\t\treturn newMockReturn;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t// Append the required callback parameter to the end of the request URL, for a JSONP request\n\tfunction processJsonpUrl(requestSettings) {\n\t\tif (requestSettings.type.toUpperCase() === \"GET\") {\n\t\t\tif (!CALLBACK_REGEX.test(requestSettings.url)) {\n\t\t\t\trequestSettings.url += (/\\?/.test(requestSettings.url) ? \"&\" : \"?\") + (requestSettings.jsonp || \"callback\") + \"=?\";\n\t\t\t}\n\t\t} else if (!requestSettings.data || !CALLBACK_REGEX.test(requestSettings.data)) {\n\t\t\trequestSettings.data = (requestSettings.data ? requestSettings.data + \"&\" : \"\") + (requestSettings.jsonp || \"callback\") + \"=?\";\n\t\t}\n\t}\n\n\t// Process a JSONP request by evaluating the mocked response text\n\tfunction processJsonpRequest(requestSettings, mockHandler, origSettings) {\n\t\t// Synthesize the mock request for adding a script tag\n\t\tvar callbackContext = origSettings && origSettings.context || requestSettings,\n\t\t    newMock = null;\n\n\t\t// If the response handler on the moock is a function, call it\n\t\tif (mockHandler.response && $.isFunction(mockHandler.response)) {\n\t\t\tmockHandler.response(origSettings);\n\t\t} else {\n\n\t\t\t// Evaluate the responseText javascript in a global context\n\t\t\tif ((0, _typeof3['default'])(mockHandler.responseText) === 'object') {\n\t\t\t\t$.globalEval('(' + JSON.stringify(mockHandler.responseText) + ')');\n\t\t\t} else {\n\t\t\t\t$.globalEval('(' + mockHandler.responseText + ')');\n\t\t\t}\n\t\t}\n\n\t\t// Successful response\n\t\tjsonpSuccess(requestSettings, mockHandler);\n\t\tjsonpComplete(requestSettings, mockHandler);\n\n\t\t// If we are running under jQuery 1.5+, return a deferred object\n\t\tif ($.Deferred) {\n\t\t\tnewMock = new $.Deferred();\n\t\t\tif ((0, _typeof3['default'])(mockHandler.responseText) == \"object\") {\n\t\t\t\tnewMock.resolveWith(callbackContext, [mockHandler.responseText]);\n\t\t\t} else {\n\t\t\t\tnewMock.resolveWith(callbackContext, [$.parseJSON(mockHandler.responseText)]);\n\t\t\t}\n\t\t}\n\t\treturn newMock;\n\t}\n\n\t// Create the required JSONP callback function for the request\n\tfunction createJsonpCallback(requestSettings, mockHandler) {\n\t\tjsonp = requestSettings.jsonpCallback || \"jsonp\" + jsc++;\n\n\t\t// Replace the =? sequence both in the query string and the data\n\t\tif (requestSettings.data) {\n\t\t\trequestSettings.data = (requestSettings.data + \"\").replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n\t\t}\n\n\t\trequestSettings.url = requestSettings.url.replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n\n\t\t// Handle JSONP-style loading\n\t\twindow[jsonp] = window[jsonp] || function (tmp) {\n\t\t\tdata = tmp;\n\t\t\tjsonpSuccess(requestSettings, mockHandler);\n\t\t\tjsonpComplete(requestSettings, mockHandler);\n\t\t\t// Garbage collect\n\t\t\twindow[jsonp] = undefined;\n\n\t\t\ttry {\n\t\t\t\tdelete window[jsonp];\n\t\t\t} catch (e) {}\n\n\t\t\tif (head) {\n\t\t\t\thead.removeChild(script);\n\t\t\t}\n\t\t};\n\t}\n\n\t// The JSONP request was successful\n\tfunction jsonpSuccess(requestSettings, mockHandler) {\n\t\t// If a local callback was specified, fire it and pass it the data\n\t\tif (requestSettings.success) {\n\t\t\trequestSettings.success.call(callbackContext, mockHandler.response ? mockHandler.response.toString() : mockHandler.responseText || '', status, {});\n\t\t}\n\n\t\t// Fire the global callback\n\t\tif (requestSettings.global) {\n\t\t\ttrigger(requestSettings, \"ajaxSuccess\", [{}, requestSettings]);\n\t\t}\n\t}\n\n\t// The JSONP request was completed\n\tfunction jsonpComplete(requestSettings, mockHandler) {\n\t\t// Process result\n\t\tif (requestSettings.complete) {\n\t\t\trequestSettings.complete.call(callbackContext, {}, status);\n\t\t}\n\n\t\t// The request was completed\n\t\tif (requestSettings.global) {\n\t\t\ttrigger(\"ajaxComplete\", [{}, requestSettings]);\n\t\t}\n\n\t\t// Handle the global AJAX counter\n\t\tif (requestSettings.global && ! --$.active) {\n\t\t\t$.event.trigger(\"ajaxStop\");\n\t\t}\n\t}\n\n\t// The core $.ajax replacement. \n\tfunction handleAjax(url, origSettings) {\n\t\tvar mockRequest, requestSettings, mockHandler;\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ((typeof url === 'undefined' ? 'undefined' : (0, _typeof3['default'])(url)) === \"object\") {\n\t\t\torigSettings = url;\n\t\t\turl = undefined;\n\t\t} else {\n\t\t\t// work around to support 1.5 signature\n\t\t\torigSettings.url = url;\n\t\t}\n\n\t\t// Extend the original settings for the request\n\t\trequestSettings = $.extend(true, {}, $.ajaxSettings, origSettings);\n\n\t\t// Iterate over our mock handlers (in registration order) until we find\n\t\t// one that is willing to intercept the request\n\t\tfor (var k = 0; k < mockHandlers.length; k++) {\n\t\t\tif (!mockHandlers[k]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmockHandler = getMockForRequest(mockHandlers[k], requestSettings);\n\t\t\tif (!mockHandler) {\n\t\t\t\t// No valid mock found for this request\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Handle console logging\n\t\t\tlogMock(mockHandler, requestSettings);\n\n\t\t\tif (requestSettings.dataType === \"jsonp\") {\n\t\t\t\tif (mockRequest = processJsonpMock(requestSettings, mockHandler, origSettings)) {\n\t\t\t\t\t// This mock will handle the JSONP request\n\t\t\t\t\treturn mockRequest;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Removed to fix #54 - keep the mocking data object intact\n\t\t\t//mockHandler.data = requestSettings.data;\n\n\t\t\tmockHandler.cache = requestSettings.cache;\n\t\t\tmockHandler.timeout = requestSettings.timeout;\n\t\t\tmockHandler.global = requestSettings.global;\n\n\t\t\tcopyUrlParameters(mockHandler, origSettings);\n\n\t\t\t(function (mockHandler, requestSettings, origSettings, origHandler) {\n\t\t\t\tmockRequest = _ajax.call($, $.extend(true, {}, origSettings, {\n\t\t\t\t\t// Mock the XHR object\n\t\t\t\t\txhr: function () {\n\t\t\t\t\t\tfunction xhr() {\n\t\t\t\t\t\t\treturn _xhr(mockHandler, requestSettings, origSettings, origHandler);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn xhr;\n\t\t\t\t\t}()\n\t\t\t\t}));\n\t\t\t})(mockHandler, requestSettings, origSettings, mockHandlers[k]);\n\n\t\t\treturn mockRequest;\n\t\t}\n\n\t\t// We don't have a mock request, trigger a normal request\n\t\treturn _ajax.apply($, [origSettings]);\n\t}\n\n\t/**\n  * Copies URL parameter values if they were captured by a regular expression\n  * @param {Object} mockHandler\n  * @param {Object} origSettings\n  */\n\tfunction copyUrlParameters(mockHandler, origSettings) {\n\t\t//parameters aren't captured if the URL isn't a RegExp\n\t\tif (!mockHandler.url instanceof RegExp) {\n\t\t\treturn;\n\t\t}\n\t\t//if no URL params were defined on the handler, don't attempt a capture\n\t\tif (!mockHandler.hasOwnProperty('urlParams')) {\n\t\t\treturn;\n\t\t}\n\t\tvar captures = mockHandler.url.exec(origSettings.url);\n\t\t//the whole RegExp match is always the first value in the capture results\n\t\tif (captures.length === 1) {\n\t\t\treturn;\n\t\t}\n\t\tcaptures.shift();\n\t\t//use handler params as keys and capture resuts as values\n\t\tvar i = 0,\n\t\t    capturesLength = captures.length,\n\t\t    paramsLength = mockHandler.urlParams.length,\n\n\t\t//in case the number of params specified is less than actual captures\n\t\tmaxIterations = Math.min(capturesLength, paramsLength),\n\t\t    paramValues = {};\n\t\tfor (i; i < maxIterations; i++) {\n\t\t\tvar key = mockHandler.urlParams[i];\n\t\t\tparamValues[key] = captures[i];\n\t\t}\n\t\torigSettings.urlParams = paramValues;\n\t}\n\n\t// Public\n\n\t$.extend({\n\t\tajax: handleAjax\n\t});\n\n\t$.mockjaxSettings = {\n\t\t//url:        null,\n\t\t//type:       'GET',\n\t\tlog: function () {\n\t\t\tfunction log(msg) {\n\t\t\t\tif (window['console'] && window.console.log) {\n\t\t\t\t\tif (!Function.prototype.bind) {\n\t\t\t\t\t\tconsole.log(Array.prototype.slice.call(arguments).join(', '));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar log = Function.prototype.bind.call(console.log, console);\n\t\t\t\t\tlog.apply(console, arguments);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn log;\n\t\t}(),\n\t\tstatus: 200,\n\t\tstatusText: \"OK\",\n\t\tresponseTime: 500,\n\t\tisTimeout: false,\n\t\tcontentType: 'text/plain',\n\t\tresponse: '',\n\t\tresponseText: '',\n\t\tresponseXML: '',\n\t\tproxy: '',\n\t\tproxyType: 'GET',\n\n\t\tlastModified: null,\n\t\tetag: '',\n\t\theaders: {\n\t\t\tetag: 'IJF@H#@923uf8023hFO@I#H#',\n\t\t\t'content-type': 'text/plain'\n\t\t}\n\t};\n\n\t$.mockjax = function (settings) {\n\t\tvar i = mockHandlers.length;\n\t\tmockHandlers[i] = settings;\n\t\treturn i;\n\t};\n\t$.mockjaxClear = function (i) {\n\t\tif (arguments.length == 1) {\n\t\t\tmockHandlers[i] = null;\n\t\t} else {\n\t\t\tmockHandlers = [];\n\t\t}\n\t};\n\t$.mockjax.handler = function (i) {\n\t\tif (arguments.length == 1) {\n\t\t\treturn mockHandlers[i];\n\t\t}\n\t};\n})(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/scripts/jquery.mockjax.js.map","sourcesContent":["/*!\n * MockJax - jQuery Plugin to Mock Ajax requests\n *\n * Version:  1.5.1\n * Released:\n * Home:   http://github.com/appendto/jquery-mockjax\n * Author:   Jonathan Sharp (http://jdsharp.com)\n * License:  MIT,GPL\n *\n * Copyright (c) 2011 appendTo LLC.\n * Dual licensed under the MIT or GPL licenses.\n * http://appendto.com/open-source-licenses\n */\n(function($) {\n\tvar _ajax = $.ajax,\n\t\tmockHandlers = [],\n\t\tCALLBACK_REGEX = /=\\?(&|$)/, \n\t\tjsc = (new Date()).getTime();\n\n\t\n\t// Parse the given XML string. \n\tfunction parseXML(xml) {\n\t\tif ( window['DOMParser'] == undefined && window.ActiveXObject ) {\n\t\t\tDOMParser = function() { };\n\t\t\tDOMParser.prototype.parseFromString = function( xmlString ) {\n\t\t\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\t\t\tdoc.async = 'false';\n\t\t\t\tdoc.loadXML( xmlString );\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\n\t\ttry {\n\t\t\tvar xmlDoc \t= ( new DOMParser() ).parseFromString( xml, 'text/xml' );\n\t\t\tif ( $.isXMLDoc( xmlDoc ) ) {\n\t\t\t\tvar err = $('parsererror', xmlDoc);\n\t\t\t\tif ( err.length == 1 ) {\n\t\t\t\t\tthrow('Error: ' + $(xmlDoc).text() );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow('Unable to parse XML');\n\t\t\t}\n\t\t} catch( e ) {\n\t\t\tvar msg = ( e.name == undefined ? e : e.name + ': ' + e.message );\n\t\t\t$(document).trigger('xmlParseError', [ msg ]);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn xmlDoc;\n\t}\n\n\t// Trigger a jQuery event\n\tfunction trigger(s, type, args) {\n\t\t(s.context ? $(s.context) : $.event).trigger(type, args);\n\t}\n\n\t// Check if the data field on the mock handler and the request match. This \n\t// can be used to restrict a mock handler to being used only when a certain\n\t// set of data is passed to it.\n\tfunction isMockDataEqual( mock, live ) {\n\t\tvar identical = false;\n\t\t// Test for situations where the data is a querystring (not an object)\n\t\tif (typeof live === 'string') {\n\t\t\t// Querystring may be a regex\n\t\t\treturn $.isFunction( mock.test ) ? mock.test(live) : mock == live;\n\t\t}\n\t\t$.each(mock, function(k, v) {\n\t\t\tif ( live[k] === undefined ) {\n\t\t\t\tidentical = false;\n\t\t\t\treturn identical;\n\t\t\t} else {\n\t\t\t\tidentical = true;\n\t\t\t\tif ( typeof live[k] == 'object' ) {\n\t\t\t\t\treturn isMockDataEqual(mock[k], live[k]);\n\t\t\t\t} else {\n\t\t\t\t\tif ( $.isFunction( mock[k].test ) ) {\n\t\t\t\t\t\tidentical = mock[k].test(live[k]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tidentical = ( mock[k] == live[k] );\n\t\t\t\t\t}\n\t\t\t\t\treturn identical;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn identical;\n\t}\n\n\t// Check the given handler should mock the given request\n\tfunction getMockForRequest( handler, requestSettings ) {\n\t\t// If the mock was registered with a function, let the function decide if we\n\t\t// want to mock this request\n\t\tif ( $.isFunction(handler) ) {\n\t\t\treturn handler( requestSettings );\n\t\t}\n\n\t\t// Inspect the URL of the request and check if the mock handler's url\n\t\t// matches the url for this ajax request\n\t\tif ( $.isFunction(handler.url.test) ) {\n\t\t\t// The user provided a regex for the url, test it\n\t\t\tif ( !handler.url.test( requestSettings.url ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\t// Look for a simple wildcard '*' or a direct URL match\n\t\t\tvar star = handler.url.indexOf('*');\n\t\t\tif (handler.url !== requestSettings.url && star === -1 || \n\t\t\t\t\t!new RegExp(handler.url.replace(/[-[\\]{}()+?.,\\\\^$|#\\s]/g, \"\\\\$&\").replace('*', '.+')).test(requestSettings.url)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Inspect the data submitted in the request (either POST body or GET query string)\n\t\tif ( handler.data && requestSettings.data ) {\n\t\t\tif ( !isMockDataEqual(handler.data, requestSettings.data) ) {\n\t\t\t\t// They're not identical, do not mock this request\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t// Inspect the request type\n\t\tif ( handler && handler.type && \n\t\t\t\t handler.type.toLowerCase() != requestSettings.type.toLowerCase() ) {\n\t\t\t// The request type doesn't match (GET vs. POST)\n\t\t\treturn null;\n\t\t}\n\n\t\treturn handler;\n\t}\n\n\t// If logging is enabled, log the mock to the console\n\tfunction logMock( mockHandler, requestSettings ) {\n\t\tvar c = $.extend({}, $.mockjaxSettings, mockHandler);\n\t\tif ( c.log && $.isFunction(c.log) ) {\n\t\t\tc.log('MOCK ' + requestSettings.type.toUpperCase() + ': ' + requestSettings.url, $.extend({}, requestSettings));\n\t\t}\n\t}\n\n\t// Process the xhr objects send operation\n\tfunction _xhrSend(mockHandler, requestSettings, origSettings) {\n\n\t\t// This is a substitute for < 1.4 which lacks $.proxy\n\t\tvar process = (function(that) {\n\t\t\treturn function() {\n\t\t\t\treturn (function() {\n\t\t\t\t\t// The request has returned\n\t\t\t\t\tthis.status \t\t= mockHandler.status;\n\t\t\t\t\tthis.statusText\t\t= mockHandler.statusText;\n\t\t\t\t\tthis.readyState \t= 4;\n\n\t\t\t\t\t// We have an executable function, call it to give\n\t\t\t\t\t// the mock handler a chance to update it's data\n\t\t\t\t\tif ( $.isFunction(mockHandler.response) ) {\n\t\t\t\t\t\tmockHandler.response(origSettings);\n\t\t\t\t\t}\n\t\t\t\t\t// Copy over our mock to our xhr object before passing control back to\n\t\t\t\t\t// jQuery's onreadystatechange callback\n\t\t\t\t\tif ( requestSettings.dataType == 'json' && ( typeof mockHandler.responseText == 'object' ) ) {\n\t\t\t\t\t\tthis.responseText = JSON.stringify(mockHandler.responseText);\n\t\t\t\t\t} else if ( requestSettings.dataType == 'xml' ) {\n\t\t\t\t\t\tif ( typeof mockHandler.responseXML == 'string' ) {\n\t\t\t\t\t\t\tthis.responseXML = parseXML(mockHandler.responseXML);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.responseXML = mockHandler.responseXML;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.responseText = mockHandler.responseText;\n\t\t\t\t\t}\n\t\t\t\t\tif( typeof mockHandler.status == 'number' || typeof mockHandler.status == 'string' ) {\n\t\t\t\t\t\tthis.status = mockHandler.status;\n\t\t\t\t\t}\n\t\t\t\t\tif( typeof mockHandler.statusText === \"string\") {\n\t\t\t\t\t\tthis.statusText = mockHandler.statusText;\n\t\t\t\t\t}\n\t\t\t\t\t// jQuery < 1.4 doesn't have onreadystate change for xhr\n\t\t\t\t\tif ( $.isFunction(this.onreadystatechange) ) {\n\t\t\t\t\t\tif( mockHandler.isTimeout) {\n\t\t\t\t\t\t\tthis.status = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.onreadystatechange( mockHandler.isTimeout ? 'timeout' : undefined );\n\t\t\t\t\t} else if ( mockHandler.isTimeout ) {\n\t\t\t\t\t\t// Fix for 1.3.2 timeout to keep success from firing.\n\t\t\t\t\t\tthis.status = -1;\n\t\t\t\t\t}\n\t\t\t\t}).apply(that);\n\t\t\t};\n\t\t})(this);\n\n\t\tif ( mockHandler.proxy ) {\n\t\t\t// We're proxying this request and loading in an external file instead\n\t\t\t_ajax({\n\t\t\t\tglobal: false,\n\t\t\t\turl: mockHandler.proxy,\n\t\t\t\ttype: mockHandler.proxyType,\n\t\t\t\tdata: mockHandler.data,\n\t\t\t\tdataType: requestSettings.dataType === \"script\" ? \"text/plain\" : requestSettings.dataType,\n\t\t\t\tcomplete: function(xhr, txt) {\n\t\t\t\t\tmockHandler.responseXML = xhr.responseXML;\n\t\t\t\t\tmockHandler.responseText = xhr.responseText;\n\t\t\t\t\tmockHandler.status = xhr.status;\n\t\t\t\t\tmockHandler.statusText = xhr.statusText;\n\t\t\t\t\tthis.responseTimer = setTimeout(process, mockHandler.responseTime || 0);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\t// type == 'POST' || 'GET' || 'DELETE'\n\t\t\tif ( requestSettings.async === false ) {\n\t\t\t\t// TODO: Blocking delay\n\t\t\t\tprocess();\n\t\t\t} else {\n\t\t\t\tthis.responseTimer = setTimeout(process, mockHandler.responseTime || 50);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Construct a mocked XHR Object\n\tfunction xhr(mockHandler, requestSettings, origSettings, origHandler) {\n\t\t// Extend with our default mockjax settings\n\t\tmockHandler = $.extend(true, {}, $.mockjaxSettings, mockHandler);\n\n\t\tif (typeof mockHandler.headers === 'undefined') {\n\t\t\tmockHandler.headers = {};\n\t\t}\n\t\tif ( mockHandler.contentType ) {\n\t\t\tmockHandler.headers['content-type'] = mockHandler.contentType;\n\t\t}\n\n\t\treturn {\n\t\t\tstatus: mockHandler.status,\n\t\t\tstatusText: mockHandler.statusText,\n\t\t\treadyState: 1,\n\t\t\topen: function() { },\n\t\t\tsend: function() {\n\t\t\t\torigHandler.fired = true;\n\t\t\t\t_xhrSend.call(this, mockHandler, requestSettings, origSettings);\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tclearTimeout(this.responseTimer);\n\t\t\t},\n\t\t\tsetRequestHeader: function(header, value) {\n\t\t\t\tmockHandler.headers[header] = value;\n\t\t\t},\n\t\t\tgetResponseHeader: function(header) {\n\t\t\t\t// 'Last-modified', 'Etag', 'content-type' are all checked by jQuery\n\t\t\t\tif ( mockHandler.headers && mockHandler.headers[header] ) {\n\t\t\t\t\t// Return arbitrary headers\n\t\t\t\t\treturn mockHandler.headers[header];\n\t\t\t\t} else if ( header.toLowerCase() == 'last-modified' ) {\n\t\t\t\t\treturn mockHandler.lastModified || (new Date()).toString();\n\t\t\t\t} else if ( header.toLowerCase() == 'etag' ) {\n\t\t\t\t\treturn mockHandler.etag || '';\n\t\t\t\t} else if ( header.toLowerCase() == 'content-type' ) {\n\t\t\t\t\treturn mockHandler.contentType || 'text/plain';\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\tvar headers = '';\n\t\t\t\t$.each(mockHandler.headers, function(k, v) {\n\t\t\t\t\theaders += k + ': ' + v + \"\\n\";\n\t\t\t\t});\n\t\t\t\treturn headers;\n\t\t\t}\n\t\t};\n\t}\n\n\t// Process a JSONP mock request.\n\tfunction processJsonpMock( requestSettings, mockHandler, origSettings ) {\n\t\t// Handle JSONP Parameter Callbacks, we need to replicate some of the jQuery core here\n\t\t// because there isn't an easy hook for the cross domain script tag of jsonp\n\n\t\tprocessJsonpUrl( requestSettings );\n\n\t\trequestSettings.dataType = \"json\";\n\t\tif(requestSettings.data && CALLBACK_REGEX.test(requestSettings.data) || CALLBACK_REGEX.test(requestSettings.url)) {\n\t\t\tcreateJsonpCallback(requestSettings, mockHandler);\n\n\t\t\t// We need to make sure\n\t\t\t// that a JSONP style response is executed properly\n\n\t\t\tvar rurl = /^(\\w+:)?\\/\\/([^\\/?#]+)/,\n\t\t\t\tparts = rurl.exec( requestSettings.url ),\n\t\t\t\tremote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);\n\n\t\t\trequestSettings.dataType = \"script\";\n\t\t\tif(requestSettings.type.toUpperCase() === \"GET\" && remote ) {\n\t\t\t\tvar newMockReturn = processJsonpRequest( requestSettings, mockHandler, origSettings );\n\n\t\t\t\t// Check if we are supposed to return a Deferred back to the mock call, or just \n\t\t\t\t// signal success\n\t\t\t\tif(newMockReturn) {\n\t\t\t\t\treturn newMockReturn;\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t// Append the required callback parameter to the end of the request URL, for a JSONP request\n\tfunction processJsonpUrl( requestSettings ) {\n\t\tif ( requestSettings.type.toUpperCase() === \"GET\" ) {\n\t\t\tif ( !CALLBACK_REGEX.test( requestSettings.url ) ) {\n\t\t\t\trequestSettings.url += (/\\?/.test( requestSettings.url ) ? \"&\" : \"?\") + \n\t\t\t\t\t(requestSettings.jsonp || \"callback\") + \"=?\";\n\t\t\t}\n\t\t} else if ( !requestSettings.data || !CALLBACK_REGEX.test(requestSettings.data) ) {\n\t\t\trequestSettings.data = (requestSettings.data ? requestSettings.data + \"&\" : \"\") + (requestSettings.jsonp || \"callback\") + \"=?\";\n\t\t}\n\t}\n\t\n\t// Process a JSONP request by evaluating the mocked response text\n\tfunction processJsonpRequest( requestSettings, mockHandler, origSettings ) {\n\t\t// Synthesize the mock request for adding a script tag\n\t\tvar callbackContext = origSettings && origSettings.context || requestSettings,\n\t\t\tnewMock = null;\n\n\n\t\t// If the response handler on the moock is a function, call it\n\t\tif ( mockHandler.response && $.isFunction(mockHandler.response) ) {\n\t\t\tmockHandler.response(origSettings);\n\t\t} else {\n\n\t\t\t// Evaluate the responseText javascript in a global context\n\t\t\tif( typeof mockHandler.responseText === 'object' ) {\n\t\t\t\t$.globalEval( '(' + JSON.stringify( mockHandler.responseText ) + ')');\n\t\t\t} else {\n\t\t\t\t$.globalEval( '(' + mockHandler.responseText + ')');\n\t\t\t}\n\t\t}\n\n\t\t// Successful response\n\t\tjsonpSuccess( requestSettings, mockHandler );\n\t\tjsonpComplete( requestSettings, mockHandler );\n\n\t\t// If we are running under jQuery 1.5+, return a deferred object\n\t\tif($.Deferred){\n\t\t\tnewMock = new $.Deferred();\n\t\t\tif(typeof mockHandler.responseText == \"object\"){\n\t\t\t\tnewMock.resolveWith( callbackContext, [mockHandler.responseText] );\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnewMock.resolveWith( callbackContext, [$.parseJSON( mockHandler.responseText )] );\n\t\t\t}\n\t\t}\n\t\treturn newMock;\n\t}\n\n\n\t// Create the required JSONP callback function for the request\n\tfunction createJsonpCallback( requestSettings, mockHandler ) {\n\t\tjsonp = requestSettings.jsonpCallback || (\"jsonp\" + jsc++);\n\n\t\t// Replace the =? sequence both in the query string and the data\n\t\tif ( requestSettings.data ) {\n\t\t\trequestSettings.data = (requestSettings.data + \"\").replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n\t\t}\n\n\t\trequestSettings.url = requestSettings.url.replace(CALLBACK_REGEX, \"=\" + jsonp + \"$1\");\n\n\n\t\t// Handle JSONP-style loading\n\t\twindow[ jsonp ] = window[ jsonp ] || function( tmp ) {\n\t\t\tdata = tmp;\n\t\t\tjsonpSuccess( requestSettings, mockHandler );\n\t\t\tjsonpComplete( requestSettings, mockHandler );\n\t\t\t// Garbage collect\n\t\t\twindow[ jsonp ] = undefined;\n\n\t\t\ttry {\n\t\t\t\tdelete window[ jsonp ];\n\t\t\t} catch(e) {}\n\n\t\t\tif ( head ) {\n\t\t\t\thead.removeChild( script );\n\t\t\t}\n\t\t};\n\t}\n\n\t// The JSONP request was successful\n\tfunction jsonpSuccess(requestSettings, mockHandler) {\n\t\t// If a local callback was specified, fire it and pass it the data\n\t\tif ( requestSettings.success ) {\n\t\t\trequestSettings.success.call( callbackContext, ( mockHandler.response ? mockHandler.response.toString() : mockHandler.responseText || ''), status, {} );\n\t\t}\n\n\t\t// Fire the global callback\n\t\tif ( requestSettings.global ) {\n\t\t\ttrigger(requestSettings, \"ajaxSuccess\", [{}, requestSettings] );\n\t\t}\n\t}\n\n\t// The JSONP request was completed\n\tfunction jsonpComplete(requestSettings, mockHandler) {\n\t\t// Process result\n\t\tif ( requestSettings.complete ) {\n\t\t\trequestSettings.complete.call( callbackContext, {} , status );\n\t\t}\n\n\t\t// The request was completed\n\t\tif ( requestSettings.global ) {\n\t\t\ttrigger( \"ajaxComplete\", [{}, requestSettings] );\n\t\t}\n\n\t\t// Handle the global AJAX counter\n\t\tif ( requestSettings.global && ! --$.active ) {\n\t\t\t$.event.trigger( \"ajaxStop\" );\n\t\t}\n\t}\n\n\n\t// The core $.ajax replacement.  \n\tfunction handleAjax( url, origSettings ) {\n\t\tvar mockRequest, requestSettings, mockHandler;\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\torigSettings = url;\n\t\t\turl = undefined;\n\t\t} else {\n\t\t\t// work around to support 1.5 signature\n\t\t\torigSettings.url = url;\n\t\t}\n\t\t\n\t\t// Extend the original settings for the request\n\t\trequestSettings = $.extend(true, {}, $.ajaxSettings, origSettings);\n\n\t\t// Iterate over our mock handlers (in registration order) until we find\n\t\t// one that is willing to intercept the request\n\t\tfor(var k = 0; k < mockHandlers.length; k++) {\n\t\t\tif ( !mockHandlers[k] ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tmockHandler = getMockForRequest( mockHandlers[k], requestSettings );\n\t\t\tif(!mockHandler) {\n\t\t\t\t// No valid mock found for this request\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Handle console logging\n\t\t\tlogMock( mockHandler, requestSettings );\n\n\n\t\t\tif ( requestSettings.dataType === \"jsonp\" ) {\n\t\t\t\tif ((mockRequest = processJsonpMock( requestSettings, mockHandler, origSettings ))) {\n\t\t\t\t\t// This mock will handle the JSONP request\n\t\t\t\t\treturn mockRequest;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// Removed to fix #54 - keep the mocking data object intact\n\t\t\t//mockHandler.data = requestSettings.data;\n\n\t\t\tmockHandler.cache = requestSettings.cache;\n\t\t\tmockHandler.timeout = requestSettings.timeout;\n\t\t\tmockHandler.global = requestSettings.global;\n\n      copyUrlParameters(mockHandler, origSettings);\n\n\t\t\t(function(mockHandler, requestSettings, origSettings, origHandler) {\n\t\t\t\tmockRequest = _ajax.call($, $.extend(true, {}, origSettings, {\n\t\t\t\t\t// Mock the XHR object\n\t\t\t\t\txhr: function() { return xhr( mockHandler, requestSettings, origSettings, origHandler ) }\n\t\t\t\t}));\n\t\t\t})(mockHandler, requestSettings, origSettings, mockHandlers[k]);\n\n\t\t\treturn mockRequest;\n\t\t}\n\n\t\t// We don't have a mock request, trigger a normal request\n\t\treturn _ajax.apply($, [origSettings]);\n\t}\n\n  /**\n   * Copies URL parameter values if they were captured by a regular expression\n   * @param {Object} mockHandler\n   * @param {Object} origSettings\n   */\n  function copyUrlParameters(mockHandler, origSettings) {\n    //parameters aren't captured if the URL isn't a RegExp\n    if (!mockHandler.url instanceof RegExp) {\n      return;\n    }\n    //if no URL params were defined on the handler, don't attempt a capture\n    if (!mockHandler.hasOwnProperty('urlParams')) {\n      return;\n    }\n    var captures = mockHandler.url.exec(origSettings.url);\n    //the whole RegExp match is always the first value in the capture results\n    if (captures.length === 1) {\n      return;\n    }\n    captures.shift();\n    //use handler params as keys and capture resuts as values\n    var i = 0,\n      capturesLength = captures.length,\n      paramsLength = mockHandler.urlParams.length,\n    //in case the number of params specified is less than actual captures\n      maxIterations = Math.min(capturesLength, paramsLength),\n      paramValues = {};\n    for (i; i < maxIterations; i++) {\n      var key = mockHandler.urlParams[i];\n      paramValues[key] = captures[i];\n    }\n    origSettings.urlParams = paramValues;\n  }\n\n\n\t// Public\n\n\t$.extend({\n\t\tajax: handleAjax\n\t});\n\n\t$.mockjaxSettings = {\n\t\t//url:        null,\n\t\t//type:       'GET',\n\t\tlog:          function( msg ) {\n\t\t\tif (window['console'] && window.console.log) {\n\t\t\t\tif (!Function.prototype.bind) {\n\t\t\t\t\tconsole.log(Array.prototype.slice.call(arguments).join(', '));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar log = Function.prototype.bind.call(console.log, console);\n\t\t\t\tlog.apply(console, arguments);\n\t\t\t}\n\t\t},\n\t\tstatus:       200,\n\t\tstatusText:   \"OK\",\n\t\tresponseTime: 500,\n\t\tisTimeout:    false,\n\t\tcontentType:  'text/plain',\n\t\tresponse:     '',\n\t\tresponseText: '',\n\t\tresponseXML:  '',\n\t\tproxy:        '',\n\t\tproxyType:    'GET',\n\n\t\tlastModified: null,\n\t\tetag:         '',\n\t\theaders: {\n\t\t\tetag: 'IJF@H#@923uf8023hFO@I#H#',\n\t\t\t'content-type' : 'text/plain'\n\t\t}\n\t};\n\n\t$.mockjax = function(settings) {\n\t\tvar i = mockHandlers.length;\n\t\tmockHandlers[i] = settings;\n\t\treturn i;\n\t};\n\t$.mockjaxClear = function(i) {\n\t\tif ( arguments.length == 1 ) {\n\t\t\tmockHandlers[i] = null;\n\t\t} else {\n\t\t\tmockHandlers = [];\n\t\t}\n\t};\n\t$.mockjax.handler = function(i) {\n\t  if ( arguments.length == 1 ) {\n\t\t\treturn mockHandlers[i];\n\t\t}\n\t};\n})(jQuery);"]},"hash":"547a0987277e334938ab0bb234f2726f31ddab6f"}
