{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/dist/plugins/foundation.abide.js","filenameRelative":"/packages/zurb:foundation-sites/dist/plugins/foundation.abide.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/dist/plugins/foundation.abide.js.map","sourceFileName":"/packages/zurb:foundation-sites/dist/plugins/foundation.abide.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.abide"},"ignored":false,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n!function ($) {\n\n  /**\n   * Abide module.\n   * @module foundation.abide\n   */\n\n  var Abide = function () {\n    /**\n     * Creates a new instance of Abide.\n     * @class\n     * @fires Abide#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Abide(element) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      _classCallCheck(this, Abide);\n\n      this.$element = element;\n      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Abide');\n    }\n\n    /**\n     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n     * @private\n     */\n\n    _createClass(Abide, [{\n      key: '_init',\n      value: function () {\n        function _init() {\n          this.$inputs = this.$element.find('input, textarea, select');\n\n          this._events();\n        }\n\n        return _init;\n      }()\n\n      /**\n       * Initializes events for Abide.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function () {\n        function _events() {\n          var _this2 = this;\n\n          this.$element.off('.abide').on('reset.zf.abide', function () {\n            _this2.resetForm();\n          }).on('submit.zf.abide', function () {\n            return _this2.validateForm();\n          });\n\n          if (this.options.validateOn === 'fieldChange') {\n            this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {\n              _this2.validateInput($(e.target));\n            });\n          }\n\n          if (this.options.liveValidate) {\n            this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {\n              _this2.validateInput($(e.target));\n            });\n          }\n        }\n\n        return _events;\n      }()\n\n      /**\n       * Calls necessary functions to update Abide upon DOM change\n       * @private\n       */\n\n    }, {\n      key: '_reflow',\n      value: function () {\n        function _reflow() {\n          this._init();\n        }\n\n        return _reflow;\n      }()\n\n      /**\n       * Checks whether or not a form element has the required attribute and if it's checked or not\n       * @param {Object} element - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'requiredCheck',\n      value: function () {\n        function requiredCheck($el) {\n          if (!$el.attr('required')) return true;\n\n          var isGood = true;\n\n          switch ($el[0].type) {\n            case 'checkbox':\n              isGood = $el[0].checked;\n              break;\n\n            case 'select':\n            case 'select-one':\n            case 'select-multiple':\n              var opt = $el.find('option:selected');\n              if (!opt.length || !opt.val()) isGood = false;\n              break;\n\n            default:\n              if (!$el.val() || !$el.val().length) isGood = false;\n          }\n\n          return isGood;\n        }\n\n        return requiredCheck;\n      }()\n\n      /**\n       * Based on $el, get the first element with selector in this order:\n       * 1. The element's direct sibling('s).\n       * 3. The element's parent's children.\n       *\n       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n       *\n       * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n       * @returns {Object} jQuery object with the selector.\n       */\n\n    }, {\n      key: 'findFormError',\n      value: function () {\n        function findFormError($el) {\n          var $error = $el.siblings(this.options.formErrorSelector);\n\n          if (!$error.length) {\n            $error = $el.parent().find(this.options.formErrorSelector);\n          }\n\n          return $error;\n        }\n\n        return findFormError;\n      }()\n\n      /**\n       * Get the first element in this order:\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'findLabel',\n      value: function () {\n        function findLabel($el) {\n          var id = $el[0].id;\n          var $label = this.$element.find('label[for=\"' + id + '\"]');\n\n          if (!$label.length) {\n            return $el.closest('label');\n          }\n\n          return $label;\n        }\n\n        return findLabel;\n      }()\n\n      /**\n       * Get the set of labels associated with a set of radio els in this order\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'findRadioLabels',\n      value: function () {\n        function findRadioLabels($els) {\n          var _this3 = this;\n\n          var labels = $els.map(function (i, el) {\n            var id = el.id;\n            var $label = _this3.$element.find('label[for=\"' + id + '\"]');\n\n            if (!$label.length) {\n              $label = $(el).closest('label');\n            }\n            return $label[0];\n          });\n\n          return $(labels);\n        }\n\n        return findRadioLabels;\n      }()\n\n      /**\n       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n       * @param {Object} $el - jQuery object to add the class to\n       */\n\n    }, {\n      key: 'addErrorClasses',\n      value: function () {\n        function addErrorClasses($el) {\n          var $label = this.findLabel($el);\n          var $formError = this.findFormError($el);\n\n          if ($label.length) {\n            $label.addClass(this.options.labelErrorClass);\n          }\n\n          if ($formError.length) {\n            $formError.addClass(this.options.formErrorClass);\n          }\n\n          $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n        }\n\n        return addErrorClasses;\n      }()\n\n      /**\n       * Remove CSS error classes etc from an entire radio button group\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       *\n       */\n\n    }, {\n      key: 'removeRadioErrorClasses',\n      value: function () {\n        function removeRadioErrorClasses(groupName) {\n          var $els = this.$element.find(':radio[name=\"' + groupName + '\"]');\n          var $labels = this.findRadioLabels($els);\n          var $formErrors = this.findFormError($els);\n\n          if ($labels.length) {\n            $labels.removeClass(this.options.labelErrorClass);\n          }\n\n          if ($formErrors.length) {\n            $formErrors.removeClass(this.options.formErrorClass);\n          }\n\n          $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n        }\n\n        return removeRadioErrorClasses;\n      }()\n\n      /**\n       * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n       * @param {Object} $el - jQuery object to remove the class from\n       */\n\n    }, {\n      key: 'removeErrorClasses',\n      value: function () {\n        function removeErrorClasses($el) {\n          // radios need to clear all of the els\n          if ($el[0].type == 'radio') {\n            return this.removeRadioErrorClasses($el.attr('name'));\n          }\n\n          var $label = this.findLabel($el);\n          var $formError = this.findFormError($el);\n\n          if ($label.length) {\n            $label.removeClass(this.options.labelErrorClass);\n          }\n\n          if ($formError.length) {\n            $formError.removeClass(this.options.formErrorClass);\n          }\n\n          $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n        }\n\n        return removeErrorClasses;\n      }()\n\n      /**\n       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\n       * @fires Abide#invalid\n       * @fires Abide#valid\n       * @param {Object} element - jQuery object to validate, should be an HTML input\n       * @returns {Boolean} goodToGo - If the input is valid or not.\n       */\n\n    }, {\n      key: 'validateInput',\n      value: function () {\n        function validateInput($el) {\n          var clearRequire = this.requiredCheck($el),\n              validated = false,\n              customValidator = true,\n              validator = $el.attr('data-validator'),\n              equalTo = true;\n\n          // don't validate ignored inputs or hidden inputs\n          if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]')) {\n            return true;\n          }\n\n          switch ($el[0].type) {\n            case 'radio':\n              validated = this.validateRadio($el.attr('name'));\n              break;\n\n            case 'checkbox':\n              validated = clearRequire;\n              break;\n\n            case 'select':\n            case 'select-one':\n            case 'select-multiple':\n              validated = clearRequire;\n              break;\n\n            default:\n              validated = this.validateText($el);\n          }\n\n          if (validator) {\n            customValidator = this.matchValidation($el, validator, $el.attr('required'));\n          }\n\n          if ($el.attr('data-equalto')) {\n            equalTo = this.options.validators.equalTo($el);\n          }\n\n          var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n          var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\n          this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\n\n          /**\n           * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n           * Trigger includes the DOM element of the input.\n           * @event Abide#valid\n           * @event Abide#invalid\n           */\n          $el.trigger(message, [$el]);\n\n          return goodToGo;\n        }\n\n        return validateInput;\n      }()\n\n      /**\n       * Goes through a form and if there are any invalid inputs, it will display the form error element\n       * @returns {Boolean} noError - true if no errors were detected...\n       * @fires Abide#formvalid\n       * @fires Abide#forminvalid\n       */\n\n    }, {\n      key: 'validateForm',\n      value: function () {\n        function validateForm() {\n          var acc = [];\n          var _this = this;\n\n          this.$inputs.each(function () {\n            acc.push(_this.validateInput($(this)));\n          });\n\n          var noError = acc.indexOf(false) === -1;\n\n          this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');\n\n          /**\n           * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n           * Trigger includes the element of the form.\n           * @event Abide#formvalid\n           * @event Abide#forminvalid\n           */\n          this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n\n          return noError;\n        }\n\n        return validateForm;\n      }()\n\n      /**\n       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n       * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n       */\n\n    }, {\n      key: 'validateText',\n      value: function () {\n        function validateText($el, pattern) {\n          // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n          pattern = pattern || $el.attr('pattern') || $el.attr('type');\n          var inputText = $el.val();\n          var valid = false;\n\n          if (inputText.length) {\n            // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n            if (this.options.patterns.hasOwnProperty(pattern)) {\n              valid = this.options.patterns[pattern].test(inputText);\n            }\n            // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n            else if (pattern !== $el.attr('type')) {\n                valid = new RegExp(pattern).test(inputText);\n              } else {\n                valid = true;\n              }\n          }\n          // An empty field is valid if it's not required\n          else if (!$el.prop('required')) {\n              valid = true;\n            }\n\n          return valid;\n        }\n\n        return validateText;\n      }()\n\n      /**\n       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n       */\n\n    }, {\n      key: 'validateRadio',\n      value: function () {\n        function validateRadio(groupName) {\n          // If at least one radio in the group has the `required` attribute, the group is considered required\n          // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n          var $group = this.$element.find(':radio[name=\"' + groupName + '\"]');\n          var valid = false,\n              required = false;\n\n          // For the group to be required, at least one radio needs to be required\n          $group.each(function (i, e) {\n            if ($(e).attr('required')) {\n              required = true;\n            }\n          });\n          if (!required) valid = true;\n\n          if (!valid) {\n            // For the group to be valid, at least one radio needs to be checked\n            $group.each(function (i, e) {\n              if ($(e).prop('checked')) {\n                valid = true;\n              }\n            });\n          };\n\n          return valid;\n        }\n\n        return validateRadio;\n      }()\n\n      /**\n       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n       * @param {Object} $el - jQuery input element.\n       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n       * @param {Boolean} required - self explanatory?\n       * @returns {Boolean} - true if validations passed.\n       */\n\n    }, {\n      key: 'matchValidation',\n      value: function () {\n        function matchValidation($el, validators, required) {\n          var _this4 = this;\n\n          required = required ? true : false;\n\n          var clear = validators.split(' ').map(function (v) {\n            return _this4.options.validators[v]($el, required, $el.parent());\n          });\n          return clear.indexOf(false) === -1;\n        }\n\n        return matchValidation;\n      }()\n\n      /**\n       * Resets form inputs and styles\n       * @fires Abide#formreset\n       */\n\n    }, {\n      key: 'resetForm',\n      value: function () {\n        function resetForm() {\n          var $form = this.$element,\n              opts = this.options;\n\n          $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);\n          $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);\n          $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);\n          $form.find('[data-abide-error]').css('display', 'none');\n          $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n          $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n          $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n          /**\n           * Fires when the form has been reset.\n           * @event Abide#formreset\n           */\n          $form.trigger('formreset.zf.abide', [$form]);\n        }\n\n        return resetForm;\n      }()\n\n      /**\n       * Destroys an instance of Abide.\n       * Removes error styles and classes from elements, without resetting their values.\n       */\n\n    }, {\n      key: 'destroy',\n      value: function () {\n        function destroy() {\n          var _this = this;\n          this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');\n\n          this.$inputs.off('.abide').each(function () {\n            _this.removeErrorClasses($(this));\n          });\n\n          Foundation.unregisterPlugin(this);\n        }\n\n        return destroy;\n      }()\n    }]);\n\n    return Abide;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n  Abide.defaults = {\n    /**\n     * The default event to validate inputs. Checkboxes and radios validate immediately.\n     * Remove or change this value for manual validation.\n     * @option\n     * @example 'fieldChange'\n     */\n    validateOn: 'fieldChange',\n\n    /**\n     * Class to be applied to input labels on failed validation.\n     * @option\n     * @example 'is-invalid-label'\n     */\n    labelErrorClass: 'is-invalid-label',\n\n    /**\n     * Class to be applied to inputs on failed validation.\n     * @option\n     * @example 'is-invalid-input'\n     */\n    inputErrorClass: 'is-invalid-input',\n\n    /**\n     * Class selector to use to target Form Errors for show/hide.\n     * @option\n     * @example '.form-error'\n     */\n    formErrorSelector: '.form-error',\n\n    /**\n     * Class added to Form Errors on failed validation.\n     * @option\n     * @example 'is-visible'\n     */\n    formErrorClass: 'is-visible',\n\n    /**\n     * Set to true to validate text inputs on any value change.\n     * @option\n     * @example false\n     */\n    liveValidate: false,\n\n    patterns: {\n      alpha: /^[a-zA-Z]+$/,\n      alpha_numeric: /^[a-zA-Z0-9]+$/,\n      integer: /^[-+]?\\d+$/,\n      number: /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n\n      // amex, visa, diners\n      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n      cvv: /^([0-9]){3,4}$/,\n\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n      email: /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n\n      url: /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n      // abc.de\n      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n\n      datetime: /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n      // YYYY-MM-DD\n      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n      // HH:MM:SS\n      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n      dateISO: /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n      // MM/DD/YYYY\n      month_day_year: /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n      // DD/MM/YYYY\n      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n\n      // #FFF or #FFFFFF\n      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/\n    },\n\n    /**\n     * Optional validation functions to be used. `equalTo` being the only default included function.\n     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n     * el : The jQuery element to validate.\n     * required : Boolean value of the required attribute be present or not.\n     * parent : The direct parent of the input.\n     * @option\n     */\n    validators: {\n      equalTo: function () {\n        function equalTo(el, required, parent) {\n          return $('#' + el.attr('data-equalto')).val() === el.val();\n        }\n\n        return equalTo;\n      }()\n    }\n  };\n\n  // Window exports\n  Foundation.plugin(Abide, 'Abide');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/dist/plugins/foundation.abide.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/dist/plugins/foundation.abide.js.map","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Abide module.\n   * @module foundation.abide\n   */\n\n  var Abide = function () {\n    /**\n     * Creates a new instance of Abide.\n     * @class\n     * @fires Abide#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Abide(element) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      _classCallCheck(this, Abide);\n\n      this.$element = element;\n      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Abide');\n    }\n\n    /**\n     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n     * @private\n     */\n\n\n    _createClass(Abide, [{\n      key: '_init',\n      value: function _init() {\n        this.$inputs = this.$element.find('input, textarea, select');\n\n        this._events();\n      }\n\n      /**\n       * Initializes events for Abide.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this2 = this;\n\n        this.$element.off('.abide').on('reset.zf.abide', function () {\n          _this2.resetForm();\n        }).on('submit.zf.abide', function () {\n          return _this2.validateForm();\n        });\n\n        if (this.options.validateOn === 'fieldChange') {\n          this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {\n            _this2.validateInput($(e.target));\n          });\n        }\n\n        if (this.options.liveValidate) {\n          this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {\n            _this2.validateInput($(e.target));\n          });\n        }\n      }\n\n      /**\n       * Calls necessary functions to update Abide upon DOM change\n       * @private\n       */\n\n    }, {\n      key: '_reflow',\n      value: function _reflow() {\n        this._init();\n      }\n\n      /**\n       * Checks whether or not a form element has the required attribute and if it's checked or not\n       * @param {Object} element - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'requiredCheck',\n      value: function requiredCheck($el) {\n        if (!$el.attr('required')) return true;\n\n        var isGood = true;\n\n        switch ($el[0].type) {\n          case 'checkbox':\n            isGood = $el[0].checked;\n            break;\n\n          case 'select':\n          case 'select-one':\n          case 'select-multiple':\n            var opt = $el.find('option:selected');\n            if (!opt.length || !opt.val()) isGood = false;\n            break;\n\n          default:\n            if (!$el.val() || !$el.val().length) isGood = false;\n        }\n\n        return isGood;\n      }\n\n      /**\n       * Based on $el, get the first element with selector in this order:\n       * 1. The element's direct sibling('s).\n       * 3. The element's parent's children.\n       *\n       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n       *\n       * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n       * @returns {Object} jQuery object with the selector.\n       */\n\n    }, {\n      key: 'findFormError',\n      value: function findFormError($el) {\n        var $error = $el.siblings(this.options.formErrorSelector);\n\n        if (!$error.length) {\n          $error = $el.parent().find(this.options.formErrorSelector);\n        }\n\n        return $error;\n      }\n\n      /**\n       * Get the first element in this order:\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'findLabel',\n      value: function findLabel($el) {\n        var id = $el[0].id;\n        var $label = this.$element.find('label[for=\"' + id + '\"]');\n\n        if (!$label.length) {\n          return $el.closest('label');\n        }\n\n        return $label;\n      }\n\n      /**\n       * Get the set of labels associated with a set of radio els in this order\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'findRadioLabels',\n      value: function findRadioLabels($els) {\n        var _this3 = this;\n\n        var labels = $els.map(function (i, el) {\n          var id = el.id;\n          var $label = _this3.$element.find('label[for=\"' + id + '\"]');\n\n          if (!$label.length) {\n            $label = $(el).closest('label');\n          }\n          return $label[0];\n        });\n\n        return $(labels);\n      }\n\n      /**\n       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n       * @param {Object} $el - jQuery object to add the class to\n       */\n\n    }, {\n      key: 'addErrorClasses',\n      value: function addErrorClasses($el) {\n        var $label = this.findLabel($el);\n        var $formError = this.findFormError($el);\n\n        if ($label.length) {\n          $label.addClass(this.options.labelErrorClass);\n        }\n\n        if ($formError.length) {\n          $formError.addClass(this.options.formErrorClass);\n        }\n\n        $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n      }\n\n      /**\n       * Remove CSS error classes etc from an entire radio button group\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       *\n       */\n\n    }, {\n      key: 'removeRadioErrorClasses',\n      value: function removeRadioErrorClasses(groupName) {\n        var $els = this.$element.find(':radio[name=\"' + groupName + '\"]');\n        var $labels = this.findRadioLabels($els);\n        var $formErrors = this.findFormError($els);\n\n        if ($labels.length) {\n          $labels.removeClass(this.options.labelErrorClass);\n        }\n\n        if ($formErrors.length) {\n          $formErrors.removeClass(this.options.formErrorClass);\n        }\n\n        $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n      }\n\n      /**\n       * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n       * @param {Object} $el - jQuery object to remove the class from\n       */\n\n    }, {\n      key: 'removeErrorClasses',\n      value: function removeErrorClasses($el) {\n        // radios need to clear all of the els\n        if ($el[0].type == 'radio') {\n          return this.removeRadioErrorClasses($el.attr('name'));\n        }\n\n        var $label = this.findLabel($el);\n        var $formError = this.findFormError($el);\n\n        if ($label.length) {\n          $label.removeClass(this.options.labelErrorClass);\n        }\n\n        if ($formError.length) {\n          $formError.removeClass(this.options.formErrorClass);\n        }\n\n        $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n      }\n\n      /**\n       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\n       * @fires Abide#invalid\n       * @fires Abide#valid\n       * @param {Object} element - jQuery object to validate, should be an HTML input\n       * @returns {Boolean} goodToGo - If the input is valid or not.\n       */\n\n    }, {\n      key: 'validateInput',\n      value: function validateInput($el) {\n        var clearRequire = this.requiredCheck($el),\n            validated = false,\n            customValidator = true,\n            validator = $el.attr('data-validator'),\n            equalTo = true;\n\n        // don't validate ignored inputs or hidden inputs\n        if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]')) {\n          return true;\n        }\n\n        switch ($el[0].type) {\n          case 'radio':\n            validated = this.validateRadio($el.attr('name'));\n            break;\n\n          case 'checkbox':\n            validated = clearRequire;\n            break;\n\n          case 'select':\n          case 'select-one':\n          case 'select-multiple':\n            validated = clearRequire;\n            break;\n\n          default:\n            validated = this.validateText($el);\n        }\n\n        if (validator) {\n          customValidator = this.matchValidation($el, validator, $el.attr('required'));\n        }\n\n        if ($el.attr('data-equalto')) {\n          equalTo = this.options.validators.equalTo($el);\n        }\n\n        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\n        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\n\n        /**\n         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n         * Trigger includes the DOM element of the input.\n         * @event Abide#valid\n         * @event Abide#invalid\n         */\n        $el.trigger(message, [$el]);\n\n        return goodToGo;\n      }\n\n      /**\n       * Goes through a form and if there are any invalid inputs, it will display the form error element\n       * @returns {Boolean} noError - true if no errors were detected...\n       * @fires Abide#formvalid\n       * @fires Abide#forminvalid\n       */\n\n    }, {\n      key: 'validateForm',\n      value: function validateForm() {\n        var acc = [];\n        var _this = this;\n\n        this.$inputs.each(function () {\n          acc.push(_this.validateInput($(this)));\n        });\n\n        var noError = acc.indexOf(false) === -1;\n\n        this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');\n\n        /**\n         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n         * Trigger includes the element of the form.\n         * @event Abide#formvalid\n         * @event Abide#forminvalid\n         */\n        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n\n        return noError;\n      }\n\n      /**\n       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n       * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n       */\n\n    }, {\n      key: 'validateText',\n      value: function validateText($el, pattern) {\n        // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n        pattern = pattern || $el.attr('pattern') || $el.attr('type');\n        var inputText = $el.val();\n        var valid = false;\n\n        if (inputText.length) {\n          // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n          if (this.options.patterns.hasOwnProperty(pattern)) {\n            valid = this.options.patterns[pattern].test(inputText);\n          }\n          // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n          else if (pattern !== $el.attr('type')) {\n              valid = new RegExp(pattern).test(inputText);\n            } else {\n              valid = true;\n            }\n        }\n        // An empty field is valid if it's not required\n        else if (!$el.prop('required')) {\n            valid = true;\n          }\n\n        return valid;\n      }\n\n      /**\n       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n       */\n\n    }, {\n      key: 'validateRadio',\n      value: function validateRadio(groupName) {\n        // If at least one radio in the group has the `required` attribute, the group is considered required\n        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n        var $group = this.$element.find(':radio[name=\"' + groupName + '\"]');\n        var valid = false,\n            required = false;\n\n        // For the group to be required, at least one radio needs to be required\n        $group.each(function (i, e) {\n          if ($(e).attr('required')) {\n            required = true;\n          }\n        });\n        if (!required) valid = true;\n\n        if (!valid) {\n          // For the group to be valid, at least one radio needs to be checked\n          $group.each(function (i, e) {\n            if ($(e).prop('checked')) {\n              valid = true;\n            }\n          });\n        };\n\n        return valid;\n      }\n\n      /**\n       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n       * @param {Object} $el - jQuery input element.\n       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n       * @param {Boolean} required - self explanatory?\n       * @returns {Boolean} - true if validations passed.\n       */\n\n    }, {\n      key: 'matchValidation',\n      value: function matchValidation($el, validators, required) {\n        var _this4 = this;\n\n        required = required ? true : false;\n\n        var clear = validators.split(' ').map(function (v) {\n          return _this4.options.validators[v]($el, required, $el.parent());\n        });\n        return clear.indexOf(false) === -1;\n      }\n\n      /**\n       * Resets form inputs and styles\n       * @fires Abide#formreset\n       */\n\n    }, {\n      key: 'resetForm',\n      value: function resetForm() {\n        var $form = this.$element,\n            opts = this.options;\n\n        $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);\n        $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);\n        $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);\n        $form.find('[data-abide-error]').css('display', 'none');\n        $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n        $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n        $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n        /**\n         * Fires when the form has been reset.\n         * @event Abide#formreset\n         */\n        $form.trigger('formreset.zf.abide', [$form]);\n      }\n\n      /**\n       * Destroys an instance of Abide.\n       * Removes error styles and classes from elements, without resetting their values.\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        var _this = this;\n        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');\n\n        this.$inputs.off('.abide').each(function () {\n          _this.removeErrorClasses($(this));\n        });\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Abide;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Abide.defaults = {\n    /**\n     * The default event to validate inputs. Checkboxes and radios validate immediately.\n     * Remove or change this value for manual validation.\n     * @option\n     * @example 'fieldChange'\n     */\n    validateOn: 'fieldChange',\n\n    /**\n     * Class to be applied to input labels on failed validation.\n     * @option\n     * @example 'is-invalid-label'\n     */\n    labelErrorClass: 'is-invalid-label',\n\n    /**\n     * Class to be applied to inputs on failed validation.\n     * @option\n     * @example 'is-invalid-input'\n     */\n    inputErrorClass: 'is-invalid-input',\n\n    /**\n     * Class selector to use to target Form Errors for show/hide.\n     * @option\n     * @example '.form-error'\n     */\n    formErrorSelector: '.form-error',\n\n    /**\n     * Class added to Form Errors on failed validation.\n     * @option\n     * @example 'is-visible'\n     */\n    formErrorClass: 'is-visible',\n\n    /**\n     * Set to true to validate text inputs on any value change.\n     * @option\n     * @example false\n     */\n    liveValidate: false,\n\n    patterns: {\n      alpha: /^[a-zA-Z]+$/,\n      alpha_numeric: /^[a-zA-Z0-9]+$/,\n      integer: /^[-+]?\\d+$/,\n      number: /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n\n      // amex, visa, diners\n      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n      cvv: /^([0-9]){3,4}$/,\n\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n      email: /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n\n      url: /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n      // abc.de\n      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n\n      datetime: /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n      // YYYY-MM-DD\n      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n      // HH:MM:SS\n      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n      dateISO: /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n      // MM/DD/YYYY\n      month_day_year: /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n      // DD/MM/YYYY\n      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n\n      // #FFF or #FFFFFF\n      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/\n    },\n\n    /**\n     * Optional validation functions to be used. `equalTo` being the only default included function.\n     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n     * el : The jQuery element to validate.\n     * required : Boolean value of the required attribute be present or not.\n     * parent : The direct parent of the input.\n     * @option\n     */\n    validators: {\n      equalTo: function (el, required, parent) {\n        return $('#' + el.attr('data-equalto')).val() === el.val();\n      }\n    }\n  };\n\n  // Window exports\n  Foundation.plugin(Abide, 'Abide');\n}(jQuery);"]},"hash":"0a33b937929bf38d8d0c2598a7b1abce797ee4d2"}
