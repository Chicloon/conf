{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.equalizer.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.equalizer.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.equalizer.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.equalizer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.equalizer"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * Equalizer module.\n   * @module foundation.equalizer\n   */\n\n  var Equalizer = function () {\n    /**\n     * Creates a new instance of Equalizer.\n     * @class\n     * @fires Equalizer#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Equalizer(element, options) {\n      (0, _classCallCheck3['default'])(this, Equalizer);\n\n      this.$element = element;\n      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Equalizer');\n    }\n\n    /**\n     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */\n\n\n    Equalizer.prototype._init = function () {\n      function _init() {\n        var eqId = this.$element.attr('data-equalizer') || '';\n        var $watched = this.$element.find('[data-equalizer-watch=\"' + eqId + '\"]');\n\n        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n        this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));\n\n        this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n        this.isOn = false;\n        this._bindHandler = {\n          onResizeMeBound: this._onResizeMe.bind(this),\n          onPostEqualizedBound: this._onPostEqualized.bind(this)\n        };\n\n        var imgs = this.$element.find('img');\n        var tooSmall;\n        if (this.options.equalizeOn) {\n          tooSmall = this._checkMQ();\n          $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n        } else {\n          this._events();\n        }\n        if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {\n          if (imgs.length) {\n            Foundation.onImagesLoaded(imgs, this._reflow.bind(this));\n          } else {\n            this._reflow();\n          }\n        }\n      }\n\n      return _init;\n    }();\n\n    /**\n     * Removes event listeners if the breakpoint is too small.\n     * @private\n     */\n\n\n    Equalizer.prototype._pauseEvents = function () {\n      function _pauseEvents() {\n        this.isOn = false;\n        this.$element.off({\n          '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n          'resizeme.zf.trigger': this._bindHandler.onResizeMeBound\n        });\n      }\n\n      return _pauseEvents;\n    }();\n\n    /**\n     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n     * @private\n     */\n\n\n    Equalizer.prototype._onResizeMe = function () {\n      function _onResizeMe(e) {\n        this._reflow();\n      }\n\n      return _onResizeMe;\n    }();\n\n    /**\n     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n     * @private\n     */\n\n\n    Equalizer.prototype._onPostEqualized = function () {\n      function _onPostEqualized(e) {\n        if (e.target !== this.$element[0]) {\n          this._reflow();\n        }\n      }\n\n      return _onPostEqualized;\n    }();\n\n    /**\n     * Initializes events for Equalizer.\n     * @private\n     */\n\n\n    Equalizer.prototype._events = function () {\n      function _events() {\n        var _this = this;\n        this._pauseEvents();\n        if (this.hasNested) {\n          this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n        } else {\n          this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n        }\n        this.isOn = true;\n      }\n\n      return _events;\n    }();\n\n    /**\n     * Checks the current breakpoint to the minimum required size.\n     * @private\n     */\n\n\n    Equalizer.prototype._checkMQ = function () {\n      function _checkMQ() {\n        var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);\n        if (tooSmall) {\n          if (this.isOn) {\n            this._pauseEvents();\n            this.$watched.css('height', 'auto');\n          }\n        } else {\n          if (!this.isOn) {\n            this._events();\n          }\n        }\n        return tooSmall;\n      }\n\n      return _checkMQ;\n    }();\n\n    /**\n     * A noop version for the plugin\n     * @private\n     */\n\n\n    Equalizer.prototype._killswitch = function () {\n      function _killswitch() {\n        return;\n      }\n\n      return _killswitch;\n    }();\n\n    /**\n     * Calls necessary functions to update Equalizer upon DOM change\n     * @private\n     */\n\n\n    Equalizer.prototype._reflow = function () {\n      function _reflow() {\n        if (!this.options.equalizeOnStack) {\n          if (this._isStacked()) {\n            this.$watched.css('height', 'auto');\n            return false;\n          }\n        }\n        if (this.options.equalizeByRow) {\n          this.getHeightsByRow(this.applyHeightByRow.bind(this));\n        } else {\n          this.getHeights(this.applyHeight.bind(this));\n        }\n      }\n\n      return _reflow;\n    }();\n\n    /**\n     * Manually determines if the first 2 elements are *NOT* stacked.\n     * @private\n     */\n\n\n    Equalizer.prototype._isStacked = function () {\n      function _isStacked() {\n        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n      }\n\n      return _isStacked;\n    }();\n\n    /**\n     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n     * @param {Function} cb - A non-optional callback to return the heights array to.\n     * @returns {Array} heights - An array of heights of children within Equalizer container\n     */\n\n\n    Equalizer.prototype.getHeights = function () {\n      function getHeights(cb) {\n        var heights = [];\n        for (var i = 0, len = this.$watched.length; i < len; i++) {\n          this.$watched[i].style.height = 'auto';\n          heights.push(this.$watched[i].offsetHeight);\n        }\n        cb(heights);\n      }\n\n      return getHeights;\n    }();\n\n    /**\n     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n     * @param {Function} cb - A non-optional callback to return the heights array to.\n     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n     */\n\n\n    Equalizer.prototype.getHeightsByRow = function () {\n      function getHeightsByRow(cb) {\n        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,\n            groups = [],\n            group = 0;\n        //group by Row\n        groups[group] = [];\n        for (var i = 0, len = this.$watched.length; i < len; i++) {\n          this.$watched[i].style.height = 'auto';\n          //maybe could use this.$watched[i].offsetTop\n          var elOffsetTop = $(this.$watched[i]).offset().top;\n          if (elOffsetTop != lastElTopOffset) {\n            group++;\n            groups[group] = [];\n            lastElTopOffset = elOffsetTop;\n          }\n          groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);\n        }\n\n        for (var j = 0, ln = groups.length; j < ln; j++) {\n          var heights = $(groups[j]).map(function () {\n            return this[1];\n          }).get();\n          var max = Math.max.apply(null, heights);\n          groups[j].push(max);\n        }\n        cb(groups);\n      }\n\n      return getHeightsByRow;\n    }();\n\n    /**\n     * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n     * @param {array} heights - An array of heights of children within Equalizer container\n     * @fires Equalizer#preequalized\n     * @fires Equalizer#postequalized\n     */\n\n\n    Equalizer.prototype.applyHeight = function () {\n      function applyHeight(heights) {\n        var max = Math.max.apply(null, heights);\n        /**\n         * Fires before the heights are applied\n         * @event Equalizer#preequalized\n         */\n        this.$element.trigger('preequalized.zf.equalizer');\n\n        this.$watched.css('height', max);\n\n        /**\n         * Fires when the heights have been applied\n         * @event Equalizer#postequalized\n         */\n        this.$element.trigger('postequalized.zf.equalizer');\n      }\n\n      return applyHeight;\n    }();\n\n    /**\n     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n     * @fires Equalizer#preequalized\n     * @fires Equalizer#preequalizedRow\n     * @fires Equalizer#postequalizedRow\n     * @fires Equalizer#postequalized\n     */\n\n\n    Equalizer.prototype.applyHeightByRow = function () {\n      function applyHeightByRow(groups) {\n        /**\n         * Fires before the heights are applied\n         */\n        this.$element.trigger('preequalized.zf.equalizer');\n        for (var i = 0, len = groups.length; i < len; i++) {\n          var groupsILength = groups[i].length,\n              max = groups[i][groupsILength - 1];\n          if (groupsILength <= 2) {\n            $(groups[i][0][0]).css({ 'height': 'auto' });\n            continue;\n          }\n          /**\n            * Fires before the heights per row are applied\n            * @event Equalizer#preequalizedRow\n            */\n          this.$element.trigger('preequalizedrow.zf.equalizer');\n          for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {\n            $(groups[i][j][0]).css({ 'height': max });\n          }\n          /**\n            * Fires when the heights per row have been applied\n            * @event Equalizer#postequalizedRow\n            */\n          this.$element.trigger('postequalizedrow.zf.equalizer');\n        }\n        /**\n         * Fires when the heights have been applied\n         */\n        this.$element.trigger('postequalized.zf.equalizer');\n      }\n\n      return applyHeightByRow;\n    }();\n\n    /**\n     * Destroys an instance of Equalizer.\n     * @function\n     */\n\n\n    Equalizer.prototype.destroy = function () {\n      function destroy() {\n        this._pauseEvents();\n        this.$watched.css('height', 'auto');\n\n        Foundation.unregisterPlugin(this);\n      }\n\n      return destroy;\n    }();\n\n    return Equalizer;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Equalizer.defaults = {\n    /**\n     * Enable height equalization when stacked on smaller screens.\n     * @option\n     * @example true\n     */\n    equalizeOnStack: true,\n    /**\n     * Enable height equalization row by row.\n     * @option\n     * @example false\n     */\n    equalizeByRow: false,\n    /**\n     * String representing the minimum breakpoint size the plugin should equalize heights on.\n     * @option\n     * @example 'medium'\n     */\n    equalizeOn: ''\n  };\n\n  // Window exports\n  Foundation.plugin(Equalizer, 'Equalizer');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.equalizer.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/js/foundation.equalizer.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * Equalizer module.\n * @module foundation.equalizer\n */\n\nclass Equalizer {\n  /**\n   * Creates a new instance of Equalizer.\n   * @class\n   * @fires Equalizer#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  constructor(element, options){\n    this.$element = element;\n    this.options  = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n\n    this._init();\n\n    Foundation.registerPlugin(this, 'Equalizer');\n  }\n\n  /**\n   * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n   * @private\n   */\n  _init() {\n    var eqId = this.$element.attr('data-equalizer') || '';\n    var $watched = this.$element.find(`[data-equalizer-watch=\"${eqId}\"]`);\n\n    this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n    this.$element.attr('data-resize', (eqId || Foundation.GetYoDigits(6, 'eq')));\n\n    this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n    this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n    this.isOn = false;\n    this._bindHandler = {\n      onResizeMeBound: this._onResizeMe.bind(this),\n      onPostEqualizedBound: this._onPostEqualized.bind(this)\n    };\n\n    var imgs = this.$element.find('img');\n    var tooSmall;\n    if(this.options.equalizeOn){\n      tooSmall = this._checkMQ();\n      $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n    }else{\n      this._events();\n    }\n    if((tooSmall !== undefined && tooSmall === false) || tooSmall === undefined){\n      if(imgs.length){\n        Foundation.onImagesLoaded(imgs, this._reflow.bind(this));\n      }else{\n        this._reflow();\n      }\n    }\n  }\n\n  /**\n   * Removes event listeners if the breakpoint is too small.\n   * @private\n   */\n  _pauseEvents() {\n    this.isOn = false;\n    this.$element.off({\n      '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n      'resizeme.zf.trigger': this._bindHandler.onResizeMeBound\n    });\n  }\n\n  /**\n   * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n   * @private\n   */\n  _onResizeMe(e) {\n    this._reflow();\n  }\n\n  /**\n   * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n   * @private\n   */\n  _onPostEqualized(e) {\n    if(e.target !== this.$element[0]){ this._reflow(); }\n  }\n\n  /**\n   * Initializes events for Equalizer.\n   * @private\n   */\n  _events() {\n    var _this = this;\n    this._pauseEvents();\n    if(this.hasNested){\n      this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n    }else{\n      this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n    }\n    this.isOn = true;\n  }\n\n  /**\n   * Checks the current breakpoint to the minimum required size.\n   * @private\n   */\n  _checkMQ() {\n    var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);\n    if(tooSmall){\n      if(this.isOn){\n        this._pauseEvents();\n        this.$watched.css('height', 'auto');\n      }\n    }else{\n      if(!this.isOn){\n        this._events();\n      }\n    }\n    return tooSmall;\n  }\n\n  /**\n   * A noop version for the plugin\n   * @private\n   */\n  _killswitch() {\n    return;\n  }\n\n  /**\n   * Calls necessary functions to update Equalizer upon DOM change\n   * @private\n   */\n  _reflow() {\n    if(!this.options.equalizeOnStack){\n      if(this._isStacked()){\n        this.$watched.css('height', 'auto');\n        return false;\n      }\n    }\n    if (this.options.equalizeByRow) {\n      this.getHeightsByRow(this.applyHeightByRow.bind(this));\n    }else{\n      this.getHeights(this.applyHeight.bind(this));\n    }\n  }\n\n  /**\n   * Manually determines if the first 2 elements are *NOT* stacked.\n   * @private\n   */\n  _isStacked() {\n    return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n  }\n\n  /**\n   * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n   * @param {Function} cb - A non-optional callback to return the heights array to.\n   * @returns {Array} heights - An array of heights of children within Equalizer container\n   */\n  getHeights(cb) {\n    var heights = [];\n    for(var i = 0, len = this.$watched.length; i < len; i++){\n      this.$watched[i].style.height = 'auto';\n      heights.push(this.$watched[i].offsetHeight);\n    }\n    cb(heights);\n  }\n\n  /**\n   * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n   * @param {Function} cb - A non-optional callback to return the heights array to.\n   * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n   */\n  getHeightsByRow(cb) {\n    var lastElTopOffset = (this.$watched.length ? this.$watched.first().offset().top : 0),\n        groups = [],\n        group = 0;\n    //group by Row\n    groups[group] = [];\n    for(var i = 0, len = this.$watched.length; i < len; i++){\n      this.$watched[i].style.height = 'auto';\n      //maybe could use this.$watched[i].offsetTop\n      var elOffsetTop = $(this.$watched[i]).offset().top;\n      if (elOffsetTop!=lastElTopOffset) {\n        group++;\n        groups[group] = [];\n        lastElTopOffset=elOffsetTop;\n      }\n      groups[group].push([this.$watched[i],this.$watched[i].offsetHeight]);\n    }\n\n    for (var j = 0, ln = groups.length; j < ln; j++) {\n      var heights = $(groups[j]).map(function(){ return this[1]; }).get();\n      var max         = Math.max.apply(null, heights);\n      groups[j].push(max);\n    }\n    cb(groups);\n  }\n\n  /**\n   * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n   * @param {array} heights - An array of heights of children within Equalizer container\n   * @fires Equalizer#preequalized\n   * @fires Equalizer#postequalized\n   */\n  applyHeight(heights) {\n    var max = Math.max.apply(null, heights);\n    /**\n     * Fires before the heights are applied\n     * @event Equalizer#preequalized\n     */\n    this.$element.trigger('preequalized.zf.equalizer');\n\n    this.$watched.css('height', max);\n\n    /**\n     * Fires when the heights have been applied\n     * @event Equalizer#postequalized\n     */\n     this.$element.trigger('postequalized.zf.equalizer');\n  }\n\n  /**\n   * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n   * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n   * @fires Equalizer#preequalized\n   * @fires Equalizer#preequalizedRow\n   * @fires Equalizer#postequalizedRow\n   * @fires Equalizer#postequalized\n   */\n  applyHeightByRow(groups) {\n    /**\n     * Fires before the heights are applied\n     */\n    this.$element.trigger('preequalized.zf.equalizer');\n    for (var i = 0, len = groups.length; i < len ; i++) {\n      var groupsILength = groups[i].length,\n          max = groups[i][groupsILength - 1];\n      if (groupsILength<=2) {\n        $(groups[i][0][0]).css({'height':'auto'});\n        continue;\n      }\n      /**\n        * Fires before the heights per row are applied\n        * @event Equalizer#preequalizedRow\n        */\n      this.$element.trigger('preequalizedrow.zf.equalizer');\n      for (var j = 0, lenJ = (groupsILength-1); j < lenJ ; j++) {\n        $(groups[i][j][0]).css({'height':max});\n      }\n      /**\n        * Fires when the heights per row have been applied\n        * @event Equalizer#postequalizedRow\n        */\n      this.$element.trigger('postequalizedrow.zf.equalizer');\n    }\n    /**\n     * Fires when the heights have been applied\n     */\n     this.$element.trigger('postequalized.zf.equalizer');\n  }\n\n  /**\n   * Destroys an instance of Equalizer.\n   * @function\n   */\n  destroy() {\n    this._pauseEvents();\n    this.$watched.css('height', 'auto');\n\n    Foundation.unregisterPlugin(this);\n  }\n}\n\n/**\n * Default settings for plugin\n */\nEqualizer.defaults = {\n  /**\n   * Enable height equalization when stacked on smaller screens.\n   * @option\n   * @example true\n   */\n  equalizeOnStack: true,\n  /**\n   * Enable height equalization row by row.\n   * @option\n   * @example false\n   */\n  equalizeByRow: false,\n  /**\n   * String representing the minimum breakpoint size the plugin should equalize heights on.\n   * @option\n   * @example 'medium'\n   */\n  equalizeOn: ''\n};\n\n// Window exports\nFoundation.plugin(Equalizer, 'Equalizer');\n\n}(jQuery);\n"]},"hash":"893d6dc40042e051cfc813498b5495eab0781214"}
