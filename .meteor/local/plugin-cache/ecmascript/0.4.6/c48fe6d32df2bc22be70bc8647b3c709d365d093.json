{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.reveal.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.reveal.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.reveal.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.reveal.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.reveal"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * Reveal module.\n   * @module foundation.reveal\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.motion if using animations\n   */\n\n  var Reveal = function () {\n    /**\n     * Creates a new instance of Reveal.\n     * @class\n     * @param {jQuery} element - jQuery object to use for the modal.\n     * @param {Object} options - optional parameters.\n     */\n\n    function Reveal(element, options) {\n      (0, _classCallCheck3['default'])(this, Reveal);\n\n      this.$element = element;\n      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);\n      this._init();\n\n      Foundation.registerPlugin(this, 'Reveal');\n      Foundation.Keyboard.register('Reveal', {\n        'ENTER': 'open',\n        'SPACE': 'open',\n        'ESCAPE': 'close',\n        'TAB': 'tab_forward',\n        'SHIFT_TAB': 'tab_backward'\n      });\n    }\n\n    /**\n     * Initializes the modal by adding the overlay and close buttons, (if selected).\n     * @private\n     */\n\n\n    Reveal.prototype._init = function () {\n      function _init() {\n        this.id = this.$element.attr('id');\n        this.isActive = false;\n        this.cached = { mq: Foundation.MediaQuery.current };\n        this.isMobile = mobileSniff();\n\n        this.$anchor = $('[data-open=\"' + this.id + '\"]').length ? $('[data-open=\"' + this.id + '\"]') : $('[data-toggle=\"' + this.id + '\"]');\n        this.$anchor.attr({\n          'aria-controls': this.id,\n          'aria-haspopup': true,\n          'tabindex': 0\n        });\n\n        if (this.options.fullScreen || this.$element.hasClass('full')) {\n          this.options.fullScreen = true;\n          this.options.overlay = false;\n        }\n        if (this.options.overlay && !this.$overlay) {\n          this.$overlay = this._makeOverlay(this.id);\n        }\n\n        this.$element.attr({\n          'role': 'dialog',\n          'aria-hidden': true,\n          'data-yeti-box': this.id,\n          'data-resize': this.id\n        });\n\n        if (this.$overlay) {\n          this.$element.detach().appendTo(this.$overlay);\n        } else {\n          this.$element.detach().appendTo($('body'));\n          this.$element.addClass('without-overlay');\n        }\n        this._events();\n        if (this.options.deepLink && window.location.hash === '#' + this.id) {\n          $(window).one('load.zf.reveal', this.open.bind(this));\n        }\n      }\n\n      return _init;\n    }();\n\n    /**\n     * Creates an overlay div to display behind the modal.\n     * @private\n     */\n\n\n    Reveal.prototype._makeOverlay = function () {\n      function _makeOverlay(id) {\n        var $overlay = $('<div></div>').addClass('reveal-overlay').appendTo('body');\n        return $overlay;\n      }\n\n      return _makeOverlay;\n    }();\n\n    /**\n     * Updates position of modal\n     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\n     * @private\n     */\n\n\n    Reveal.prototype._updatePosition = function () {\n      function _updatePosition() {\n        var width = this.$element.outerWidth();\n        var outerWidth = $(window).width();\n        var height = this.$element.outerHeight();\n        var outerHeight = $(window).height();\n        var left, top;\n        if (this.options.hOffset === 'auto') {\n          left = parseInt((outerWidth - width) / 2, 10);\n        } else {\n          left = parseInt(this.options.hOffset, 10);\n        }\n        if (this.options.vOffset === 'auto') {\n          if (height > outerHeight) {\n            top = parseInt(Math.min(100, outerHeight / 10), 10);\n          } else {\n            top = parseInt((outerHeight - height) / 4, 10);\n          }\n        } else {\n          top = parseInt(this.options.vOffset, 10);\n        }\n        this.$element.css({ top: top + 'px' });\n        // only worry about left if we don't have an overlay or we havea  horizontal offset,\n        // otherwise we're perfectly in the middle\n        if (!this.$overlay || this.options.hOffset !== 'auto') {\n          this.$element.css({ left: left + 'px' });\n          this.$element.css({ margin: '0px' });\n        }\n      }\n\n      return _updatePosition;\n    }();\n\n    /**\n     * Adds event handlers for the modal.\n     * @private\n     */\n\n\n    Reveal.prototype._events = function () {\n      function _events() {\n        var _this2 = this;\n\n        var _this = this;\n\n        this.$element.on({\n          'open.zf.trigger': this.open.bind(this),\n          'close.zf.trigger': function () {\n            function closeZfTrigger(event, $element) {\n              if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {\n                // only close reveal when it's explicitly called\n                return _this2.close.apply(_this2);\n              }\n            }\n\n            return closeZfTrigger;\n          }(),\n          'toggle.zf.trigger': this.toggle.bind(this),\n          'resizeme.zf.trigger': function () {\n            function resizemeZfTrigger() {\n              _this._updatePosition();\n            }\n\n            return resizemeZfTrigger;\n          }()\n        });\n\n        if (this.$anchor.length) {\n          this.$anchor.on('keydown.zf.reveal', function (e) {\n            if (e.which === 13 || e.which === 32) {\n              e.stopPropagation();\n              e.preventDefault();\n              _this.open();\n            }\n          });\n        }\n\n        if (this.options.closeOnClick && this.options.overlay) {\n          this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {\n            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {\n              return;\n            }\n            _this.close();\n          });\n        }\n        if (this.options.deepLink) {\n          $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));\n        }\n      }\n\n      return _events;\n    }();\n\n    /**\n     * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\n     * @private\n     */\n\n\n    Reveal.prototype._handleState = function () {\n      function _handleState(e) {\n        if (window.location.hash === '#' + this.id && !this.isActive) {\n          this.open();\n        } else {\n          this.close();\n        }\n      }\n\n      return _handleState;\n    }();\n\n    /**\n     * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n     * @function\n     * @fires Reveal#closeme\n     * @fires Reveal#open\n     */\n\n\n    Reveal.prototype.open = function () {\n      function open() {\n        var _this3 = this;\n\n        if (this.options.deepLink) {\n          var hash = '#' + this.id;\n\n          if (window.history.pushState) {\n            window.history.pushState(null, null, hash);\n          } else {\n            window.location.hash = hash;\n          }\n        }\n\n        this.isActive = true;\n\n        // Make elements invisible, but remove display: none so we can get size and positioning\n        this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);\n        if (this.options.overlay) {\n          this.$overlay.css({ 'visibility': 'hidden' }).show();\n        }\n\n        this._updatePosition();\n\n        this.$element.hide().css({ 'visibility': '' });\n\n        if (this.$overlay) {\n          this.$overlay.css({ 'visibility': '' }).hide();\n          if (this.$element.hasClass('fast')) {\n            this.$overlay.addClass('fast');\n          } else if (this.$element.hasClass('slow')) {\n            this.$overlay.addClass('slow');\n          }\n        }\n\n        if (!this.options.multipleOpened) {\n          /**\n           * Fires immediately before the modal opens.\n           * Closes any other modals that are currently open\n           * @event Reveal#closeme\n           */\n          this.$element.trigger('closeme.zf.reveal', this.id);\n        }\n        // Motion UI method of reveal\n        if (this.options.animationIn) {\n          var _this;\n\n          (function () {\n            var afterAnimationFocus = function () {\n              function afterAnimationFocus() {\n                _this.$element.attr({\n                  'aria-hidden': false,\n                  'tabindex': -1\n                }).focus();\n                console.log('focus');\n              }\n\n              return afterAnimationFocus;\n            }();\n\n            _this = _this3;\n\n            if (_this3.options.overlay) {\n              Foundation.Motion.animateIn(_this3.$overlay, 'fade-in');\n            }\n            Foundation.Motion.animateIn(_this3.$element, _this3.options.animationIn, function () {\n              _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);\n              afterAnimationFocus();\n            });\n          })();\n        }\n        // jQuery method of reveal\n        else {\n            if (this.options.overlay) {\n              this.$overlay.show(0);\n            }\n            this.$element.show(this.options.showDelay);\n          }\n\n        // handle accessibility\n        this.$element.attr({\n          'aria-hidden': false,\n          'tabindex': -1\n        }).focus();\n\n        /**\n         * Fires when the modal has successfully opened.\n         * @event Reveal#open\n         */\n        this.$element.trigger('open.zf.reveal');\n\n        if (this.isMobile) {\n          this.originalScrollPos = window.pageYOffset;\n          $('html, body').addClass('is-reveal-open');\n        } else {\n          $('body').addClass('is-reveal-open');\n        }\n\n        setTimeout(function () {\n          _this3._extraHandlers();\n        }, 0);\n      }\n\n      return open;\n    }();\n\n    /**\n     * Adds extra event handlers for the body and window if necessary.\n     * @private\n     */\n\n\n    Reveal.prototype._extraHandlers = function () {\n      function _extraHandlers() {\n        var _this = this;\n        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);\n\n        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {\n          $('body').on('click.zf.reveal', function (e) {\n            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {\n              return;\n            }\n            _this.close();\n          });\n        }\n\n        if (this.options.closeOnEsc) {\n          $(window).on('keydown.zf.reveal', function (e) {\n            Foundation.Keyboard.handleKey(e, 'Reveal', {\n              close: function () {\n                function close() {\n                  if (_this.options.closeOnEsc) {\n                    _this.close();\n                    _this.$anchor.focus();\n                  }\n                }\n\n                return close;\n              }()\n            });\n          });\n        }\n\n        // lock focus within modal while tabbing\n        this.$element.on('keydown.zf.reveal', function (e) {\n          var $target = $(this);\n          // handle keyboard event with keyboard util\n          Foundation.Keyboard.handleKey(e, 'Reveal', {\n            tab_forward: function () {\n              function tab_forward() {\n                if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) {\n                  // left modal downwards, setting focus to first element\n                  _this.focusableElements.eq(0).focus();\n                  return true;\n                }\n                if (_this.focusableElements.length === 0) {\n                  // no focusable elements inside the modal at all, prevent tabbing in general\n                  return true;\n                }\n              }\n\n              return tab_forward;\n            }(),\n            tab_backward: function () {\n              function tab_backward() {\n                if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) {\n                  // left modal upwards, setting focus to last element\n                  _this.focusableElements.eq(-1).focus();\n                  return true;\n                }\n                if (_this.focusableElements.length === 0) {\n                  // no focusable elements inside the modal at all, prevent tabbing in general\n                  return true;\n                }\n              }\n\n              return tab_backward;\n            }(),\n            open: function () {\n              function open() {\n                if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {\n                  setTimeout(function () {\n                    // set focus back to anchor if close button has been activated\n                    _this.$anchor.focus();\n                  }, 1);\n                } else if ($target.is(_this.focusableElements)) {\n                  // dont't trigger if acual element has focus (i.e. inputs, links, ...)\n                  _this.open();\n                }\n              }\n\n              return open;\n            }(),\n            close: function () {\n              function close() {\n                if (_this.options.closeOnEsc) {\n                  _this.close();\n                  _this.$anchor.focus();\n                }\n              }\n\n              return close;\n            }(),\n            handled: function () {\n              function handled(preventDefault) {\n                if (preventDefault) {\n                  e.preventDefault();\n                }\n              }\n\n              return handled;\n            }()\n          });\n        });\n      }\n\n      return _extraHandlers;\n    }();\n\n    /**\n     * Closes the modal.\n     * @function\n     * @fires Reveal#closed\n     */\n\n\n    Reveal.prototype.close = function () {\n      function close() {\n        if (!this.isActive || !this.$element.is(':visible')) {\n          return false;\n        }\n        var _this = this;\n\n        // Motion UI method of hiding\n        if (this.options.animationOut) {\n          if (this.options.overlay) {\n            Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);\n          } else {\n            finishUp();\n          }\n\n          Foundation.Motion.animateOut(this.$element, this.options.animationOut);\n        }\n        // jQuery method of hiding\n        else {\n            if (this.options.overlay) {\n              this.$overlay.hide(0, finishUp);\n            } else {\n              finishUp();\n            }\n\n            this.$element.hide(this.options.hideDelay);\n          }\n\n        // Conditionals to remove extra event listeners added on open\n        if (this.options.closeOnEsc) {\n          $(window).off('keydown.zf.reveal');\n        }\n\n        if (!this.options.overlay && this.options.closeOnClick) {\n          $('body').off('click.zf.reveal');\n        }\n\n        this.$element.off('keydown.zf.reveal');\n\n        function finishUp() {\n          if (_this.isMobile) {\n            $('html, body').removeClass('is-reveal-open');\n            if (_this.originalScrollPos) {\n              $('body').scrollTop(_this.originalScrollPos);\n              _this.originalScrollPos = null;\n            }\n          } else {\n            $('body').removeClass('is-reveal-open');\n          }\n\n          _this.$element.attr('aria-hidden', true);\n\n          /**\n          * Fires when the modal is done closing.\n          * @event Reveal#closed\n          */\n          _this.$element.trigger('closed.zf.reveal');\n        }\n\n        /**\n        * Resets the modal content\n        * This prevents a running video to keep going in the background\n        */\n        if (this.options.resetOnClose) {\n          this.$element.html(this.$element.html());\n        }\n\n        this.isActive = false;\n        if (_this.options.deepLink) {\n          if (window.history.replaceState) {\n            window.history.replaceState(\"\", document.title, window.location.pathname);\n          } else {\n            window.location.hash = '';\n          }\n        }\n      }\n\n      return close;\n    }();\n\n    /**\n     * Toggles the open/closed state of a modal.\n     * @function\n     */\n\n\n    Reveal.prototype.toggle = function () {\n      function toggle() {\n        if (this.isActive) {\n          this.close();\n        } else {\n          this.open();\n        }\n      }\n\n      return toggle;\n    }();\n\n    /**\n     * Destroys an instance of a modal.\n     * @function\n     */\n\n    Reveal.prototype.destroy = function () {\n      function destroy() {\n        if (this.options.overlay) {\n          this.$element.appendTo($('body')); // move $element outside of $overlay to prevent error unregisterPlugin()\n          this.$overlay.hide().off().remove();\n        }\n        this.$element.hide().off();\n        this.$anchor.off('.zf');\n        $(window).off('.zf.reveal:' + this.id);\n\n        Foundation.unregisterPlugin(this);\n      }\n\n      return destroy;\n    }();\n\n    return Reveal;\n  }();\n\n  Reveal.defaults = {\n    /**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-in-left'\n     */\n    animationIn: '',\n    /**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-out-right'\n     */\n    animationOut: '',\n    /**\n     * Time, in ms, to delay the opening of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */\n    showDelay: 0,\n    /**\n     * Time, in ms, to delay the closing of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */\n    hideDelay: 0,\n    /**\n     * Allows a click on the body/overlay to close the modal.\n     * @option\n     * @example true\n     */\n    closeOnClick: true,\n    /**\n     * Allows the modal to close if the user presses the `ESCAPE` key.\n     * @option\n     * @example true\n     */\n    closeOnEsc: true,\n    /**\n     * If true, allows multiple modals to be displayed at once.\n     * @option\n     * @example false\n     */\n    multipleOpened: false,\n    /**\n     * Distance, in pixels, the modal should push down from the top of the screen.\n     * @option\n     * @example auto\n     */\n    vOffset: 'auto',\n    /**\n     * Distance, in pixels, the modal should push in from the side of the screen.\n     * @option\n     * @example auto\n     */\n    hOffset: 'auto',\n    /**\n     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n     * @option\n     * @example false\n     */\n    fullScreen: false,\n    /**\n     * Percentage of screen height the modal should push up from the bottom of the view.\n     * @option\n     * @example 10\n     */\n    btmOffsetPct: 10,\n    /**\n     * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n     * @option\n     * @example true\n     */\n    overlay: true,\n    /**\n     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\n     * @option\n     * @example false\n     */\n    resetOnClose: false,\n    /**\n     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\n     * @option\n     * @example false\n     */\n    deepLink: false\n  };\n\n  // Window exports\n  Foundation.plugin(Reveal, 'Reveal');\n\n  function iPhoneSniff() {\n    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)\n    );\n  }\n\n  function androidSniff() {\n    return (/Android/.test(window.navigator.userAgent)\n    );\n  }\n\n  function mobileSniff() {\n    return iPhoneSniff() || androidSniff();\n  }\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.reveal.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/js/foundation.reveal.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * Reveal module.\n * @module foundation.reveal\n * @requires foundation.util.keyboard\n * @requires foundation.util.box\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.motion if using animations\n */\n\nclass Reveal {\n  /**\n   * Creates a new instance of Reveal.\n   * @class\n   * @param {jQuery} element - jQuery object to use for the modal.\n   * @param {Object} options - optional parameters.\n   */\n  constructor(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);\n    this._init();\n\n    Foundation.registerPlugin(this, 'Reveal');\n    Foundation.Keyboard.register('Reveal', {\n      'ENTER': 'open',\n      'SPACE': 'open',\n      'ESCAPE': 'close',\n      'TAB': 'tab_forward',\n      'SHIFT_TAB': 'tab_backward'\n    });\n  }\n\n  /**\n   * Initializes the modal by adding the overlay and close buttons, (if selected).\n   * @private\n   */\n  _init() {\n    this.id = this.$element.attr('id');\n    this.isActive = false;\n    this.cached = {mq: Foundation.MediaQuery.current};\n    this.isMobile = mobileSniff();\n\n    this.$anchor = $(`[data-open=\"${this.id}\"]`).length ? $(`[data-open=\"${this.id}\"]`) : $(`[data-toggle=\"${this.id}\"]`);\n    this.$anchor.attr({\n      'aria-controls': this.id,\n      'aria-haspopup': true,\n      'tabindex': 0\n    });\n\n    if (this.options.fullScreen || this.$element.hasClass('full')) {\n      this.options.fullScreen = true;\n      this.options.overlay = false;\n    }\n    if (this.options.overlay && !this.$overlay) {\n      this.$overlay = this._makeOverlay(this.id);\n    }\n\n    this.$element.attr({\n        'role': 'dialog',\n        'aria-hidden': true,\n        'data-yeti-box': this.id,\n        'data-resize': this.id\n    });\n\n    if(this.$overlay) {\n      this.$element.detach().appendTo(this.$overlay);\n    } else {\n      this.$element.detach().appendTo($('body'));\n      this.$element.addClass('without-overlay');\n    }\n    this._events();\n    if (this.options.deepLink && window.location.hash === ( `#${this.id}`)) {\n      $(window).one('load.zf.reveal', this.open.bind(this));\n    }\n  }\n\n  /**\n   * Creates an overlay div to display behind the modal.\n   * @private\n   */\n  _makeOverlay(id) {\n    var $overlay = $('<div></div>')\n                    .addClass('reveal-overlay')\n                    .appendTo('body');\n    return $overlay;\n  }\n\n  /**\n   * Updates position of modal\n   * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\n   * @private\n   */\n  _updatePosition() {\n    var width = this.$element.outerWidth();\n    var outerWidth = $(window).width();\n    var height = this.$element.outerHeight();\n    var outerHeight = $(window).height();\n    var left, top;\n    if (this.options.hOffset === 'auto') {\n      left = parseInt((outerWidth - width) / 2, 10);\n    } else {\n      left = parseInt(this.options.hOffset, 10);\n    }\n    if (this.options.vOffset === 'auto') {\n      if (height > outerHeight) {\n        top = parseInt(Math.min(100, outerHeight / 10), 10);\n      } else {\n        top = parseInt((outerHeight - height) / 4, 10);\n      }\n    } else {\n      top = parseInt(this.options.vOffset, 10);\n    }\n    this.$element.css({top: top + 'px'});\n    // only worry about left if we don't have an overlay or we havea  horizontal offset,\n    // otherwise we're perfectly in the middle\n    if(!this.$overlay || (this.options.hOffset !== 'auto')) {\n      this.$element.css({left: left + 'px'});\n      this.$element.css({margin: '0px'});\n    }\n\n  }\n\n  /**\n   * Adds event handlers for the modal.\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    this.$element.on({\n      'open.zf.trigger': this.open.bind(this),\n      'close.zf.trigger': (event, $element) => {\n        if ((event.target === _this.$element[0]) ||\n            ($(event.target).parents('[data-closable]')[0] === $element)) { // only close reveal when it's explicitly called\n          return this.close.apply(this);\n        }\n      },\n      'toggle.zf.trigger': this.toggle.bind(this),\n      'resizeme.zf.trigger': function() {\n        _this._updatePosition();\n      }\n    });\n\n    if (this.$anchor.length) {\n      this.$anchor.on('keydown.zf.reveal', function(e) {\n        if (e.which === 13 || e.which === 32) {\n          e.stopPropagation();\n          e.preventDefault();\n          _this.open();\n        }\n      });\n    }\n\n    if (this.options.closeOnClick && this.options.overlay) {\n      this.$overlay.off('.zf.reveal').on('click.zf.reveal', function(e) {\n        if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) { return; }\n        _this.close();\n      });\n    }\n    if (this.options.deepLink) {\n      $(window).on(`popstate.zf.reveal:${this.id}`, this._handleState.bind(this));\n    }\n  }\n\n  /**\n   * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\n   * @private\n   */\n  _handleState(e) {\n    if(window.location.hash === ( '#' + this.id) && !this.isActive){ this.open(); }\n    else{ this.close(); }\n  }\n\n\n  /**\n   * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n   * @function\n   * @fires Reveal#closeme\n   * @fires Reveal#open\n   */\n  open() {\n    if (this.options.deepLink) {\n      var hash = `#${this.id}`;\n\n      if (window.history.pushState) {\n        window.history.pushState(null, null, hash);\n      } else {\n        window.location.hash = hash;\n      }\n    }\n\n    this.isActive = true;\n\n    // Make elements invisible, but remove display: none so we can get size and positioning\n    this.$element\n        .css({ 'visibility': 'hidden' })\n        .show()\n        .scrollTop(0);\n    if (this.options.overlay) {\n      this.$overlay.css({'visibility': 'hidden'}).show();\n    }\n\n    this._updatePosition();\n\n    this.$element\n      .hide()\n      .css({ 'visibility': '' });\n\n    if(this.$overlay) {\n      this.$overlay.css({'visibility': ''}).hide();\n      if(this.$element.hasClass('fast')) {\n        this.$overlay.addClass('fast');\n      } else if (this.$element.hasClass('slow')) {\n        this.$overlay.addClass('slow');\n      }\n    }\n\n\n    if (!this.options.multipleOpened) {\n      /**\n       * Fires immediately before the modal opens.\n       * Closes any other modals that are currently open\n       * @event Reveal#closeme\n       */\n      this.$element.trigger('closeme.zf.reveal', this.id);\n    }\n    // Motion UI method of reveal\n    if (this.options.animationIn) {\n      var _this = this;\n      function afterAnimationFocus(){\n        _this.$element\n          .attr({\n            'aria-hidden': false,\n            'tabindex': -1\n          })\n          .focus();\n          console.log('focus');\n      }\n      if (this.options.overlay) {\n        Foundation.Motion.animateIn(this.$overlay, 'fade-in');\n      }\n      Foundation.Motion.animateIn(this.$element, this.options.animationIn, () => {\n        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);\n        afterAnimationFocus();\n      });\n    }\n    // jQuery method of reveal\n    else {\n      if (this.options.overlay) {\n        this.$overlay.show(0);\n      }\n      this.$element.show(this.options.showDelay);\n    }\n\n    // handle accessibility\n    this.$element\n      .attr({\n        'aria-hidden': false,\n        'tabindex': -1\n      })\n      .focus();\n\n    /**\n     * Fires when the modal has successfully opened.\n     * @event Reveal#open\n     */\n    this.$element.trigger('open.zf.reveal');\n\n    if (this.isMobile) {\n      this.originalScrollPos = window.pageYOffset;\n      $('html, body').addClass('is-reveal-open');\n    }\n    else {\n      $('body').addClass('is-reveal-open');\n    }\n\n    setTimeout(() => {\n      this._extraHandlers();\n    }, 0);\n  }\n\n  /**\n   * Adds extra event handlers for the body and window if necessary.\n   * @private\n   */\n  _extraHandlers() {\n    var _this = this;\n    this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);\n\n    if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {\n      $('body').on('click.zf.reveal', function(e) {\n        if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) { return; }\n        _this.close();\n      });\n    }\n\n    if (this.options.closeOnEsc) {\n      $(window).on('keydown.zf.reveal', function(e) {\n        Foundation.Keyboard.handleKey(e, 'Reveal', {\n          close: function() {\n            if (_this.options.closeOnEsc) {\n              _this.close();\n              _this.$anchor.focus();\n            }\n          }\n        });\n      });\n    }\n\n    // lock focus within modal while tabbing\n    this.$element.on('keydown.zf.reveal', function(e) {\n      var $target = $(this);\n      // handle keyboard event with keyboard util\n      Foundation.Keyboard.handleKey(e, 'Reveal', {\n        tab_forward: function() {\n          if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) { // left modal downwards, setting focus to first element\n            _this.focusableElements.eq(0).focus();\n            return true;\n          }\n          if (_this.focusableElements.length === 0) { // no focusable elements inside the modal at all, prevent tabbing in general\n            return true;\n          }\n        },\n        tab_backward: function() {\n          if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) { // left modal upwards, setting focus to last element\n            _this.focusableElements.eq(-1).focus();\n            return true;\n          }\n          if (_this.focusableElements.length === 0) { // no focusable elements inside the modal at all, prevent tabbing in general\n            return true;\n          }\n        },\n        open: function() {\n          if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {\n            setTimeout(function() { // set focus back to anchor if close button has been activated\n              _this.$anchor.focus();\n            }, 1);\n          } else if ($target.is(_this.focusableElements)) { // dont't trigger if acual element has focus (i.e. inputs, links, ...)\n            _this.open();\n          }\n        },\n        close: function() {\n          if (_this.options.closeOnEsc) {\n            _this.close();\n            _this.$anchor.focus();\n          }\n        },\n        handled: function(preventDefault) {\n          if (preventDefault) {\n            e.preventDefault();\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Closes the modal.\n   * @function\n   * @fires Reveal#closed\n   */\n  close() {\n    if (!this.isActive || !this.$element.is(':visible')) {\n      return false;\n    }\n    var _this = this;\n\n    // Motion UI method of hiding\n    if (this.options.animationOut) {\n      if (this.options.overlay) {\n        Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);\n      }\n      else {\n        finishUp();\n      }\n\n      Foundation.Motion.animateOut(this.$element, this.options.animationOut);\n    }\n    // jQuery method of hiding\n    else {\n      if (this.options.overlay) {\n        this.$overlay.hide(0, finishUp);\n      }\n      else {\n        finishUp();\n      }\n\n      this.$element.hide(this.options.hideDelay);\n    }\n\n    // Conditionals to remove extra event listeners added on open\n    if (this.options.closeOnEsc) {\n      $(window).off('keydown.zf.reveal');\n    }\n\n    if (!this.options.overlay && this.options.closeOnClick) {\n      $('body').off('click.zf.reveal');\n    }\n\n    this.$element.off('keydown.zf.reveal');\n\n    function finishUp() {\n      if (_this.isMobile) {\n        $('html, body').removeClass('is-reveal-open');\n        if(_this.originalScrollPos) {\n          $('body').scrollTop(_this.originalScrollPos);\n          _this.originalScrollPos = null;\n        }\n      }\n      else {\n        $('body').removeClass('is-reveal-open');\n      }\n\n      _this.$element.attr('aria-hidden', true);\n\n      /**\n      * Fires when the modal is done closing.\n      * @event Reveal#closed\n      */\n      _this.$element.trigger('closed.zf.reveal');\n    }\n\n    /**\n    * Resets the modal content\n    * This prevents a running video to keep going in the background\n    */\n    if (this.options.resetOnClose) {\n      this.$element.html(this.$element.html());\n    }\n\n    this.isActive = false;\n     if (_this.options.deepLink) {\n       if (window.history.replaceState) {\n         window.history.replaceState(\"\", document.title, window.location.pathname);\n       } else {\n         window.location.hash = '';\n       }\n     }\n  }\n\n  /**\n   * Toggles the open/closed state of a modal.\n   * @function\n   */\n  toggle() {\n    if (this.isActive) {\n      this.close();\n    } else {\n      this.open();\n    }\n  };\n\n  /**\n   * Destroys an instance of a modal.\n   * @function\n   */\n  destroy() {\n    if (this.options.overlay) {\n      this.$element.appendTo($('body')); // move $element outside of $overlay to prevent error unregisterPlugin()\n      this.$overlay.hide().off().remove();\n    }\n    this.$element.hide().off();\n    this.$anchor.off('.zf');\n    $(window).off(`.zf.reveal:${this.id}`);\n\n    Foundation.unregisterPlugin(this);\n  };\n}\n\nReveal.defaults = {\n  /**\n   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n   * @option\n   * @example 'slide-in-left'\n   */\n  animationIn: '',\n  /**\n   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n   * @option\n   * @example 'slide-out-right'\n   */\n  animationOut: '',\n  /**\n   * Time, in ms, to delay the opening of a modal after a click if no animation used.\n   * @option\n   * @example 10\n   */\n  showDelay: 0,\n  /**\n   * Time, in ms, to delay the closing of a modal after a click if no animation used.\n   * @option\n   * @example 10\n   */\n  hideDelay: 0,\n  /**\n   * Allows a click on the body/overlay to close the modal.\n   * @option\n   * @example true\n   */\n  closeOnClick: true,\n  /**\n   * Allows the modal to close if the user presses the `ESCAPE` key.\n   * @option\n   * @example true\n   */\n  closeOnEsc: true,\n  /**\n   * If true, allows multiple modals to be displayed at once.\n   * @option\n   * @example false\n   */\n  multipleOpened: false,\n  /**\n   * Distance, in pixels, the modal should push down from the top of the screen.\n   * @option\n   * @example auto\n   */\n  vOffset: 'auto',\n  /**\n   * Distance, in pixels, the modal should push in from the side of the screen.\n   * @option\n   * @example auto\n   */\n  hOffset: 'auto',\n  /**\n   * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n   * @option\n   * @example false\n   */\n  fullScreen: false,\n  /**\n   * Percentage of screen height the modal should push up from the bottom of the view.\n   * @option\n   * @example 10\n   */\n  btmOffsetPct: 10,\n  /**\n   * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n   * @option\n   * @example true\n   */\n  overlay: true,\n  /**\n   * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\n   * @option\n   * @example false\n   */\n  resetOnClose: false,\n  /**\n   * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\n   * @option\n   * @example false\n   */\n  deepLink: false\n};\n\n// Window exports\nFoundation.plugin(Reveal, 'Reveal');\n\nfunction iPhoneSniff() {\n  return /iP(ad|hone|od).*OS/.test(window.navigator.userAgent);\n}\n\nfunction androidSniff() {\n  return /Android/.test(window.navigator.userAgent);\n}\n\nfunction mobileSniff() {\n  return iPhoneSniff() || androidSniff();\n}\n\n}(jQuery);\n"]},"hash":"c48fe6d32df2bc22be70bc8647b3c709d365d093"}
