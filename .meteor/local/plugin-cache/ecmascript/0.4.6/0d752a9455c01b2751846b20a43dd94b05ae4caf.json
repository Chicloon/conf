{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.responsiveToggle.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.responsiveToggle.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.responsiveToggle.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.responsiveToggle.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.responsiveToggle"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * ResponsiveToggle module.\n   * @module foundation.responsiveToggle\n   * @requires foundation.util.mediaQuery\n   */\n\n  var ResponsiveToggle = function () {\n    /**\n     * Creates a new instance of Tab Bar.\n     * @class\n     * @fires ResponsiveToggle#init\n     * @param {jQuery} element - jQuery object to attach tab bar functionality to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function ResponsiveToggle(element, options) {\n      (0, _classCallCheck3['default'])(this, ResponsiveToggle);\n\n      this.$element = $(element);\n      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'ResponsiveToggle');\n    }\n\n    /**\n     * Initializes the tab bar by finding the target element, toggling element, and running update().\n     * @function\n     * @private\n     */\n\n\n    ResponsiveToggle.prototype._init = function () {\n      function _init() {\n        var targetID = this.$element.data('responsive-toggle');\n        if (!targetID) {\n          console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');\n        }\n\n        this.$targetMenu = $('#' + targetID);\n        this.$toggler = this.$element.find('[data-toggle]');\n\n        this._update();\n      }\n\n      return _init;\n    }();\n\n    /**\n     * Adds necessary event handlers for the tab bar to work.\n     * @function\n     * @private\n     */\n\n\n    ResponsiveToggle.prototype._events = function () {\n      function _events() {\n        var _this = this;\n\n        this._updateMqHandler = this._update.bind(this);\n\n        $(window).on('changed.zf.mediaquery', this._updateMqHandler);\n\n        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));\n      }\n\n      return _events;\n    }();\n\n    /**\n     * Checks the current media query to determine if the tab bar should be visible or hidden.\n     * @function\n     * @private\n     */\n\n\n    ResponsiveToggle.prototype._update = function () {\n      function _update() {\n        // Mobile\n        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\n          this.$element.show();\n          this.$targetMenu.hide();\n        }\n\n        // Desktop\n        else {\n            this.$element.hide();\n            this.$targetMenu.show();\n          }\n      }\n\n      return _update;\n    }();\n\n    /**\n     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\n     * @function\n     * @fires ResponsiveToggle#toggled\n     */\n\n\n    ResponsiveToggle.prototype.toggleMenu = function () {\n      function toggleMenu() {\n        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\n          this.$targetMenu.toggle(0);\n\n          /**\n           * Fires when the element attached to the tab bar toggles.\n           * @event ResponsiveToggle#toggled\n           */\n          this.$element.trigger('toggled.zf.responsiveToggle');\n        }\n      }\n\n      return toggleMenu;\n    }();\n\n    ResponsiveToggle.prototype.destroy = function () {\n      function destroy() {\n        this.$element.off('.zf.responsiveToggle');\n        this.$toggler.off('.zf.responsiveToggle');\n\n        $(window).off('changed.zf.mediaquery', this._updateMqHandler);\n\n        Foundation.unregisterPlugin(this);\n      }\n\n      return destroy;\n    }();\n\n    return ResponsiveToggle;\n  }();\n\n  ResponsiveToggle.defaults = {\n    /**\n     * The breakpoint after which the menu is always shown, and the tab bar is hidden.\n     * @option\n     * @example 'medium'\n     */\n    hideFor: 'medium'\n  };\n\n  // Window exports\n  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.responsiveToggle.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA,CAAC,UAAS,CAAT,EAAY;;;;;;;;AAAA,MAQP,gBARO;;;;;;;;;AAgBX,8BAAY,OAAZ,EAAqB,OAArB,EAA8B;AAAA;;AAC5B,WAAK,QAAL,GAAgB,EAAE,OAAF,CAAhB;AACA,WAAK,OAAL,GAAe,EAAE,MAAF,CAAS,EAAT,EAAa,iBAAiB,QAA9B,EAAwC,KAAK,QAAL,CAAc,IAAd,EAAxC,EAA8D,OAA9D,CAAf;;AAEA,WAAK,KAAL;AACA,WAAK,OAAL;;AAEA,iBAAW,cAAX,CAA0B,IAA1B,EAAgC,kBAAhC;AACD;;;;;;;;;AAxBU,+BA+BX,KA/BW;AAAA,uBA+BH;AACN,YAAI,WAAW,KAAK,QAAL,CAAc,IAAd,CAAmB,mBAAnB,CAAf;AACA,YAAI,CAAC,QAAL,EAAe;AACb,kBAAQ,KAAR,CAAc,kEAAd;AACD;;AAED,aAAK,WAAL,GAAmB,QAAM,QAAN,CAAnB;AACA,aAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,IAAd,CAAmB,eAAnB,CAAhB;;AAEA,aAAK,OAAL;AACD;;AAzCU;AAAA;;;;;;;;;AAAA,+BAgDX,OAhDW;AAAA,yBAgDD;AACR,YAAI,QAAQ,IAAZ;;AAEA,aAAK,gBAAL,GAAwB,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAxB;;AAEA,UAAE,MAAF,EAAU,EAAV,CAAa,uBAAb,EAAsC,KAAK,gBAA3C;;AAEA,aAAK,QAAL,CAAc,EAAd,CAAiB,2BAAjB,EAA8C,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAA9C;AACD;;AAxDU;AAAA;;;;;;;;;AAAA,+BA+DX,OA/DW;AAAA,yBA+DD;;AAER,YAAI,CAAC,WAAW,UAAX,CAAsB,OAAtB,CAA8B,KAAK,OAAL,CAAa,OAA3C,CAAL,EAA0D;AACxD,eAAK,QAAL,CAAc,IAAd;AACA,eAAK,WAAL,CAAiB,IAAjB;AACD;;;AAHD,aAMK;AACH,iBAAK,QAAL,CAAc,IAAd;AACA,iBAAK,WAAL,CAAiB,IAAjB;AACD;AACF;;AA3EU;AAAA;;;;;;;;;AAAA,+BAkFX,UAlFW;AAAA,4BAkFE;AACX,YAAI,CAAC,WAAW,UAAX,CAAsB,OAAtB,CAA8B,KAAK,OAAL,CAAa,OAA3C,CAAL,EAA0D;AACxD,eAAK,WAAL,CAAiB,MAAjB,CAAwB,CAAxB;;;;;;AAMA,eAAK,QAAL,CAAc,OAAd,CAAsB,6BAAtB;AACD;AACF;;AA5FU;AAAA;;AAAA,+BA8FX,OA9FW;AAAA,yBA8FD;AACR,aAAK,QAAL,CAAc,GAAd,CAAkB,sBAAlB;AACA,aAAK,QAAL,CAAc,GAAd,CAAkB,sBAAlB;;AAEA,UAAE,MAAF,EAAU,GAAV,CAAc,uBAAd,EAAuC,KAAK,gBAA5C;;AAEA,mBAAW,gBAAX,CAA4B,IAA5B;AACD;;AArGU;AAAA;;AAAA;AAAA;;AAwGb,mBAAiB,QAAjB,GAA4B;;;;;;AAM1B,aAAS;AANiB,GAA5B;;;AAUA,aAAW,MAAX,CAAkB,gBAAlB,EAAoC,kBAApC;AAEC,CApHA,CAoHC,MApHD,CAAD","file":"/packages/zurb:foundation-sites/js/foundation.responsiveToggle.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * ResponsiveToggle module.\n * @module foundation.responsiveToggle\n * @requires foundation.util.mediaQuery\n */\n\nclass ResponsiveToggle {\n  /**\n   * Creates a new instance of Tab Bar.\n   * @class\n   * @fires ResponsiveToggle#init\n   * @param {jQuery} element - jQuery object to attach tab bar functionality to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  constructor(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);\n\n    this._init();\n    this._events();\n\n    Foundation.registerPlugin(this, 'ResponsiveToggle');\n  }\n\n  /**\n   * Initializes the tab bar by finding the target element, toggling element, and running update().\n   * @function\n   * @private\n   */\n  _init() {\n    var targetID = this.$element.data('responsive-toggle');\n    if (!targetID) {\n      console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');\n    }\n\n    this.$targetMenu = $(`#${targetID}`);\n    this.$toggler = this.$element.find('[data-toggle]');\n\n    this._update();\n  }\n\n  /**\n   * Adds necessary event handlers for the tab bar to work.\n   * @function\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    this._updateMqHandler = this._update.bind(this);\n    \n    $(window).on('changed.zf.mediaquery', this._updateMqHandler);\n\n    this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));\n  }\n\n  /**\n   * Checks the current media query to determine if the tab bar should be visible or hidden.\n   * @function\n   * @private\n   */\n  _update() {\n    // Mobile\n    if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\n      this.$element.show();\n      this.$targetMenu.hide();\n    }\n\n    // Desktop\n    else {\n      this.$element.hide();\n      this.$targetMenu.show();\n    }\n  }\n\n  /**\n   * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\n   * @function\n   * @fires ResponsiveToggle#toggled\n   */\n  toggleMenu() {   \n    if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\n      this.$targetMenu.toggle(0);\n\n      /**\n       * Fires when the element attached to the tab bar toggles.\n       * @event ResponsiveToggle#toggled\n       */\n      this.$element.trigger('toggled.zf.responsiveToggle');\n    }\n  };\n\n  destroy() {\n    this.$element.off('.zf.responsiveToggle');\n    this.$toggler.off('.zf.responsiveToggle');\n    \n    $(window).off('changed.zf.mediaquery', this._updateMqHandler);\n    \n    Foundation.unregisterPlugin(this);\n  }\n}\n\nResponsiveToggle.defaults = {\n  /**\n   * The breakpoint after which the menu is always shown, and the tab bar is hidden.\n   * @option\n   * @example 'medium'\n   */\n  hideFor: 'medium'\n};\n\n// Window exports\nFoundation.plugin(ResponsiveToggle, 'ResponsiveToggle');\n\n}(jQuery);\n"]},"hash":"0d752a9455c01b2751846b20a43dd94b05ae4caf"}
