{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.keyboard.js","filenameRelative":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.keyboard.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.keyboard.js.map","sourceFileName":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.keyboard.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.util.keyboard"},"ignored":false,"code":"/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/\n\n'use strict';\n\n!function ($) {\n\n  var keyCodes = {\n    9: 'TAB',\n    13: 'ENTER',\n    27: 'ESCAPE',\n    32: 'SPACE',\n    37: 'ARROW_LEFT',\n    38: 'ARROW_UP',\n    39: 'ARROW_RIGHT',\n    40: 'ARROW_DOWN'\n  };\n\n  var commands = {};\n\n  var Keyboard = {\n    keys: getKeyCodes(keyCodes),\n\n    /**\n     * Parses the (keyboard) event and returns a String that represents its key\n     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n     * @param {Event} event - the event generated by the event handler\n     * @return String key - String that represents the key pressed\n     */\n    parseKey: function () {\n      function parseKey(event) {\n        var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n        if (event.shiftKey) key = 'SHIFT_' + key;\n        if (event.ctrlKey) key = 'CTRL_' + key;\n        if (event.altKey) key = 'ALT_' + key;\n        return key;\n      }\n\n      return parseKey;\n    }(),\n\n    /**\n     * Handles the given (keyboard) event\n     * @param {Event} event - the event generated by the event handler\n     * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n     * @param {Objects} functions - collection of functions that are to be executed\n     */\n    handleKey: function () {\n      function handleKey(event, component, functions) {\n        var commandList = commands[component],\n            keyCode = this.parseKey(event),\n            cmds,\n            command,\n            fn;\n\n        if (!commandList) return console.warn('Component not defined!');\n\n        if (typeof commandList.ltr === 'undefined') {\n          // this component does not differentiate between ltr and rtl\n          cmds = commandList; // use plain list\n        } else {\n            // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n            if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n          }\n        command = cmds[keyCode];\n\n        fn = functions[command];\n        if (fn && typeof fn === 'function') {\n          // execute function  if exists\n          var returnValue = fn.apply();\n          if (functions.handled || typeof functions.handled === 'function') {\n            // execute function when event was handled\n            functions.handled(returnValue);\n          }\n        } else {\n          if (functions.unhandled || typeof functions.unhandled === 'function') {\n            // execute function when event was not handled\n            functions.unhandled();\n          }\n        }\n      }\n\n      return handleKey;\n    }(),\n\n    /**\n     * Finds all focusable elements within the given `$element`\n     * @param {jQuery} $element - jQuery object to search within\n     * @return {jQuery} $focusable - all focusable elements within `$element`\n     */\n    findFocusable: function () {\n      function findFocusable($element) {\n        return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\n          if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {\n            return false;\n          } //only have visible elements and those that have a tabindex greater or equal 0\n          return true;\n        });\n      }\n\n      return findFocusable;\n    }(),\n\n    /**\n     * Returns the component name name\n     * @param {Object} component - Foundation component, e.g. Slider or Reveal\n     * @return String componentName\n     */\n\n    register: function () {\n      function register(componentName, cmds) {\n        commands[componentName] = cmds;\n      }\n\n      return register;\n    }()\n  };\n\n  /*\n   * Constants for easier comparing.\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   */\n  function getKeyCodes(kcs) {\n    var k = {};\n    for (var kc in meteorBabelHelpers.sanitizeForInObject(kcs)) {\n      k[kcs[kc]] = kcs[kc];\n    }return k;\n  }\n\n  Foundation.Keyboard = Keyboard;\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/dist/plugins/foundation.util.keyboard.js"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA,CAAC,UAAU,CAAV,EAAa;;AAEZ,MAAI,WAAW;AACb,OAAG,KADU;AAEb,QAAI,OAFS;AAGb,QAAI,QAHS;AAIb,QAAI,OAJS;AAKb,QAAI,YALS;AAMb,QAAI,UANS;AAOb,QAAI,aAPS;AAQb,QAAI;AARS,GAAf;;AAWA,MAAI,WAAW,EAAf;;AAEA,MAAI,WAAW;AACb,UAAM,YAAY,QAAZ,CADO;;;;;;;;AASb;AAAU,wBAAU,KAAV,EAAiB;AACzB,YAAI,MAAM,SAAS,MAAM,KAAN,IAAe,MAAM,OAA9B,KAA0C,OAAO,YAAP,CAAoB,MAAM,KAA1B,EAAiC,WAAjC,EAApD;AACA,YAAI,MAAM,QAAV,EAAoB,MAAM,WAAW,GAAjB;AACpB,YAAI,MAAM,OAAV,EAAmB,MAAM,UAAU,GAAhB;AACnB,YAAI,MAAM,MAAV,EAAkB,MAAM,SAAS,GAAf;AAClB,eAAO,GAAP;AACD;;AAND;AAAA,OATa;;;;;;;;AAwBb;AAAW,yBAAU,KAAV,EAAiB,SAAjB,EAA4B,SAA5B,EAAuC;AAChD,YAAI,cAAc,SAAS,SAAT,CAAlB;AAAA,YACI,UAAU,KAAK,QAAL,CAAc,KAAd,CADd;AAAA,YAEI,IAFJ;AAAA,YAGI,OAHJ;AAAA,YAII,EAJJ;;AAMA,YAAI,CAAC,WAAL,EAAkB,OAAO,QAAQ,IAAR,CAAa,wBAAb,CAAP;;AAElB,YAAI,OAAO,YAAY,GAAnB,KAA2B,WAA/B,EAA4C;;AAE1C,iBAAO,WAAP,C;AACD,SAHD,MAGO;;AAEH,gBAAI,WAAW,GAAX,EAAJ,EAAsB,OAAO,EAAE,MAAF,CAAS,EAAT,EAAa,YAAY,GAAzB,EAA8B,YAAY,GAA1C,CAAP,CAAtB,KAAiF,OAAO,EAAE,MAAF,CAAS,EAAT,EAAa,YAAY,GAAzB,EAA8B,YAAY,GAA1C,CAAP;AAClF;AACH,kBAAU,KAAK,OAAL,CAAV;;AAEA,aAAK,UAAU,OAAV,CAAL;AACA,YAAI,MAAM,OAAO,EAAP,KAAc,UAAxB,EAAoC;;AAElC,cAAI,cAAc,GAAG,KAAH,EAAlB;AACA,cAAI,UAAU,OAAV,IAAqB,OAAO,UAAU,OAAjB,KAA6B,UAAtD,EAAkE;;AAEhE,sBAAU,OAAV,CAAkB,WAAlB;AACD;AACF,SAPD,MAOO;AACL,cAAI,UAAU,SAAV,IAAuB,OAAO,UAAU,SAAjB,KAA+B,UAA1D,EAAsE;;AAEpE,sBAAU,SAAV;AACD;AACF;AACF;;AAhCD;AAAA,OAxBa;;;;;;;AAgEb;AAAe,6BAAU,QAAV,EAAoB;AACjC,eAAO,SAAS,IAAT,CAAc,8KAAd,EAA8L,MAA9L,CAAqM,YAAY;AACtN,cAAI,CAAC,EAAE,IAAF,EAAQ,EAAR,CAAW,UAAX,CAAD,IAA2B,EAAE,IAAF,EAAQ,IAAR,CAAa,UAAb,IAA2B,CAA1D,EAA6D;AAC3D,mBAAO,KAAP;AACD,W;AACD,iBAAO,IAAP;AACD,SALM,CAAP;AAMD;;AAPD;AAAA,OAhEa;;;;;;;;AAgFb;AAAU,wBAAU,aAAV,EAAyB,IAAzB,EAA+B;AACvC,iBAAS,aAAT,IAA0B,IAA1B;AACD;;AAFD;AAAA;AAhFa,GAAf;;;;;;AAyFA,WAAS,WAAT,CAAqB,GAArB,EAA0B;AACxB,QAAI,IAAI,EAAR;AACA,SAAK,IAAI,EAAT,2CAAe,GAAf,GAAoB;AAClB,QAAE,IAAI,EAAJ,CAAF,IAAa,IAAI,EAAJ,CAAb;AACD,YAAO,CAAP;AACF;;AAED,aAAW,QAAX,GAAsB,QAAtB;AACD,CAhHA,CAgHC,MAhHD,CAAD","file":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.keyboard.js.map","sourcesContent":["/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/\n\n'use strict';\n\n!function ($) {\n\n  var keyCodes = {\n    9: 'TAB',\n    13: 'ENTER',\n    27: 'ESCAPE',\n    32: 'SPACE',\n    37: 'ARROW_LEFT',\n    38: 'ARROW_UP',\n    39: 'ARROW_RIGHT',\n    40: 'ARROW_DOWN'\n  };\n\n  var commands = {};\n\n  var Keyboard = {\n    keys: getKeyCodes(keyCodes),\n\n    /**\n     * Parses the (keyboard) event and returns a String that represents its key\n     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n     * @param {Event} event - the event generated by the event handler\n     * @return String key - String that represents the key pressed\n     */\n    parseKey: function (event) {\n      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n      if (event.shiftKey) key = 'SHIFT_' + key;\n      if (event.ctrlKey) key = 'CTRL_' + key;\n      if (event.altKey) key = 'ALT_' + key;\n      return key;\n    },\n\n\n    /**\n     * Handles the given (keyboard) event\n     * @param {Event} event - the event generated by the event handler\n     * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n     * @param {Objects} functions - collection of functions that are to be executed\n     */\n    handleKey: function (event, component, functions) {\n      var commandList = commands[component],\n          keyCode = this.parseKey(event),\n          cmds,\n          command,\n          fn;\n\n      if (!commandList) return console.warn('Component not defined!');\n\n      if (typeof commandList.ltr === 'undefined') {\n        // this component does not differentiate between ltr and rtl\n        cmds = commandList; // use plain list\n      } else {\n          // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n          if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n        }\n      command = cmds[keyCode];\n\n      fn = functions[command];\n      if (fn && typeof fn === 'function') {\n        // execute function  if exists\n        var returnValue = fn.apply();\n        if (functions.handled || typeof functions.handled === 'function') {\n          // execute function when event was handled\n          functions.handled(returnValue);\n        }\n      } else {\n        if (functions.unhandled || typeof functions.unhandled === 'function') {\n          // execute function when event was not handled\n          functions.unhandled();\n        }\n      }\n    },\n\n\n    /**\n     * Finds all focusable elements within the given `$element`\n     * @param {jQuery} $element - jQuery object to search within\n     * @return {jQuery} $focusable - all focusable elements within `$element`\n     */\n    findFocusable: function ($element) {\n      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\n        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {\n          return false;\n        } //only have visible elements and those that have a tabindex greater or equal 0\n        return true;\n      });\n    },\n\n\n    /**\n     * Returns the component name name\n     * @param {Object} component - Foundation component, e.g. Slider or Reveal\n     * @return String componentName\n     */\n\n    register: function (componentName, cmds) {\n      commands[componentName] = cmds;\n    }\n  };\n\n  /*\n   * Constants for easier comparing.\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   */\n  function getKeyCodes(kcs) {\n    var k = {};\n    for (var kc in kcs) {\n      k[kcs[kc]] = kcs[kc];\n    }return k;\n  }\n\n  Foundation.Keyboard = Keyboard;\n}(jQuery);"]},"hash":"76a99e0c66049b2e9046bb931c5039fa5b4b832d"}
