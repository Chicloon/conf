{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.responsiveMenu.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.responsiveMenu.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.responsiveMenu.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.responsiveMenu.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.responsiveMenu"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * ResponsiveMenu module.\n   * @module foundation.responsiveMenu\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.accordionMenu\n   * @requires foundation.util.drilldown\n   * @requires foundation.util.dropdown-menu\n   */\n\n  var ResponsiveMenu = function () {\n    /**\n     * Creates a new instance of a responsive menu.\n     * @class\n     * @fires ResponsiveMenu#init\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function ResponsiveMenu(element, options) {\n      (0, _classCallCheck3['default'])(this, ResponsiveMenu);\n\n      this.$element = $(element);\n      this.rules = this.$element.data('responsive-menu');\n      this.currentMq = null;\n      this.currentPlugin = null;\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'ResponsiveMenu');\n    }\n\n    /**\n     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\n     * @function\n     * @private\n     */\n\n\n    ResponsiveMenu.prototype._init = function () {\n      function _init() {\n        // The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\n        if (typeof this.rules === 'string') {\n          var rulesTree = {};\n\n          // Parse rules from \"classes\" pulled from data attribute\n          var rules = this.rules.split(' ');\n\n          // Iterate through every rule found\n          for (var i = 0; i < rules.length; i++) {\n            var rule = rules[i].split('-');\n            var ruleSize = rule.length > 1 ? rule[0] : 'small';\n            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];\n\n            if (MenuPlugins[rulePlugin] !== null) {\n              rulesTree[ruleSize] = MenuPlugins[rulePlugin];\n            }\n          }\n\n          this.rules = rulesTree;\n        }\n\n        if (!$.isEmptyObject(this.rules)) {\n          this._checkMediaQueries();\n        }\n      }\n\n      return _init;\n    }();\n\n    /**\n     * Initializes events for the Menu.\n     * @function\n     * @private\n     */\n\n\n    ResponsiveMenu.prototype._events = function () {\n      function _events() {\n        var _this = this;\n\n        $(window).on('changed.zf.mediaquery', function () {\n          _this._checkMediaQueries();\n        });\n        // $(window).on('resize.zf.ResponsiveMenu', function() {\n        //   _this._checkMediaQueries();\n        // });\n      }\n\n      return _events;\n    }();\n\n    /**\n     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n     * @function\n     * @private\n     */\n\n\n    ResponsiveMenu.prototype._checkMediaQueries = function () {\n      function _checkMediaQueries() {\n        var matchedMq,\n            _this = this;\n        // Iterate through each rule and find the last matching rule\n        $.each(this.rules, function (key) {\n          if (Foundation.MediaQuery.atLeast(key)) {\n            matchedMq = key;\n          }\n        });\n\n        // No match? No dice\n        if (!matchedMq) return;\n\n        // Plugin already initialized? We good\n        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\n\n        // Remove existing plugin-specific CSS classes\n        $.each(MenuPlugins, function (key, value) {\n          _this.$element.removeClass(value.cssClass);\n        });\n\n        // Add the CSS class for the new plugin\n        this.$element.addClass(this.rules[matchedMq].cssClass);\n\n        // Create an instance of the new plugin\n        if (this.currentPlugin) this.currentPlugin.destroy();\n        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\n      }\n\n      return _checkMediaQueries;\n    }();\n\n    /**\n     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n     * @function\n     */\n\n\n    ResponsiveMenu.prototype.destroy = function () {\n      function destroy() {\n        this.currentPlugin.destroy();\n        $(window).off('.zf.ResponsiveMenu');\n        Foundation.unregisterPlugin(this);\n      }\n\n      return destroy;\n    }();\n\n    return ResponsiveMenu;\n  }();\n\n  ResponsiveMenu.defaults = {};\n\n  // The plugin matches the plugin classes with these plugin instances.\n  var MenuPlugins = {\n    dropdown: {\n      cssClass: 'dropdown',\n      plugin: Foundation._plugins['dropdown-menu'] || null\n    },\n    drilldown: {\n      cssClass: 'drilldown',\n      plugin: Foundation._plugins['drilldown'] || null\n    },\n    accordion: {\n      cssClass: 'accordion-menu',\n      plugin: Foundation._plugins['accordion-menu'] || null\n    }\n  };\n\n  // Window exports\n  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.responsiveMenu.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/js/foundation.responsiveMenu.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * ResponsiveMenu module.\n * @module foundation.responsiveMenu\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.accordionMenu\n * @requires foundation.util.drilldown\n * @requires foundation.util.dropdown-menu\n */\n\nclass ResponsiveMenu {\n  /**\n   * Creates a new instance of a responsive menu.\n   * @class\n   * @fires ResponsiveMenu#init\n   * @param {jQuery} element - jQuery object to make into a dropdown menu.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  constructor(element, options) {\n    this.$element = $(element);\n    this.rules = this.$element.data('responsive-menu');\n    this.currentMq = null;\n    this.currentPlugin = null;\n\n    this._init();\n    this._events();\n\n    Foundation.registerPlugin(this, 'ResponsiveMenu');\n  }\n\n  /**\n   * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\n   * @function\n   * @private\n   */\n  _init() {\n    // The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\n    if (typeof this.rules === 'string') {\n      let rulesTree = {};\n\n      // Parse rules from \"classes\" pulled from data attribute\n      let rules = this.rules.split(' ');\n\n      // Iterate through every rule found\n      for (let i = 0; i < rules.length; i++) {\n        let rule = rules[i].split('-');\n        let ruleSize = rule.length > 1 ? rule[0] : 'small';\n        let rulePlugin = rule.length > 1 ? rule[1] : rule[0];\n\n        if (MenuPlugins[rulePlugin] !== null) {\n          rulesTree[ruleSize] = MenuPlugins[rulePlugin];\n        }\n      }\n\n      this.rules = rulesTree;\n    }\n\n    if (!$.isEmptyObject(this.rules)) {\n      this._checkMediaQueries();\n    }\n  }\n\n  /**\n   * Initializes events for the Menu.\n   * @function\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    $(window).on('changed.zf.mediaquery', function() {\n      _this._checkMediaQueries();\n    });\n    // $(window).on('resize.zf.ResponsiveMenu', function() {\n    //   _this._checkMediaQueries();\n    // });\n  }\n\n  /**\n   * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n   * @function\n   * @private\n   */\n  _checkMediaQueries() {\n    var matchedMq, _this = this;\n    // Iterate through each rule and find the last matching rule\n    $.each(this.rules, function(key) {\n      if (Foundation.MediaQuery.atLeast(key)) {\n        matchedMq = key;\n      }\n    });\n\n    // No match? No dice\n    if (!matchedMq) return;\n\n    // Plugin already initialized? We good\n    if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\n\n    // Remove existing plugin-specific CSS classes\n    $.each(MenuPlugins, function(key, value) {\n      _this.$element.removeClass(value.cssClass);\n    });\n\n    // Add the CSS class for the new plugin\n    this.$element.addClass(this.rules[matchedMq].cssClass);\n\n    // Create an instance of the new plugin\n    if (this.currentPlugin) this.currentPlugin.destroy();\n    this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\n  }\n\n  /**\n   * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n   * @function\n   */\n  destroy() {\n    this.currentPlugin.destroy();\n    $(window).off('.zf.ResponsiveMenu');\n    Foundation.unregisterPlugin(this);\n  }\n}\n\nResponsiveMenu.defaults = {};\n\n// The plugin matches the plugin classes with these plugin instances.\nvar MenuPlugins = {\n  dropdown: {\n    cssClass: 'dropdown',\n    plugin: Foundation._plugins['dropdown-menu'] || null\n  },\n drilldown: {\n    cssClass: 'drilldown',\n    plugin: Foundation._plugins['drilldown'] || null\n  },\n  accordion: {\n    cssClass: 'accordion-menu',\n    plugin: Foundation._plugins['accordion-menu'] || null\n  }\n};\n\n// Window exports\nFoundation.plugin(ResponsiveMenu, 'ResponsiveMenu');\n\n}(jQuery);\n"]},"hash":"ee9ac9f77481321acc4a953fb5a0614ce7e43406"}
