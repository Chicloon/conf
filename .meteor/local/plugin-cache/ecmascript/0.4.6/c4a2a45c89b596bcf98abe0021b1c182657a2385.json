{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.interchange.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.interchange.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.interchange.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.interchange.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.interchange"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * Interchange module.\n   * @module foundation.interchange\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.timerAndImageLoader\n   */\n\n  var Interchange = function () {\n    /**\n     * Creates a new instance of Interchange.\n     * @class\n     * @fires Interchange#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Interchange(element, options) {\n      (0, _classCallCheck3['default'])(this, Interchange);\n\n      this.$element = element;\n      this.options = $.extend({}, Interchange.defaults, options);\n      this.rules = [];\n      this.currentPath = '';\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'Interchange');\n    }\n\n    /**\n     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n     * @function\n     * @private\n     */\n\n\n    Interchange.prototype._init = function () {\n      function _init() {\n        this._addBreakpoints();\n        this._generateRules();\n        this._reflow();\n      }\n\n      return _init;\n    }();\n\n    /**\n     * Initializes events for Interchange.\n     * @function\n     * @private\n     */\n\n\n    Interchange.prototype._events = function () {\n      function _events() {\n        $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));\n      }\n\n      return _events;\n    }();\n\n    /**\n     * Calls necessary functions to update Interchange upon DOM change\n     * @function\n     * @private\n     */\n\n\n    Interchange.prototype._reflow = function () {\n      function _reflow() {\n        var match;\n\n        // Iterate through each rule, but only save the last match\n        for (var i in meteorBabelHelpers.sanitizeForInObject(this.rules)) {\n          if (this.rules.hasOwnProperty(i)) {\n            var rule = this.rules[i];\n\n            if (window.matchMedia(rule.query).matches) {\n              match = rule;\n            }\n          }\n        }\n\n        if (match) {\n          this.replace(match.path);\n        }\n      }\n\n      return _reflow;\n    }();\n\n    /**\n     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n     * @function\n     * @private\n     */\n\n\n    Interchange.prototype._addBreakpoints = function () {\n      function _addBreakpoints() {\n        for (var i in meteorBabelHelpers.sanitizeForInObject(Foundation.MediaQuery.queries)) {\n          if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {\n            var query = Foundation.MediaQuery.queries[i];\n            Interchange.SPECIAL_QUERIES[query.name] = query.value;\n          }\n        }\n      }\n\n      return _addBreakpoints;\n    }();\n\n    /**\n     * Checks the Interchange element for the provided media query + content pairings\n     * @function\n     * @private\n     * @param {Object} element - jQuery object that is an Interchange instance\n     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n     */\n\n\n    Interchange.prototype._generateRules = function () {\n      function _generateRules(element) {\n        var rulesList = [];\n        var rules;\n\n        if (this.options.rules) {\n          rules = this.options.rules;\n        } else {\n          rules = this.$element.data('interchange').match(/\\[.*?\\]/g);\n        }\n\n        for (var i in meteorBabelHelpers.sanitizeForInObject(rules)) {\n          if (rules.hasOwnProperty(i)) {\n            var rule = rules[i].slice(1, -1).split(', ');\n            var path = rule.slice(0, -1).join('');\n            var query = rule[rule.length - 1];\n\n            if (Interchange.SPECIAL_QUERIES[query]) {\n              query = Interchange.SPECIAL_QUERIES[query];\n            }\n\n            rulesList.push({\n              path: path,\n              query: query\n            });\n          }\n        }\n\n        this.rules = rulesList;\n      }\n\n      return _generateRules;\n    }();\n\n    /**\n     * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n     * @function\n     * @param {String} path - Path to the image or HTML partial.\n     * @fires Interchange#replaced\n     */\n\n\n    Interchange.prototype.replace = function () {\n      function replace(path) {\n        if (this.currentPath === path) return;\n\n        var _this = this,\n            trigger = 'replaced.zf.interchange';\n\n        // Replacing images\n        if (this.$element[0].nodeName === 'IMG') {\n          this.$element.attr('src', path).load(function () {\n            _this.currentPath = path;\n          }).trigger(trigger);\n        }\n        // Replacing background images\n        else if (path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\n            this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);\n          }\n          // Replacing HTML\n          else {\n              $.get(path, function (response) {\n                _this.$element.html(response).trigger(trigger);\n                $(response).foundation();\n                _this.currentPath = path;\n              });\n            }\n\n        /**\n         * Fires when content in an Interchange element is done being loaded.\n         * @event Interchange#replaced\n         */\n        // this.$element.trigger('replaced.zf.interchange');\n      }\n\n      return replace;\n    }();\n\n    /**\n     * Destroys an instance of interchange.\n     * @function\n     */\n\n\n    Interchange.prototype.destroy = function () {\n      function destroy() {\n        //TODO this.\n      }\n\n      return destroy;\n    }();\n\n    return Interchange;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Interchange.defaults = {\n    /**\n     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n     * @option\n     */\n    rules: null\n  };\n\n  Interchange.SPECIAL_QUERIES = {\n    'landscape': 'screen and (orientation: landscape)',\n    'portrait': 'screen and (orientation: portrait)',\n    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n  };\n\n  // Window exports\n  Foundation.plugin(Interchange, 'Interchange');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.interchange.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/js/foundation.interchange.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * Interchange module.\n * @module foundation.interchange\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.timerAndImageLoader\n */\n\nclass Interchange {\n  /**\n   * Creates a new instance of Interchange.\n   * @class\n   * @fires Interchange#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  constructor(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Interchange.defaults, options);\n    this.rules = [];\n    this.currentPath = '';\n\n    this._init();\n    this._events();\n\n    Foundation.registerPlugin(this, 'Interchange');\n  }\n\n  /**\n   * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n   * @function\n   * @private\n   */\n  _init() {\n    this._addBreakpoints();\n    this._generateRules();\n    this._reflow();\n  }\n\n  /**\n   * Initializes events for Interchange.\n   * @function\n   * @private\n   */\n  _events() {\n    $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));\n  }\n\n  /**\n   * Calls necessary functions to update Interchange upon DOM change\n   * @function\n   * @private\n   */\n  _reflow() {\n    var match;\n\n    // Iterate through each rule, but only save the last match\n    for (var i in this.rules) {\n      if(this.rules.hasOwnProperty(i)) {\n        var rule = this.rules[i];\n\n        if (window.matchMedia(rule.query).matches) {\n          match = rule;\n        }\n      }\n    }\n\n    if (match) {\n      this.replace(match.path);\n    }\n  }\n\n  /**\n   * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n   * @function\n   * @private\n   */\n  _addBreakpoints() {\n    for (var i in Foundation.MediaQuery.queries) {\n      if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {\n        var query = Foundation.MediaQuery.queries[i];\n        Interchange.SPECIAL_QUERIES[query.name] = query.value;\n      }\n    }\n  }\n\n  /**\n   * Checks the Interchange element for the provided media query + content pairings\n   * @function\n   * @private\n   * @param {Object} element - jQuery object that is an Interchange instance\n   * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n   */\n  _generateRules(element) {\n    var rulesList = [];\n    var rules;\n\n    if (this.options.rules) {\n      rules = this.options.rules;\n    }\n    else {\n      rules = this.$element.data('interchange').match(/\\[.*?\\]/g);\n    }\n\n    for (var i in rules) {\n      if(rules.hasOwnProperty(i)) {\n        var rule = rules[i].slice(1, -1).split(', ');\n        var path = rule.slice(0, -1).join('');\n        var query = rule[rule.length - 1];\n\n        if (Interchange.SPECIAL_QUERIES[query]) {\n          query = Interchange.SPECIAL_QUERIES[query];\n        }\n\n        rulesList.push({\n          path: path,\n          query: query\n        });\n      }\n    }\n\n    this.rules = rulesList;\n  }\n\n  /**\n   * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n   * @function\n   * @param {String} path - Path to the image or HTML partial.\n   * @fires Interchange#replaced\n   */\n  replace(path) {\n    if (this.currentPath === path) return;\n\n    var _this = this,\n        trigger = 'replaced.zf.interchange';\n\n    // Replacing images\n    if (this.$element[0].nodeName === 'IMG') {\n      this.$element.attr('src', path).load(function() {\n        _this.currentPath = path;\n      })\n      .trigger(trigger);\n    }\n    // Replacing background images\n    else if (path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\n      this.$element.css({ 'background-image': 'url('+path+')' })\n          .trigger(trigger);\n    }\n    // Replacing HTML\n    else {\n      $.get(path, function(response) {\n        _this.$element.html(response)\n             .trigger(trigger);\n        $(response).foundation();\n        _this.currentPath = path;\n      });\n    }\n\n    /**\n     * Fires when content in an Interchange element is done being loaded.\n     * @event Interchange#replaced\n     */\n    // this.$element.trigger('replaced.zf.interchange');\n  }\n\n  /**\n   * Destroys an instance of interchange.\n   * @function\n   */\n  destroy() {\n    //TODO this.\n  }\n}\n\n/**\n * Default settings for plugin\n */\nInterchange.defaults = {\n  /**\n   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n   * @option\n   */\n  rules: null\n};\n\nInterchange.SPECIAL_QUERIES = {\n  'landscape': 'screen and (orientation: landscape)',\n  'portrait': 'screen and (orientation: portrait)',\n  'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n};\n\n// Window exports\nFoundation.plugin(Interchange, 'Interchange');\n\n}(jQuery);\n"]},"hash":"c4a2a45c89b596bcf98abe0021b1c182657a2385"}
