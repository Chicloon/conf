{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js","filenameRelative":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js.map","sourceFileName":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"autocompleteBehavior"},"ignored":false,"code":"/*jslint vars: true*/\n/*global describe, it, expect, waits, waitsFor, runs, afterEach, spyOn, $*/\n\ndescribe('Autocomplete', function () {\n    'use strict';\n\n    afterEach(function () {\n        $('.autocomplete-suggestions').hide();\n    });\n\n    it('Should initialize autocomplete options', function () {\n        var input = document.createElement('input'),\n            options = { serviceUrl: '/autocomplete/service/url' },\n            autocomplete = new $.Autocomplete(input, options);\n\n        expect(autocomplete.options.serviceUrl).toEqual(options.serviceUrl);\n        expect(autocomplete.suggestionsContainer).not.toBeNull();\n    });\n\n    it('Should set autocomplete attribute to \"off\"', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {});\n\n        expect(autocomplete).not.toBeNull();\n        expect(input.getAttribute('autocomplete')).toEqual('off');\n    });\n\n    it('Should get current value', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: [{ value: 'Jamaica', data: 'B' }]\n        });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.currentValue).toEqual('Jam');\n    });\n\n    it('Should call formatResult three times', function () {\n        var input = document.createElement('input'),\n            counter = 0,\n            suggestion,\n            currentValue,\n            autocomplete = new $.Autocomplete(input, {\n            lookup: ['Jamaica', 'Jamaica', 'Jamaica'],\n            formatResult: function () {\n                function formatResult(s, v) {\n                    suggestion = s;\n                    currentValue = v;\n                    counter += 1;\n                }\n\n                return formatResult;\n            }()\n        });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(suggestion.value).toBe('Jamaica');\n        expect(suggestion.data).toBe(null);\n        expect(currentValue).toEqual('Jam');\n        expect(counter).toEqual(3);\n    });\n\n    it('Verify onSelect callback', function () {\n        var input = document.createElement('input'),\n            context,\n            value,\n            data,\n            autocomplete = $(input).autocomplete({\n            lookup: [{ value: 'A', data: 'B' }],\n            triggerSelectOnValidInput: false,\n            onSelect: function () {\n                function onSelect(suggestion) {\n                    context = this;\n                    value = suggestion.value;\n                    data = suggestion.data;\n                }\n\n                return onSelect;\n            }()\n        }).autocomplete();\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n        autocomplete.select(0);\n\n        expect(context).toEqual(input);\n        expect(value).toEqual('A');\n        expect(data).toEqual('B');\n    });\n\n    it('Should convert suggestions format', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: ['A', 'B']\n        });\n\n        expect(autocomplete.options.lookup[0].value).toBe('A');\n        expect(autocomplete.options.lookup[1].value).toBe('B');\n    });\n\n    it('Should execute onSearchStart', function () {\n        var input = document.createElement('input'),\n            startQuery,\n            ajaxExecuted = false,\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: '/test',\n            onSearchStart: function () {\n                function onSearchStart(params) {\n                    startQuery = params.query;\n                }\n\n                return onSearchStart;\n            }()\n        });\n\n        $.mockjax({\n            url: '/test',\n            responseTime: 50,\n            response: function () {\n                function response(settings) {\n                    ajaxExecuted = true;\n                    var query = settings.data.query,\n                        response = {\n                        query: query,\n                        suggestions: []\n                    };\n                    this.responseText = JSON.stringify(response);\n                }\n\n                return response;\n            }()\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(startQuery).toBe('A');\n        });\n    });\n\n    it('Should execute onSearchComplete', function () {\n        var input = document.createElement('input'),\n            completeQuery,\n            ajaxExecuted = false,\n            url = '/test-completed',\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: url,\n            onSearchComplete: function () {\n                function onSearchComplete(query) {\n                    completeQuery = query;\n                }\n\n                return onSearchComplete;\n            }()\n        });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                function response(settings) {\n                    ajaxExecuted = true;\n                    var query = settings.data.query,\n                        response = {\n                        query: query,\n                        suggestions: []\n                    };\n                    this.responseText = JSON.stringify(response);\n                }\n\n                return response;\n            }()\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(completeQuery).toBe('A');\n        });\n    });\n\n    it('Should execute onSearchError', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            errorMessage = false,\n            url = '/test-error',\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: url,\n            onSearchError: function () {\n                function onSearchError(q, jqXHR, textStatus, errorThrown) {\n                    errorMessage = jqXHR.responseText;\n                }\n\n                return onSearchError;\n            }()\n        });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            status: 500,\n            response: function () {\n                function response(settings) {\n                    ajaxExecuted = true;\n                    this.responseText = \"An error occurred\";\n                }\n\n                return response;\n            }()\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(errorMessage).toBe(\"An error occurred\");\n        });\n    });\n\n    it('Should transform results', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            url = '/test-transform',\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: url,\n            transformResult: function () {\n                function transformResult(result, query) {\n                    return {\n                        query: query,\n                        suggestions: $.map(result.split(','), function (item) {\n                            return { value: item, data: null };\n                        })\n                    };\n                }\n\n                return transformResult;\n            }()\n        });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                function response() {\n                    ajaxExecuted = true;\n                    this.responseText = 'Andora,Angola,Argentina';\n                }\n\n                return response;\n            }()\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(autocomplete.suggestions.length).toBe(3);\n            expect(autocomplete.suggestions[0].value).toBe('Andora');\n        });\n    });\n\n    it('Should not require orginal query value from the server', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            url = '/test-original-query',\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: url\n        });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                function response() {\n                    ajaxExecuted = true;\n                    var response = {\n                        query: null,\n                        suggestions: ['Aa', 'Bb', 'Cc']\n                    };\n                    this.responseText = JSON.stringify(response);\n                }\n\n                return response;\n            }()\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(autocomplete.suggestions.length).toBe(3);\n            expect(autocomplete.suggestions[0].value).toBe('Aa');\n        });\n    });\n\n    it('Should should not preventDefault when tabDisabled is set to false', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: [{ value: 'Jamaica', data: 'B' }],\n            tabDisabled: false,\n            autoSelectFirst: true\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        var event = $.Event('keydown');\n        event.which = 9; // the tab keycode\n        spyOn(event, 'stopImmediatePropagation');\n        spyOn(event, 'preventDefault');\n        spyOn(autocomplete, 'suggest');\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.disabled).toBe(undefined);\n        expect(autocomplete.selectedIndex).not.toBe(-1);\n\n        $(input).trigger(event);\n\n        expect(event.stopImmediatePropagation).not.toHaveBeenCalled();\n        expect(event.preventDefault).not.toHaveBeenCalled();\n        expect(autocomplete.suggest).not.toHaveBeenCalled();\n    });\n\n    it('Should should preventDefault when tabDisabled is set to true', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: [{ value: 'Jamaica', data: 'B' }],\n            tabDisabled: true,\n            autoSelectFirst: true\n        });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        var event = $.Event('keydown');\n        event.which = 9; // the tab keycode\n        spyOn(event, 'stopImmediatePropagation');\n        spyOn(event, 'preventDefault');\n        spyOn(autocomplete, 'suggest');\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.disabled).toBe(undefined);\n        expect(autocomplete.selectedIndex).not.toBe(-1);\n\n        $(input).trigger(event);\n\n        expect(event.stopImmediatePropagation).toHaveBeenCalled();\n        expect(event.preventDefault).toHaveBeenCalled();\n        expect(autocomplete.suggest).not.toHaveBeenCalled();\n    });\n\n    it('Should not autoselect first item by default', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: ['Jamaica', 'Jamaica', 'Jamaica']\n        });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.selectedIndex).toBe(-1);\n    });\n\n    it('Should autoselect first item autoSelectFirst set to true', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n            lookup: ['Jamaica', 'Jamaica', 'Jamaica'],\n            autoSelectFirst: true\n        });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.selectedIndex).toBe(0);\n    });\n\n    it('Should use custom query parameter name', function () {\n        var input = document.createElement('input'),\n            paramName = 'custom',\n            paramValue = null,\n            autocomplete = new $.Autocomplete(input, {\n            serviceUrl: '/test-query',\n            paramName: paramName\n        });\n\n        $.mockjax({\n            url: '/test-query',\n            responseTime: 5,\n            response: function () {\n                function response(settings) {\n                    paramValue = settings.data[paramName];\n                    var response = {\n                        query: paramValue,\n                        suggestions: []\n                    };\n                    this.responseText = JSON.stringify(response);\n                }\n\n                return response;\n            }()\n        });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(paramValue).toBe('Jam');\n        });\n    });\n\n    it('Should destroy autocomplete instance', function () {\n        var input = $(document.createElement('input')),\n            div = $(document.createElement('div'));\n\n        input.autocomplete({\n            serviceUrl: '/test-dispose',\n            appendTo: div\n        });\n\n        expect(input.data('autocomplete')).toBeDefined();\n        expect(div.children().length).toBeGreaterThan(0);\n\n        input.autocomplete('dispose');\n\n        expect(input.data('autocomplete')).toBeUndefined();\n        expect(div.children().length).toBe(0);\n    });\n\n    it('Should return Autocomplete instance if called without arguments', function () {\n        var input = $(document.createElement('input'));\n\n        input.autocomplete({\n            serviceUrl: '/test-dispose'\n        });\n\n        var instance = input.autocomplete();\n\n        expect(instance instanceof $.Autocomplete).toBe(true);\n    });\n\n    it('Should construct serviceUrl via callback function.', function () {\n        var input = $(document.createElement('input')),\n            dynamicUrl,\n            data;\n\n        input.autocomplete({\n            ignoreParams: true,\n            serviceUrl: function () {\n                function serviceUrl(query) {\n                    return '/dynamic-url/' + encodeURIComponent(query).replace(/%20/g, \"+\");\n                }\n\n                return serviceUrl;\n            }()\n        });\n\n        $.mockjax({\n            url: '/dynamic-url/*',\n            responseTime: 5,\n            response: function () {\n                function response(settings) {\n                    dynamicUrl = settings.url;\n                    data = settings.data;\n                    var response = {\n                        suggestions: []\n                    };\n                    this.responseText = JSON.stringify(response);\n                }\n\n                return response;\n            }()\n        });\n\n        input.val('Hello World');\n        input.autocomplete().onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(dynamicUrl).toBe('/dynamic-url/Hello+World');\n            expect(data).toBeFalsy();\n        });\n    });\n\n    it('Should set width to be greater than zero', function () {\n        var input = $(document.createElement('input')),\n            instance,\n            width;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'B' }]\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n        width = $(instance.suggestionsContainer).width();\n\n        expect(width).toBeGreaterThan(0);\n    });\n\n    it('Should call beforeRender and pass container jQuery object', function () {\n        var element = document.createElement('input'),\n            input = $(element),\n            instance,\n            elementCount,\n            context;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'B' }],\n            beforeRender: function () {\n                function beforeRender(container) {\n                    context = this;\n                    elementCount = container.length;\n                }\n\n                return beforeRender;\n            }()\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(context).toBe(element);\n        expect(elementCount).toBe(1);\n    });\n\n    it('Should trigger select when input value matches suggestion', function () {\n        var input = $('<input />'),\n            instance,\n            suggestionData = false;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'J' }],\n            triggerSelectOnValidInput: true,\n            onSelect: function () {\n                function onSelect(suggestion) {\n                    suggestionData = suggestion.data;\n                }\n\n                return onSelect;\n            }()\n        });\n\n        input.val('Jamaica');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(suggestionData).toBe('J');\n    });\n\n    it('Should NOT trigger select when input value matches suggestion', function () {\n        var input = $('<input />'),\n            instance,\n            suggestionData = null;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'J' }],\n            triggerSelectOnValidInput: false,\n            onSelect: function () {\n                function onSelect(suggestion) {\n                    suggestionData = suggestion.data;\n                }\n\n                return onSelect;\n            }()\n        });\n\n        input.val('Jamaica');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(suggestionData).toBeNull();\n    });\n\n    it('Should use serviceUrl and params as cacheKey', function () {\n        var input = $('<input />'),\n            instance,\n            ajaxExecuted = false,\n            data = { a: 1, query: 'Jam' },\n            serviceUrl = '/autocomplete/cached/url',\n            cacheKey = serviceUrl + '?' + $.param(data);\n\n        input.autocomplete({\n            serviceUrl: serviceUrl,\n            params: data\n        });\n\n        $.mockjax({\n            url: serviceUrl,\n            responseTime: 5,\n            response: function () {\n                function response(settings) {\n                    ajaxExecuted = true;\n                    var query = settings.data.query,\n                        response = {\n                        suggestions: [{ value: 'Jamaica' }, { value: 'Jamaica' }]\n                    };\n                    this.responseText = JSON.stringify(response);\n                }\n\n                return response;\n            }()\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(instance.cachedResponse[cacheKey]).toBeTruthy();\n        });\n    });\n\n    it('Should limit results for local request', function () {\n        var input = $('<input />'),\n            instance,\n            limit = 3;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }]\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        // Expect all items to be displayed:\n        expect(instance.suggestions.length).toBe(5);\n\n        // Set lookup result limit and verify:\n        instance.setOptions({ lookupLimit: limit });\n        instance.onValueChange();\n\n        expect(instance.suggestions.length).toBe(limit);\n    });\n});","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/vendor/jquery.autocomplete/spec/autocompleteBehavior.js.map","sourcesContent":["﻿/*jslint vars: true*/\n/*global describe, it, expect, waits, waitsFor, runs, afterEach, spyOn, $*/\n\ndescribe('Autocomplete', function () {\n    'use strict';\n\n    afterEach(function () {\n        $('.autocomplete-suggestions').hide();\n    });\n\n    it('Should initialize autocomplete options', function () {\n        var input = document.createElement('input'),\n            options = { serviceUrl: '/autocomplete/service/url' },\n            autocomplete = new $.Autocomplete(input, options);\n\n        expect(autocomplete.options.serviceUrl).toEqual(options.serviceUrl);\n        expect(autocomplete.suggestionsContainer).not.toBeNull();\n    });\n\n    it('Should set autocomplete attribute to \"off\"', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {});\n\n        expect(autocomplete).not.toBeNull();\n        expect(input.getAttribute('autocomplete')).toEqual('off');\n    });\n\n    it('Should get current value', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: [{ value: 'Jamaica', data: 'B' }]\n            });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.currentValue).toEqual('Jam');\n    });\n\n    it('Should call formatResult three times', function () {\n        var input = document.createElement('input'),\n            counter = 0,\n            suggestion,\n            currentValue,\n            autocomplete = new $.Autocomplete(input, {\n                lookup: ['Jamaica', 'Jamaica', 'Jamaica'],\n                formatResult: function (s, v) {\n                    suggestion = s;\n                    currentValue = v;\n                    counter += 1;\n                }\n            });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(suggestion.value).toBe('Jamaica');\n        expect(suggestion.data).toBe(null);\n        expect(currentValue).toEqual('Jam');\n        expect(counter).toEqual(3);\n    });\n\n    it('Verify onSelect callback', function () {\n        var input = document.createElement('input'),\n            context,\n            value,\n            data,\n            autocomplete = $(input).autocomplete({\n                lookup: [{ value: 'A', data: 'B' }],\n                triggerSelectOnValidInput: false,\n                onSelect: function (suggestion) {\n                    context = this;\n                    value = suggestion.value;\n                    data = suggestion.data;\n                }\n            }).autocomplete();\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n        autocomplete.select(0);\n\n        expect(context).toEqual(input);\n        expect(value).toEqual('A');\n        expect(data).toEqual('B');\n    });\n\n    it('Should convert suggestions format', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: ['A', 'B']\n            });\n\n        expect(autocomplete.options.lookup[0].value).toBe('A');\n        expect(autocomplete.options.lookup[1].value).toBe('B');\n    });\n\n    it('Should execute onSearchStart', function () {\n        var input = document.createElement('input'),\n            startQuery,\n            ajaxExecuted = false,\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: '/test',\n                onSearchStart: function (params) {\n                    startQuery = params.query;\n                }\n            });\n\n        $.mockjax({\n            url: '/test',\n            responseTime: 50,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                        query: query,\n                        suggestions: []\n                    };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(startQuery).toBe('A');\n        });\n    });\n\n    it('Should execute onSearchComplete', function () {\n        var input = document.createElement('input'),\n            completeQuery,\n            ajaxExecuted = false,\n            url = '/test-completed',\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: url,\n                onSearchComplete: function (query) {\n                    completeQuery = query;\n                }\n            });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                        query: query,\n                        suggestions: []\n                    };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(completeQuery).toBe('A');\n        });\n    });\n\n    it('Should execute onSearchError', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            errorMessage = false,\n            url = '/test-error',\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: url,\n                onSearchError: function (q, jqXHR, textStatus, errorThrown) {\n                    errorMessage = jqXHR.responseText;\n                }\n            });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            status: 500,\n            response: function (settings) {\n                ajaxExecuted = true;\n                this.responseText = \"An error occurred\";\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(errorMessage).toBe(\"An error occurred\");\n        });\n    });\n\n    it('Should transform results', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            url = '/test-transform',\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: url,\n                transformResult: function (result, query) {\n                    return {\n                        query: query,\n                        suggestions: $.map(result.split(','), function (item) {\n                            return { value: item, data: null };\n                        })\n                    };\n                }\n            });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                ajaxExecuted = true;\n                this.responseText = 'Andora,Angola,Argentina';\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(autocomplete.suggestions.length).toBe(3);\n            expect(autocomplete.suggestions[0].value).toBe('Andora');\n        });\n    });\n\n    it('Should not require orginal query value from the server', function () {\n        var input = document.createElement('input'),\n            ajaxExecuted = false,\n            url = '/test-original-query',\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: url\n            });\n\n        $.mockjax({\n            url: url,\n            responseTime: 50,\n            response: function () {\n                ajaxExecuted = true;\n                var response = {\n                    query: null,\n                    suggestions: ['Aa', 'Bb', 'Cc']\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.value = 'A';\n        autocomplete.onValueChange();\n\n        waitsFor(function () {\n            return ajaxExecuted;\n        }, 'Ajax call never completed.', 100);\n\n        runs(function () {\n            expect(ajaxExecuted).toBe(true);\n            expect(autocomplete.suggestions.length).toBe(3);\n            expect(autocomplete.suggestions[0].value).toBe('Aa');\n        });\n    });\n\n    it('Should should not preventDefault when tabDisabled is set to false', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: [{ value: 'Jamaica', data: 'B' }],\n                tabDisabled: false,\n                autoSelectFirst: true\n            });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        var event = $.Event('keydown');\n        event.which = 9; // the tab keycode\n        spyOn(event, 'stopImmediatePropagation');\n        spyOn(event, 'preventDefault');\n        spyOn(autocomplete, 'suggest');\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.disabled).toBe(undefined);\n        expect(autocomplete.selectedIndex).not.toBe(-1);\n\n        $(input).trigger(event);\n\n        expect(event.stopImmediatePropagation).not.toHaveBeenCalled();\n        expect(event.preventDefault).not.toHaveBeenCalled();\n        expect(autocomplete.suggest).not.toHaveBeenCalled();\n    });\n\n    it('Should should preventDefault when tabDisabled is set to true', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: [{ value: 'Jamaica', data: 'B' }],\n                tabDisabled: true,\n                autoSelectFirst: true\n            });\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        var event = $.Event('keydown');\n        event.which = 9; // the tab keycode\n        spyOn(event, 'stopImmediatePropagation');\n        spyOn(event, 'preventDefault');\n        spyOn(autocomplete, 'suggest');\n\n        expect(autocomplete.visible).toBe(true);\n        expect(autocomplete.disabled).toBe(undefined);\n        expect(autocomplete.selectedIndex).not.toBe(-1);\n\n        $(input).trigger(event);\n\n        expect(event.stopImmediatePropagation).toHaveBeenCalled();\n        expect(event.preventDefault).toHaveBeenCalled();\n        expect(autocomplete.suggest).not.toHaveBeenCalled();\n    });\n\n    it('Should not autoselect first item by default', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: ['Jamaica', 'Jamaica', 'Jamaica']\n            });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.selectedIndex).toBe(-1);\n    });\n\n    it('Should autoselect first item autoSelectFirst set to true', function () {\n        var input = document.createElement('input'),\n            autocomplete = new $.Autocomplete(input, {\n                lookup: ['Jamaica', 'Jamaica', 'Jamaica'],\n                autoSelectFirst: true\n            });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        expect(autocomplete.selectedIndex).toBe(0);\n    });\n\n    it('Should use custom query parameter name', function () {\n        var input = document.createElement('input'),\n            paramName = 'custom',\n            paramValue = null,\n            autocomplete = new $.Autocomplete(input, {\n                serviceUrl: '/test-query',\n                paramName: paramName\n            });\n\n        $.mockjax({\n            url: '/test-query',\n            responseTime: 5,\n            response: function (settings) {\n                paramValue = settings.data[paramName];\n                var response = {\n                    query: paramValue,\n                    suggestions: []\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.value = 'Jam';\n        autocomplete.onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(paramValue).toBe('Jam');\n        });\n    });\n\n    it('Should destroy autocomplete instance', function () {\n        var input = $(document.createElement('input')),\n            div = $(document.createElement('div'));\n\n        input.autocomplete({\n            serviceUrl: '/test-dispose',\n            appendTo: div\n        });\n\n        expect(input.data('autocomplete')).toBeDefined();\n        expect(div.children().length).toBeGreaterThan(0);\n\n        input.autocomplete('dispose');\n\n        expect(input.data('autocomplete')).toBeUndefined();\n        expect(div.children().length).toBe(0);\n    });\n\n    it('Should return Autocomplete instance if called without arguments', function () {\n        var input = $(document.createElement('input'));\n\n        input.autocomplete({\n            serviceUrl: '/test-dispose'\n        });\n\n        var instance = input.autocomplete();\n\n        expect(instance instanceof $.Autocomplete).toBe(true);\n    });\n\n    it('Should construct serviceUrl via callback function.', function () {\n        var input = $(document.createElement('input')),\n            dynamicUrl,\n            data;\n\n        input.autocomplete({\n            ignoreParams: true,\n            serviceUrl: function (query) {\n                return '/dynamic-url/' + encodeURIComponent(query).replace(/%20/g, \"+\");\n            }\n        });\n\n        $.mockjax({\n            url: '/dynamic-url/*',\n            responseTime: 5,\n            response: function (settings) {\n                dynamicUrl = settings.url;\n                data = settings.data;\n                var response = {\n                    suggestions: []\n                };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.val('Hello World');\n        input.autocomplete().onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(dynamicUrl).toBe('/dynamic-url/Hello+World');\n            expect(data).toBeFalsy();\n        });\n    });\n\n    it('Should set width to be greater than zero', function () {\n        var input = $(document.createElement('input')),\n            instance,\n            width;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'B' }]\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n        width = $(instance.suggestionsContainer).width();\n\n        expect(width).toBeGreaterThan(0);\n    });\n\n    it('Should call beforeRender and pass container jQuery object', function () {\n        var element = document.createElement('input'),\n            input = $(element),\n            instance,\n            elementCount,\n            context;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'B' }],\n            beforeRender: function (container) {\n                context = this;\n                elementCount = container.length;\n            }\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(context).toBe(element);\n        expect(elementCount).toBe(1);\n    });\n\n    it('Should trigger select when input value matches suggestion', function () {\n        var input = $('<input />'),\n            instance,\n            suggestionData = false;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'J' }],\n            triggerSelectOnValidInput: true,\n            onSelect: function (suggestion) {\n                suggestionData = suggestion.data;\n            }\n        });\n\n        input.val('Jamaica');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(suggestionData).toBe('J');\n    });\n\n    it('Should NOT trigger select when input value matches suggestion', function () {\n        var input = $('<input />'),\n            instance,\n            suggestionData = null;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica', data: 'J' }],\n            triggerSelectOnValidInput: false,\n            onSelect: function (suggestion) {\n                suggestionData = suggestion.data;\n            }\n        });\n\n        input.val('Jamaica');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        expect(suggestionData).toBeNull();\n    });\n\n    it('Should use serviceUrl and params as cacheKey', function () {\n        var input = $('<input />'),\n            instance,\n            ajaxExecuted = false,\n            data = { a: 1, query: 'Jam' },\n            serviceUrl = '/autocomplete/cached/url',\n            cacheKey = serviceUrl + '?' + $.param(data);\n\n        input.autocomplete({\n            serviceUrl: serviceUrl,\n            params: data\n        });\n\n        $.mockjax({\n            url: serviceUrl,\n            responseTime: 5,\n            response: function (settings) {\n                ajaxExecuted = true;\n                var query = settings.data.query,\n                    response = {\n                        suggestions: [{ value: 'Jamaica' }, { value: 'Jamaica' }]\n                    };\n                this.responseText = JSON.stringify(response);\n            }\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        waits(10);\n\n        runs(function () {\n            expect(instance.cachedResponse[cacheKey]).toBeTruthy();\n        });\n    });\n\n    it('Should limit results for local request', function () {\n        var input = $('<input />'),\n            instance,\n            limit = 3;\n\n        input.autocomplete({\n            lookup: [{ value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }, { value: 'Jamaica' }]\n        });\n\n        input.val('Jam');\n        instance = input.autocomplete();\n        instance.onValueChange();\n\n        // Expect all items to be displayed:\n        expect(instance.suggestions.length).toBe(5);\n\n        // Set lookup result limit and verify:\n        instance.setOptions({ lookupLimit: limit });\n        instance.onValueChange();\n\n        expect(instance.suggestions.length).toBe(limit);\n    });\n});"]},"hash":"e9f066e8aa3ce38ca1f367936be0651f7905e065"}
