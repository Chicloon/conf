{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/dist/plugins/foundation.equalizer.js","filenameRelative":"/packages/zurb:foundation-sites/dist/plugins/foundation.equalizer.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/dist/plugins/foundation.equalizer.js.map","sourceFileName":"/packages/zurb:foundation-sites/dist/plugins/foundation.equalizer.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.equalizer"},"ignored":false,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n!function ($) {\n\n  /**\n   * Equalizer module.\n   * @module foundation.equalizer\n   */\n\n  var Equalizer = function () {\n    /**\n     * Creates a new instance of Equalizer.\n     * @class\n     * @fires Equalizer#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Equalizer(element, options) {\n      _classCallCheck(this, Equalizer);\n\n      this.$element = element;\n      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Equalizer');\n    }\n\n    /**\n     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */\n\n    _createClass(Equalizer, [{\n      key: '_init',\n      value: function () {\n        function _init() {\n          var eqId = this.$element.attr('data-equalizer') || '';\n          var $watched = this.$element.find('[data-equalizer-watch=\"' + eqId + '\"]');\n\n          this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n          this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));\n\n          this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n          this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n          this.isOn = false;\n          this._bindHandler = {\n            onResizeMeBound: this._onResizeMe.bind(this),\n            onPostEqualizedBound: this._onPostEqualized.bind(this)\n          };\n\n          var imgs = this.$element.find('img');\n          var tooSmall;\n          if (this.options.equalizeOn) {\n            tooSmall = this._checkMQ();\n            $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n          } else {\n            this._events();\n          }\n          if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {\n            if (imgs.length) {\n              Foundation.onImagesLoaded(imgs, this._reflow.bind(this));\n            } else {\n              this._reflow();\n            }\n          }\n        }\n\n        return _init;\n      }()\n\n      /**\n       * Removes event listeners if the breakpoint is too small.\n       * @private\n       */\n\n    }, {\n      key: '_pauseEvents',\n      value: function () {\n        function _pauseEvents() {\n          this.isOn = false;\n          this.$element.off({\n            '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n            'resizeme.zf.trigger': this._bindHandler.onResizeMeBound\n          });\n        }\n\n        return _pauseEvents;\n      }()\n\n      /**\n       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n       * @private\n       */\n\n    }, {\n      key: '_onResizeMe',\n      value: function () {\n        function _onResizeMe(e) {\n          this._reflow();\n        }\n\n        return _onResizeMe;\n      }()\n\n      /**\n       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n       * @private\n       */\n\n    }, {\n      key: '_onPostEqualized',\n      value: function () {\n        function _onPostEqualized(e) {\n          if (e.target !== this.$element[0]) {\n            this._reflow();\n          }\n        }\n\n        return _onPostEqualized;\n      }()\n\n      /**\n       * Initializes events for Equalizer.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function () {\n        function _events() {\n          var _this = this;\n          this._pauseEvents();\n          if (this.hasNested) {\n            this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n          } else {\n            this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n          }\n          this.isOn = true;\n        }\n\n        return _events;\n      }()\n\n      /**\n       * Checks the current breakpoint to the minimum required size.\n       * @private\n       */\n\n    }, {\n      key: '_checkMQ',\n      value: function () {\n        function _checkMQ() {\n          var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);\n          if (tooSmall) {\n            if (this.isOn) {\n              this._pauseEvents();\n              this.$watched.css('height', 'auto');\n            }\n          } else {\n            if (!this.isOn) {\n              this._events();\n            }\n          }\n          return tooSmall;\n        }\n\n        return _checkMQ;\n      }()\n\n      /**\n       * A noop version for the plugin\n       * @private\n       */\n\n    }, {\n      key: '_killswitch',\n      value: function () {\n        function _killswitch() {\n          return;\n        }\n\n        return _killswitch;\n      }()\n\n      /**\n       * Calls necessary functions to update Equalizer upon DOM change\n       * @private\n       */\n\n    }, {\n      key: '_reflow',\n      value: function () {\n        function _reflow() {\n          if (!this.options.equalizeOnStack) {\n            if (this._isStacked()) {\n              this.$watched.css('height', 'auto');\n              return false;\n            }\n          }\n          if (this.options.equalizeByRow) {\n            this.getHeightsByRow(this.applyHeightByRow.bind(this));\n          } else {\n            this.getHeights(this.applyHeight.bind(this));\n          }\n        }\n\n        return _reflow;\n      }()\n\n      /**\n       * Manually determines if the first 2 elements are *NOT* stacked.\n       * @private\n       */\n\n    }, {\n      key: '_isStacked',\n      value: function () {\n        function _isStacked() {\n          return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n        }\n\n        return _isStacked;\n      }()\n\n      /**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} heights - An array of heights of children within Equalizer container\n       */\n\n    }, {\n      key: 'getHeights',\n      value: function () {\n        function getHeights(cb) {\n          var heights = [];\n          for (var i = 0, len = this.$watched.length; i < len; i++) {\n            this.$watched[i].style.height = 'auto';\n            heights.push(this.$watched[i].offsetHeight);\n          }\n          cb(heights);\n        }\n\n        return getHeights;\n      }()\n\n      /**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       */\n\n    }, {\n      key: 'getHeightsByRow',\n      value: function () {\n        function getHeightsByRow(cb) {\n          var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,\n              groups = [],\n              group = 0;\n          //group by Row\n          groups[group] = [];\n          for (var i = 0, len = this.$watched.length; i < len; i++) {\n            this.$watched[i].style.height = 'auto';\n            //maybe could use this.$watched[i].offsetTop\n            var elOffsetTop = $(this.$watched[i]).offset().top;\n            if (elOffsetTop != lastElTopOffset) {\n              group++;\n              groups[group] = [];\n              lastElTopOffset = elOffsetTop;\n            }\n            groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);\n          }\n\n          for (var j = 0, ln = groups.length; j < ln; j++) {\n            var heights = $(groups[j]).map(function () {\n              return this[1];\n            }).get();\n            var max = Math.max.apply(null, heights);\n            groups[j].push(max);\n          }\n          cb(groups);\n        }\n\n        return getHeightsByRow;\n      }()\n\n      /**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n       * @param {array} heights - An array of heights of children within Equalizer container\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#postequalized\n       */\n\n    }, {\n      key: 'applyHeight',\n      value: function () {\n        function applyHeight(heights) {\n          var max = Math.max.apply(null, heights);\n          /**\n           * Fires before the heights are applied\n           * @event Equalizer#preequalized\n           */\n          this.$element.trigger('preequalized.zf.equalizer');\n\n          this.$watched.css('height', max);\n\n          /**\n           * Fires when the heights have been applied\n           * @event Equalizer#postequalized\n           */\n          this.$element.trigger('postequalized.zf.equalizer');\n        }\n\n        return applyHeight;\n      }()\n\n      /**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#preequalizedRow\n       * @fires Equalizer#postequalizedRow\n       * @fires Equalizer#postequalized\n       */\n\n    }, {\n      key: 'applyHeightByRow',\n      value: function () {\n        function applyHeightByRow(groups) {\n          /**\n           * Fires before the heights are applied\n           */\n          this.$element.trigger('preequalized.zf.equalizer');\n          for (var i = 0, len = groups.length; i < len; i++) {\n            var groupsILength = groups[i].length,\n                max = groups[i][groupsILength - 1];\n            if (groupsILength <= 2) {\n              $(groups[i][0][0]).css({ 'height': 'auto' });\n              continue;\n            }\n            /**\n              * Fires before the heights per row are applied\n              * @event Equalizer#preequalizedRow\n              */\n            this.$element.trigger('preequalizedrow.zf.equalizer');\n            for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {\n              $(groups[i][j][0]).css({ 'height': max });\n            }\n            /**\n              * Fires when the heights per row have been applied\n              * @event Equalizer#postequalizedRow\n              */\n            this.$element.trigger('postequalizedrow.zf.equalizer');\n          }\n          /**\n           * Fires when the heights have been applied\n           */\n          this.$element.trigger('postequalized.zf.equalizer');\n        }\n\n        return applyHeightByRow;\n      }()\n\n      /**\n       * Destroys an instance of Equalizer.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function () {\n        function destroy() {\n          this._pauseEvents();\n          this.$watched.css('height', 'auto');\n\n          Foundation.unregisterPlugin(this);\n        }\n\n        return destroy;\n      }()\n    }]);\n\n    return Equalizer;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n  Equalizer.defaults = {\n    /**\n     * Enable height equalization when stacked on smaller screens.\n     * @option\n     * @example true\n     */\n    equalizeOnStack: true,\n    /**\n     * Enable height equalization row by row.\n     * @option\n     * @example false\n     */\n    equalizeByRow: false,\n    /**\n     * String representing the minimum breakpoint size the plugin should equalize heights on.\n     * @option\n     * @example 'medium'\n     */\n    equalizeOn: ''\n  };\n\n  // Window exports\n  Foundation.plugin(Equalizer, 'Equalizer');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/dist/plugins/foundation.equalizer.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,eAAe,YAAY;AAAE,WAAS,gBAAT,CAA0B,MAA1B,EAAkC,KAAlC,EAAyC;AAAE,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AAAE,UAAI,aAAa,MAAM,CAAN,CAAjB,CAA2B,WAAW,UAAX,GAAwB,WAAW,UAAX,IAAyB,KAAjD,CAAwD,WAAW,YAAX,GAA0B,IAA1B,CAAgC,IAAI,WAAW,UAAf,EAA2B,WAAW,QAAX,GAAsB,IAAtB,CAA4B,OAAO,cAAP,CAAsB,MAAtB,EAA8B,WAAW,GAAzC,EAA8C,UAA9C;AAA4D;AAAE,GAAC,OAAO,UAAU,WAAV,EAAuB,UAAvB,EAAmC,WAAnC,EAAgD;AAAE,QAAI,UAAJ,EAAgB,iBAAiB,YAAY,SAA7B,EAAwC,UAAxC,EAAqD,IAAI,WAAJ,EAAiB,iBAAiB,WAAjB,EAA8B,WAA9B,EAA4C,OAAO,WAAP;AAAqB,GAAhN;AAAmN,CAA9hB,EAAnB;;AAEA,SAAS,eAAT,CAAyB,QAAzB,EAAmC,WAAnC,EAAgD;AAAE,MAAI,EAAE,oBAAoB,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAI,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,CAAC,UAAU,CAAV,EAAa;;;;;;;AAOZ,MAAI,YAAY,YAAY;;;;;;;;;AAS1B,aAAS,SAAT,CAAmB,OAAnB,EAA4B,OAA5B,EAAqC;AACnC,sBAAgB,IAAhB,EAAsB,SAAtB;;AAEA,WAAK,QAAL,GAAgB,OAAhB;AACA,WAAK,OAAL,GAAe,EAAE,MAAF,CAAS,EAAT,EAAa,UAAU,QAAvB,EAAiC,KAAK,QAAL,CAAc,IAAd,EAAjC,EAAuD,OAAvD,CAAf;;AAEA,WAAK,KAAL;;AAEA,iBAAW,cAAX,CAA0B,IAA1B,EAAgC,WAAhC;AACD;;;;;;;AAQD,iBAAa,SAAb,EAAwB,CAAC;AACvB,WAAK,OADkB;AAEvB;AAAO,iBAAS,KAAT,GAAiB;AACtB,cAAI,OAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,gBAAnB,KAAwC,EAAnD;AACA,cAAI,WAAW,KAAK,QAAL,CAAc,IAAd,CAAmB,4BAA4B,IAA5B,GAAmC,IAAtD,CAAf;;AAEA,eAAK,QAAL,GAAgB,SAAS,MAAT,GAAkB,QAAlB,GAA6B,KAAK,QAAL,CAAc,IAAd,CAAmB,wBAAnB,CAA7C;AACA,eAAK,QAAL,CAAc,IAAd,CAAmB,aAAnB,EAAkC,QAAQ,WAAW,WAAX,CAAuB,CAAvB,EAA0B,IAA1B,CAA1C;;AAEA,eAAK,SAAL,GAAiB,KAAK,QAAL,CAAc,IAAd,CAAmB,kBAAnB,EAAuC,MAAvC,GAAgD,CAAjE;AACA,eAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,YAAd,CAA2B,SAAS,IAApC,EAA0C,kBAA1C,EAA8D,MAA9D,GAAuE,CAAvF;AACA,eAAK,IAAL,GAAY,KAAZ;AACA,eAAK,YAAL,GAAoB;AAClB,6BAAiB,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CADC;AAElB,kCAAsB,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B;AAFJ,WAApB;;AAKA,cAAI,OAAO,KAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB,CAAX;AACA,cAAI,QAAJ;AACA,cAAI,KAAK,OAAL,CAAa,UAAjB,EAA6B;AAC3B,uBAAW,KAAK,QAAL,EAAX;AACA,cAAE,MAAF,EAAU,EAAV,CAAa,uBAAb,EAAsC,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAtC;AACD,WAHD,MAGO;AACL,iBAAK,OAAL;AACD;AACD,cAAI,aAAa,SAAb,IAA0B,aAAa,KAAvC,IAAgD,aAAa,SAAjE,EAA4E;AAC1E,gBAAI,KAAK,MAAT,EAAiB;AACf,yBAAW,cAAX,CAA0B,IAA1B,EAAgC,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAhC;AACD,aAFD,MAEO;AACL,mBAAK,OAAL;AACD;AACF;AACF;;AA9BD,eAAgB,KAAhB;AAAA;;;;;;;AAFuB,KAAD,EAuCrB;AACD,WAAK,cADJ;AAED;AAAO,iBAAS,YAAT,GAAwB;AAC7B,eAAK,IAAL,GAAY,KAAZ;AACA,eAAK,QAAL,CAAc,GAAd,CAAkB;AAChB,6BAAiB,KAAK,YAAL,CAAkB,oBADnB;AAEhB,mCAAuB,KAAK,YAAL,CAAkB;AAFzB,WAAlB;AAID;;AAND,eAAgB,YAAhB;AAAA;;;;;;;AAFC,KAvCqB,EAsDrB;AACD,WAAK,aADJ;AAED;AAAO,iBAAS,WAAT,CAAqB,CAArB,EAAwB;AAC7B,eAAK,OAAL;AACD;;AAFD,eAAgB,WAAhB;AAAA;;;;;;;AAFC,KAtDqB,EAiErB;AACD,WAAK,kBADJ;AAED;AAAO,iBAAS,gBAAT,CAA0B,CAA1B,EAA6B;AAClC,cAAI,EAAE,MAAF,KAAa,KAAK,QAAL,CAAc,CAAd,CAAjB,EAAmC;AACjC,iBAAK,OAAL;AACD;AACF;;AAJD,eAAgB,gBAAhB;AAAA;;;;;;;AAFC,KAjEqB,EA8ErB;AACD,WAAK,SADJ;AAED;AAAO,iBAAS,OAAT,GAAmB;AACxB,cAAI,QAAQ,IAAZ;AACA,eAAK,YAAL;AACA,cAAI,KAAK,SAAT,EAAoB;AAClB,iBAAK,QAAL,CAAc,EAAd,CAAiB,4BAAjB,EAA+C,KAAK,YAAL,CAAkB,oBAAjE;AACD,WAFD,MAEO;AACL,iBAAK,QAAL,CAAc,EAAd,CAAiB,qBAAjB,EAAwC,KAAK,YAAL,CAAkB,eAA1D;AACD;AACD,eAAK,IAAL,GAAY,IAAZ;AACD;;AATD,eAAgB,OAAhB;AAAA;;;;;;;AAFC,KA9EqB,EAgGrB;AACD,WAAK,UADJ;AAED;AAAO,iBAAS,QAAT,GAAoB;AACzB,cAAI,WAAW,CAAC,WAAW,UAAX,CAAsB,OAAtB,CAA8B,KAAK,OAAL,CAAa,UAA3C,CAAhB;AACA,cAAI,QAAJ,EAAc;AACZ,gBAAI,KAAK,IAAT,EAAe;AACb,mBAAK,YAAL;AACA,mBAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,EAA4B,MAA5B;AACD;AACF,WALD,MAKO;AACL,gBAAI,CAAC,KAAK,IAAV,EAAgB;AACd,mBAAK,OAAL;AACD;AACF;AACD,iBAAO,QAAP;AACD;;AAbD,eAAgB,QAAhB;AAAA;;;;;;;AAFC,KAhGqB,EAsHrB;AACD,WAAK,aADJ;AAED;AAAO,iBAAS,WAAT,GAAuB;AAC5B;AACD;;AAFD,eAAgB,WAAhB;AAAA;;;;;;;AAFC,KAtHqB,EAiIrB;AACD,WAAK,SADJ;AAED;AAAO,iBAAS,OAAT,GAAmB;AACxB,cAAI,CAAC,KAAK,OAAL,CAAa,eAAlB,EAAmC;AACjC,gBAAI,KAAK,UAAL,EAAJ,EAAuB;AACrB,mBAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,EAA4B,MAA5B;AACA,qBAAO,KAAP;AACD;AACF;AACD,cAAI,KAAK,OAAL,CAAa,aAAjB,EAAgC;AAC9B,iBAAK,eAAL,CAAqB,KAAK,gBAAL,CAAsB,IAAtB,CAA2B,IAA3B,CAArB;AACD,WAFD,MAEO;AACL,iBAAK,UAAL,CAAgB,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAAhB;AACD;AACF;;AAZD,eAAgB,OAAhB;AAAA;;;;;;;AAFC,KAjIqB,EAsJrB;AACD,WAAK,YADJ;AAED;AAAO,iBAAS,UAAT,GAAsB;AAC3B,iBAAO,KAAK,QAAL,CAAc,CAAd,EAAiB,qBAAjB,GAAyC,GAAzC,KAAiD,KAAK,QAAL,CAAc,CAAd,EAAiB,qBAAjB,GAAyC,GAAjG;AACD;;AAFD,eAAgB,UAAhB;AAAA;;;;;;;;AAFC,KAtJqB,EAkKrB;AACD,WAAK,YADJ;AAED;AAAO,iBAAS,UAAT,CAAoB,EAApB,EAAwB;AAC7B,cAAI,UAAU,EAAd;AACA,eAAK,IAAI,IAAI,CAAR,EAAW,MAAM,KAAK,QAAL,CAAc,MAApC,EAA4C,IAAI,GAAhD,EAAqD,GAArD,EAA0D;AACxD,iBAAK,QAAL,CAAc,CAAd,EAAiB,KAAjB,CAAuB,MAAvB,GAAgC,MAAhC;AACA,oBAAQ,IAAR,CAAa,KAAK,QAAL,CAAc,CAAd,EAAiB,YAA9B;AACD;AACD,aAAG,OAAH;AACD;;AAPD,eAAgB,UAAhB;AAAA;;;;;;;;AAFC,KAlKqB,EAmLrB;AACD,WAAK,iBADJ;AAED;AAAO,iBAAS,eAAT,CAAyB,EAAzB,EAA6B;AAClC,cAAI,kBAAkB,KAAK,QAAL,CAAc,MAAd,GAAuB,KAAK,QAAL,CAAc,KAAd,GAAsB,MAAtB,GAA+B,GAAtD,GAA4D,CAAlF;AAAA,cACI,SAAS,EADb;AAAA,cAEI,QAAQ,CAFZ;;AAIA,iBAAO,KAAP,IAAgB,EAAhB;AACA,eAAK,IAAI,IAAI,CAAR,EAAW,MAAM,KAAK,QAAL,CAAc,MAApC,EAA4C,IAAI,GAAhD,EAAqD,GAArD,EAA0D;AACxD,iBAAK,QAAL,CAAc,CAAd,EAAiB,KAAjB,CAAuB,MAAvB,GAAgC,MAAhC;;AAEA,gBAAI,cAAc,EAAE,KAAK,QAAL,CAAc,CAAd,CAAF,EAAoB,MAApB,GAA6B,GAA/C;AACA,gBAAI,eAAe,eAAnB,EAAoC;AAClC;AACA,qBAAO,KAAP,IAAgB,EAAhB;AACA,gCAAkB,WAAlB;AACD;AACD,mBAAO,KAAP,EAAc,IAAd,CAAmB,CAAC,KAAK,QAAL,CAAc,CAAd,CAAD,EAAmB,KAAK,QAAL,CAAc,CAAd,EAAiB,YAApC,CAAnB;AACD;;AAED,eAAK,IAAI,IAAI,CAAR,EAAW,KAAK,OAAO,MAA5B,EAAoC,IAAI,EAAxC,EAA4C,GAA5C,EAAiD;AAC/C,gBAAI,UAAU,EAAE,OAAO,CAAP,CAAF,EAAa,GAAb,CAAiB,YAAY;AACzC,qBAAO,KAAK,CAAL,CAAP;AACD,aAFa,EAEX,GAFW,EAAd;AAGA,gBAAI,MAAM,KAAK,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,OAArB,CAAV;AACA,mBAAO,CAAP,EAAU,IAAV,CAAe,GAAf;AACD;AACD,aAAG,MAAH;AACD;;AA1BD,eAAgB,eAAhB;AAAA;;;;;;;;;AAFC,KAnLqB,EAwNrB;AACD,WAAK,aADJ;AAED;AAAO,iBAAS,WAAT,CAAqB,OAArB,EAA8B;AACnC,cAAI,MAAM,KAAK,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,OAArB,CAAV;;;;;AAKA,eAAK,QAAL,CAAc,OAAd,CAAsB,2BAAtB;;AAEA,eAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,EAA4B,GAA5B;;;;;;AAMA,eAAK,QAAL,CAAc,OAAd,CAAsB,4BAAtB;AACD;;AAfD,eAAgB,WAAhB;AAAA;;;;;;;;;;;AAFC,KAxNqB,EAoPrB;AACD,WAAK,kBADJ;AAED;AAAO,iBAAS,gBAAT,CAA0B,MAA1B,EAAkC;;;;AAIvC,eAAK,QAAL,CAAc,OAAd,CAAsB,2BAAtB;AACA,eAAK,IAAI,IAAI,CAAR,EAAW,MAAM,OAAO,MAA7B,EAAqC,IAAI,GAAzC,EAA8C,GAA9C,EAAmD;AACjD,gBAAI,gBAAgB,OAAO,CAAP,EAAU,MAA9B;AAAA,gBACI,MAAM,OAAO,CAAP,EAAU,gBAAgB,CAA1B,CADV;AAEA,gBAAI,iBAAiB,CAArB,EAAwB;AACtB,gBAAE,OAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAF,EAAmB,GAAnB,CAAuB,EAAE,UAAU,MAAZ,EAAvB;AACA;AACD;;;;;AAKD,iBAAK,QAAL,CAAc,OAAd,CAAsB,8BAAtB;AACA,iBAAK,IAAI,IAAI,CAAR,EAAW,OAAO,gBAAgB,CAAvC,EAA0C,IAAI,IAA9C,EAAoD,GAApD,EAAyD;AACvD,gBAAE,OAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAF,EAAmB,GAAnB,CAAuB,EAAE,UAAU,GAAZ,EAAvB;AACD;;;;;AAKD,iBAAK,QAAL,CAAc,OAAd,CAAsB,+BAAtB;AACD;;;;AAID,eAAK,QAAL,CAAc,OAAd,CAAsB,4BAAtB;AACD;;AA9BD,eAAgB,gBAAhB;AAAA;;;;;;;AAFC,KApPqB,EA2RrB;AACD,WAAK,SADJ;AAED;AAAO,iBAAS,OAAT,GAAmB;AACxB,eAAK,YAAL;AACA,eAAK,QAAL,CAAc,GAAd,CAAkB,QAAlB,EAA4B,MAA5B;;AAEA,qBAAW,gBAAX,CAA4B,IAA5B;AACD;;AALD,eAAgB,OAAhB;AAAA;AAFC,KA3RqB,CAAxB;;AAqSA,WAAO,SAAP;AACD,GAhUe,EAAhB;;;;;;AAuUA,YAAU,QAAV,GAAqB;;;;;;AAMnB,qBAAiB,IANE;;;;;;AAYnB,mBAAe,KAZI;;;;;;AAkBnB,gBAAY;AAlBO,GAArB;;;AAsBA,aAAW,MAAX,CAAkB,SAAlB,EAA6B,WAA7B;AACD,CArWA,CAqWC,MArWD,CAAD","file":"/packages/zurb:foundation-sites/dist/plugins/foundation.equalizer.js.map","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Equalizer module.\n   * @module foundation.equalizer\n   */\n\n  var Equalizer = function () {\n    /**\n     * Creates a new instance of Equalizer.\n     * @class\n     * @fires Equalizer#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Equalizer(element, options) {\n      _classCallCheck(this, Equalizer);\n\n      this.$element = element;\n      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Equalizer');\n    }\n\n    /**\n     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */\n\n\n    _createClass(Equalizer, [{\n      key: '_init',\n      value: function _init() {\n        var eqId = this.$element.attr('data-equalizer') || '';\n        var $watched = this.$element.find('[data-equalizer-watch=\"' + eqId + '\"]');\n\n        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n        this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));\n\n        this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n        this.isOn = false;\n        this._bindHandler = {\n          onResizeMeBound: this._onResizeMe.bind(this),\n          onPostEqualizedBound: this._onPostEqualized.bind(this)\n        };\n\n        var imgs = this.$element.find('img');\n        var tooSmall;\n        if (this.options.equalizeOn) {\n          tooSmall = this._checkMQ();\n          $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n        } else {\n          this._events();\n        }\n        if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {\n          if (imgs.length) {\n            Foundation.onImagesLoaded(imgs, this._reflow.bind(this));\n          } else {\n            this._reflow();\n          }\n        }\n      }\n\n      /**\n       * Removes event listeners if the breakpoint is too small.\n       * @private\n       */\n\n    }, {\n      key: '_pauseEvents',\n      value: function _pauseEvents() {\n        this.isOn = false;\n        this.$element.off({\n          '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n          'resizeme.zf.trigger': this._bindHandler.onResizeMeBound\n        });\n      }\n\n      /**\n       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n       * @private\n       */\n\n    }, {\n      key: '_onResizeMe',\n      value: function _onResizeMe(e) {\n        this._reflow();\n      }\n\n      /**\n       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n       * @private\n       */\n\n    }, {\n      key: '_onPostEqualized',\n      value: function _onPostEqualized(e) {\n        if (e.target !== this.$element[0]) {\n          this._reflow();\n        }\n      }\n\n      /**\n       * Initializes events for Equalizer.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n        this._pauseEvents();\n        if (this.hasNested) {\n          this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n        } else {\n          this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n        }\n        this.isOn = true;\n      }\n\n      /**\n       * Checks the current breakpoint to the minimum required size.\n       * @private\n       */\n\n    }, {\n      key: '_checkMQ',\n      value: function _checkMQ() {\n        var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);\n        if (tooSmall) {\n          if (this.isOn) {\n            this._pauseEvents();\n            this.$watched.css('height', 'auto');\n          }\n        } else {\n          if (!this.isOn) {\n            this._events();\n          }\n        }\n        return tooSmall;\n      }\n\n      /**\n       * A noop version for the plugin\n       * @private\n       */\n\n    }, {\n      key: '_killswitch',\n      value: function _killswitch() {\n        return;\n      }\n\n      /**\n       * Calls necessary functions to update Equalizer upon DOM change\n       * @private\n       */\n\n    }, {\n      key: '_reflow',\n      value: function _reflow() {\n        if (!this.options.equalizeOnStack) {\n          if (this._isStacked()) {\n            this.$watched.css('height', 'auto');\n            return false;\n          }\n        }\n        if (this.options.equalizeByRow) {\n          this.getHeightsByRow(this.applyHeightByRow.bind(this));\n        } else {\n          this.getHeights(this.applyHeight.bind(this));\n        }\n      }\n\n      /**\n       * Manually determines if the first 2 elements are *NOT* stacked.\n       * @private\n       */\n\n    }, {\n      key: '_isStacked',\n      value: function _isStacked() {\n        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n      }\n\n      /**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} heights - An array of heights of children within Equalizer container\n       */\n\n    }, {\n      key: 'getHeights',\n      value: function getHeights(cb) {\n        var heights = [];\n        for (var i = 0, len = this.$watched.length; i < len; i++) {\n          this.$watched[i].style.height = 'auto';\n          heights.push(this.$watched[i].offsetHeight);\n        }\n        cb(heights);\n      }\n\n      /**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       */\n\n    }, {\n      key: 'getHeightsByRow',\n      value: function getHeightsByRow(cb) {\n        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,\n            groups = [],\n            group = 0;\n        //group by Row\n        groups[group] = [];\n        for (var i = 0, len = this.$watched.length; i < len; i++) {\n          this.$watched[i].style.height = 'auto';\n          //maybe could use this.$watched[i].offsetTop\n          var elOffsetTop = $(this.$watched[i]).offset().top;\n          if (elOffsetTop != lastElTopOffset) {\n            group++;\n            groups[group] = [];\n            lastElTopOffset = elOffsetTop;\n          }\n          groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);\n        }\n\n        for (var j = 0, ln = groups.length; j < ln; j++) {\n          var heights = $(groups[j]).map(function () {\n            return this[1];\n          }).get();\n          var max = Math.max.apply(null, heights);\n          groups[j].push(max);\n        }\n        cb(groups);\n      }\n\n      /**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n       * @param {array} heights - An array of heights of children within Equalizer container\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#postequalized\n       */\n\n    }, {\n      key: 'applyHeight',\n      value: function applyHeight(heights) {\n        var max = Math.max.apply(null, heights);\n        /**\n         * Fires before the heights are applied\n         * @event Equalizer#preequalized\n         */\n        this.$element.trigger('preequalized.zf.equalizer');\n\n        this.$watched.css('height', max);\n\n        /**\n         * Fires when the heights have been applied\n         * @event Equalizer#postequalized\n         */\n        this.$element.trigger('postequalized.zf.equalizer');\n      }\n\n      /**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#preequalizedRow\n       * @fires Equalizer#postequalizedRow\n       * @fires Equalizer#postequalized\n       */\n\n    }, {\n      key: 'applyHeightByRow',\n      value: function applyHeightByRow(groups) {\n        /**\n         * Fires before the heights are applied\n         */\n        this.$element.trigger('preequalized.zf.equalizer');\n        for (var i = 0, len = groups.length; i < len; i++) {\n          var groupsILength = groups[i].length,\n              max = groups[i][groupsILength - 1];\n          if (groupsILength <= 2) {\n            $(groups[i][0][0]).css({ 'height': 'auto' });\n            continue;\n          }\n          /**\n            * Fires before the heights per row are applied\n            * @event Equalizer#preequalizedRow\n            */\n          this.$element.trigger('preequalizedrow.zf.equalizer');\n          for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {\n            $(groups[i][j][0]).css({ 'height': max });\n          }\n          /**\n            * Fires when the heights per row have been applied\n            * @event Equalizer#postequalizedRow\n            */\n          this.$element.trigger('postequalizedrow.zf.equalizer');\n        }\n        /**\n         * Fires when the heights have been applied\n         */\n        this.$element.trigger('postequalized.zf.equalizer');\n      }\n\n      /**\n       * Destroys an instance of Equalizer.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this._pauseEvents();\n        this.$watched.css('height', 'auto');\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Equalizer;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Equalizer.defaults = {\n    /**\n     * Enable height equalization when stacked on smaller screens.\n     * @option\n     * @example true\n     */\n    equalizeOnStack: true,\n    /**\n     * Enable height equalization row by row.\n     * @option\n     * @example false\n     */\n    equalizeByRow: false,\n    /**\n     * String representing the minimum breakpoint size the plugin should equalize heights on.\n     * @option\n     * @example 'medium'\n     */\n    equalizeOn: ''\n  };\n\n  // Window exports\n  Foundation.plugin(Equalizer, 'Equalizer');\n}(jQuery);"]},"hash":"9d0c60cb380c6f07ebe20c4b3c1fee01627c8f9a"}
