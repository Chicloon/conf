{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/_build/assets/js/plugins/foundation.sticky.js","filenameRelative":"/packages/zurb:foundation-sites/_build/assets/js/plugins/foundation.sticky.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/_build/assets/js/plugins/foundation.sticky.js.map","sourceFileName":"/packages/zurb:foundation-sites/_build/assets/js/plugins/foundation.sticky.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.sticky"},"ignored":false,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n!function ($) {\n\n  /**\n   * Sticky module.\n   * @module foundation.sticky\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   */\n\n  var Sticky = function () {\n    /**\n     * Creates a new instance of a sticky thing.\n     * @class\n     * @param {jQuery} element - jQuery object to make sticky.\n     * @param {Object} options - options object passed when creating the element programmatically.\n     */\n\n    function Sticky(element, options) {\n      _classCallCheck(this, Sticky);\n\n      this.$element = element;\n      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Sticky');\n    }\n\n    /**\n     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n     * @function\n     * @private\n     */\n\n    _createClass(Sticky, [{\n      key: '_init',\n      value: function () {\n        function _init() {\n          var $parent = this.$element.parent('[data-sticky-container]'),\n              id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\n              _this = this;\n\n          if (!$parent.length) {\n            this.wasWrapped = true;\n          }\n          this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\n          this.$container.addClass(this.options.containerClass);\n\n          this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });\n\n          this.scrollCount = this.options.checkEvery;\n          this.isStuck = false;\n          $(window).one('load.zf.sticky', function () {\n            if (_this.options.anchor !== '') {\n              _this.$anchor = $('#' + _this.options.anchor);\n            } else {\n              _this._parsePoints();\n            }\n\n            _this._setSizes(function () {\n              _this._calc(false);\n            });\n            _this._events(id.split('-').reverse().join('-'));\n          });\n        }\n\n        return _init;\n      }()\n\n      /**\n       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_parsePoints',\n      value: function () {\n        function _parsePoints() {\n          var top = this.options.topAnchor == \"\" ? 1 : this.options.topAnchor,\n              btm = this.options.btmAnchor == \"\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\n              pts = [top, btm],\n              breaks = {};\n          for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\n            var pt;\n            if (typeof pts[i] === 'number') {\n              pt = pts[i];\n            } else {\n              var place = pts[i].split(':'),\n                  anchor = $('#' + place[0]);\n\n              pt = anchor.offset().top;\n              if (place[1] && place[1].toLowerCase() === 'bottom') {\n                pt += anchor[0].getBoundingClientRect().height;\n              }\n            }\n            breaks[i] = pt;\n          }\n\n          this.points = breaks;\n          return;\n        }\n\n        return _parsePoints;\n      }()\n\n      /**\n       * Adds event handlers for the scrolling element.\n       * @private\n       * @param {String} id - psuedo-random id for unique scroll event listener.\n       */\n\n    }, {\n      key: '_events',\n      value: function () {\n        function _events(id) {\n          var _this = this,\n              scrollListener = this.scrollListener = 'scroll.zf.' + id;\n          if (this.isOn) {\n            return;\n          }\n          if (this.canStick) {\n            this.isOn = true;\n            $(window).off(scrollListener).on(scrollListener, function (e) {\n              if (_this.scrollCount === 0) {\n                _this.scrollCount = _this.options.checkEvery;\n                _this._setSizes(function () {\n                  _this._calc(false, window.pageYOffset);\n                });\n              } else {\n                _this.scrollCount--;\n                _this._calc(false, window.pageYOffset);\n              }\n            });\n          }\n\n          this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {\n            _this._setSizes(function () {\n              _this._calc(false);\n              if (_this.canStick) {\n                if (!_this.isOn) {\n                  _this._events(id);\n                }\n              } else if (_this.isOn) {\n                _this._pauseListeners(scrollListener);\n              }\n            });\n          });\n        }\n\n        return _events;\n      }()\n\n      /**\n       * Removes event handlers for scroll and change events on anchor.\n       * @fires Sticky#pause\n       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n       */\n\n    }, {\n      key: '_pauseListeners',\n      value: function () {\n        function _pauseListeners(scrollListener) {\n          this.isOn = false;\n          $(window).off(scrollListener);\n\n          /**\n           * Fires when the plugin is paused due to resize event shrinking the view.\n           * @event Sticky#pause\n           * @private\n           */\n          this.$element.trigger('pause.zf.sticky');\n        }\n\n        return _pauseListeners;\n      }()\n\n      /**\n       * Called on every `scroll` event and on `_init`\n       * fires functions based on booleans and cached values\n       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n       */\n\n    }, {\n      key: '_calc',\n      value: function () {\n        function _calc(checkSizes, scroll) {\n          if (checkSizes) {\n            this._setSizes();\n          }\n\n          if (!this.canStick) {\n            if (this.isStuck) {\n              this._removeSticky(true);\n            }\n            return false;\n          }\n\n          if (!scroll) {\n            scroll = window.pageYOffset;\n          }\n\n          if (scroll >= this.topPoint) {\n            if (scroll <= this.bottomPoint) {\n              if (!this.isStuck) {\n                this._setSticky();\n              }\n            } else {\n              if (this.isStuck) {\n                this._removeSticky(false);\n              }\n            }\n          } else {\n            if (this.isStuck) {\n              this._removeSticky(true);\n            }\n          }\n        }\n\n        return _calc;\n      }()\n\n      /**\n       * Causes the $element to become stuck.\n       * Adds `position: fixed;`, and helper classes.\n       * @fires Sticky#stuckto\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_setSticky',\n      value: function () {\n        function _setSticky() {\n          var _this = this,\n              stickTo = this.options.stickTo,\n              mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n              notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n              css = {};\n\n          css[mrgn] = this.options[mrgn] + 'em';\n          css[stickTo] = 0;\n          css[notStuckTo] = 'auto';\n          css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])[\"padding-left\"], 10);\n          this.isStuck = true;\n          this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)\n          /**\n           * Fires when the $element has become `position: fixed;`\n           * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n           * @event Sticky#stuckto\n           */\n          .trigger('sticky.zf.stuckto:' + stickTo);\n          this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\", function () {\n            _this._setSizes();\n          });\n        }\n\n        return _setSticky;\n      }()\n\n      /**\n       * Causes the $element to become unstuck.\n       * Removes `position: fixed;`, and helper classes.\n       * Adds other helper classes.\n       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n       * @fires Sticky#unstuckfrom\n       * @private\n       */\n\n    }, {\n      key: '_removeSticky',\n      value: function () {\n        function _removeSticky(isTop) {\n          var stickTo = this.options.stickTo,\n              stickToTop = stickTo === 'top',\n              css = {},\n              anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\n              mrgn = stickToTop ? 'marginTop' : 'marginBottom',\n              notStuckTo = stickToTop ? 'bottom' : 'top',\n              topOrBottom = isTop ? 'top' : 'bottom';\n\n          css[mrgn] = 0;\n\n          css['bottom'] = 'auto';\n          if (isTop) {\n            css['top'] = 0;\n          } else {\n            css['top'] = anchorPt;\n          }\n\n          css['left'] = '';\n          this.isStuck = false;\n          this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)\n          /**\n           * Fires when the $element has become anchored.\n           * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n           * @event Sticky#unstuckfrom\n           */\n          .trigger('sticky.zf.unstuckfrom:' + topOrBottom);\n        }\n\n        return _removeSticky;\n      }()\n\n      /**\n       * Sets the $element and $container sizes for plugin.\n       * Calls `_setBreakPoints`.\n       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n       * @private\n       */\n\n    }, {\n      key: '_setSizes',\n      value: function () {\n        function _setSizes(cb) {\n          this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);\n          if (!this.canStick) {\n            cb();\n          }\n          var _this = this,\n              newElemWidth = this.$container[0].getBoundingClientRect().width,\n              comp = window.getComputedStyle(this.$container[0]),\n              pdng = parseInt(comp['padding-right'], 10);\n\n          if (this.$anchor && this.$anchor.length) {\n            this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n          } else {\n            this._parsePoints();\n          }\n\n          this.$element.css({\n            'max-width': newElemWidth - pdng + 'px'\n          });\n\n          var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n          if (this.$element.css(\"display\") == \"none\") {\n            newContainerHeight = 0;\n          }\n          this.containerHeight = newContainerHeight;\n          this.$container.css({\n            height: newContainerHeight\n          });\n          this.elemHeight = newContainerHeight;\n\n          if (this.isStuck) {\n            this.$element.css({ \"left\": this.$container.offset().left + parseInt(comp['padding-left'], 10) });\n          }\n\n          this._setBreakPoints(newContainerHeight, function () {\n            if (cb) {\n              cb();\n            }\n          });\n        }\n\n        return _setSizes;\n      }()\n\n      /**\n       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n       * @param {Function} cb - optional callback function to be called on completion.\n       * @private\n       */\n\n    }, {\n      key: '_setBreakPoints',\n      value: function () {\n        function _setBreakPoints(elemHeight, cb) {\n          if (!this.canStick) {\n            if (cb) {\n              cb();\n            } else {\n              return false;\n            }\n          }\n          var mTop = emCalc(this.options.marginTop),\n              mBtm = emCalc(this.options.marginBottom),\n              topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n              bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n\n\n          // topPoint = this.$anchor.offset().top || this.points[0],\n          // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n          winHeight = window.innerHeight;\n\n          if (this.options.stickTo === 'top') {\n            topPoint -= mTop;\n            bottomPoint -= elemHeight + mTop;\n          } else if (this.options.stickTo === 'bottom') {\n            topPoint -= winHeight - (elemHeight + mBtm);\n            bottomPoint -= winHeight - mBtm;\n          } else {\n            //this would be the stickTo: both option... tricky\n          }\n\n          this.topPoint = topPoint;\n          this.bottomPoint = bottomPoint;\n\n          if (cb) {\n            cb();\n          }\n        }\n\n        return _setBreakPoints;\n      }()\n\n      /**\n       * Destroys the current sticky element.\n       * Resets the element to the top position first.\n       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function () {\n        function destroy() {\n          this._removeSticky(true);\n\n          this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({\n            height: '',\n            top: '',\n            bottom: '',\n            'max-width': ''\n          }).off('resizeme.zf.trigger');\n          if (this.$anchor && this.$anchor.length) {\n            this.$anchor.off('change.zf.sticky');\n          }\n          $(window).off(this.scrollListener);\n\n          if (this.wasWrapped) {\n            this.$element.unwrap();\n          } else {\n            this.$container.removeClass(this.options.containerClass).css({\n              height: ''\n            });\n          }\n          Foundation.unregisterPlugin(this);\n        }\n\n        return destroy;\n      }()\n    }]);\n\n    return Sticky;\n  }();\n\n  Sticky.defaults = {\n    /**\n     * Customizable container template. Add your own classes for styling and sizing.\n     * @option\n     * @example '&lt;div data-sticky-container class=\"small-6 columns\"&gt;&lt;/div&gt;'\n     */\n    container: '<div data-sticky-container></div>',\n    /**\n     * Location in the view the element sticks to.\n     * @option\n     * @example 'top'\n     */\n    stickTo: 'top',\n    /**\n     * If anchored to a single element, the id of that element.\n     * @option\n     * @example 'exampleId'\n     */\n    anchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the top anchor.\n     * @option\n     * @example 'exampleId:top'\n     */\n    topAnchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the bottom anchor.\n     * @option\n     * @example 'exampleId:bottom'\n     */\n    btmAnchor: '',\n    /**\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginTop: 1,\n    /**\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginBottom: 1,\n    /**\n     * Breakpoint string that is the minimum screen size an element should become sticky.\n     * @option\n     * @example 'medium'\n     */\n    stickyOn: 'medium',\n    /**\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n     * @option\n     * @example 'sticky'\n     */\n    stickyClass: 'sticky',\n    /**\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n     * @option\n     * @example 'sticky-container'\n     */\n    containerClass: 'sticky-container',\n    /**\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n     * @option\n     * @example 50\n     */\n    checkEvery: -1\n  };\n\n  /**\n   * Helper function to calculate em values\n   * @param Number {em} - number of em's to calculate into pixels\n   */\n  function emCalc(em) {\n    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n  }\n\n  // Window exports\n  Foundation.plugin(Sticky, 'Sticky');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/_build/assets/js/plugins/foundation.sticky.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/_build/assets/js/plugins/foundation.sticky.js.map","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Sticky module.\n   * @module foundation.sticky\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   */\n\n  var Sticky = function () {\n    /**\n     * Creates a new instance of a sticky thing.\n     * @class\n     * @param {jQuery} element - jQuery object to make sticky.\n     * @param {Object} options - options object passed when creating the element programmatically.\n     */\n\n    function Sticky(element, options) {\n      _classCallCheck(this, Sticky);\n\n      this.$element = element;\n      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Sticky');\n    }\n\n    /**\n     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n     * @function\n     * @private\n     */\n\n\n    _createClass(Sticky, [{\n      key: '_init',\n      value: function _init() {\n        var $parent = this.$element.parent('[data-sticky-container]'),\n            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\n            _this = this;\n\n        if (!$parent.length) {\n          this.wasWrapped = true;\n        }\n        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\n        this.$container.addClass(this.options.containerClass);\n\n        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });\n\n        this.scrollCount = this.options.checkEvery;\n        this.isStuck = false;\n        $(window).one('load.zf.sticky', function () {\n          if (_this.options.anchor !== '') {\n            _this.$anchor = $('#' + _this.options.anchor);\n          } else {\n            _this._parsePoints();\n          }\n\n          _this._setSizes(function () {\n            _this._calc(false);\n          });\n          _this._events(id.split('-').reverse().join('-'));\n        });\n      }\n\n      /**\n       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_parsePoints',\n      value: function _parsePoints() {\n        var top = this.options.topAnchor == \"\" ? 1 : this.options.topAnchor,\n            btm = this.options.btmAnchor == \"\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\n            pts = [top, btm],\n            breaks = {};\n        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\n          var pt;\n          if (typeof pts[i] === 'number') {\n            pt = pts[i];\n          } else {\n            var place = pts[i].split(':'),\n                anchor = $('#' + place[0]);\n\n            pt = anchor.offset().top;\n            if (place[1] && place[1].toLowerCase() === 'bottom') {\n              pt += anchor[0].getBoundingClientRect().height;\n            }\n          }\n          breaks[i] = pt;\n        }\n\n        this.points = breaks;\n        return;\n      }\n\n      /**\n       * Adds event handlers for the scrolling element.\n       * @private\n       * @param {String} id - psuedo-random id for unique scroll event listener.\n       */\n\n    }, {\n      key: '_events',\n      value: function _events(id) {\n        var _this = this,\n            scrollListener = this.scrollListener = 'scroll.zf.' + id;\n        if (this.isOn) {\n          return;\n        }\n        if (this.canStick) {\n          this.isOn = true;\n          $(window).off(scrollListener).on(scrollListener, function (e) {\n            if (_this.scrollCount === 0) {\n              _this.scrollCount = _this.options.checkEvery;\n              _this._setSizes(function () {\n                _this._calc(false, window.pageYOffset);\n              });\n            } else {\n              _this.scrollCount--;\n              _this._calc(false, window.pageYOffset);\n            }\n          });\n        }\n\n        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {\n          _this._setSizes(function () {\n            _this._calc(false);\n            if (_this.canStick) {\n              if (!_this.isOn) {\n                _this._events(id);\n              }\n            } else if (_this.isOn) {\n              _this._pauseListeners(scrollListener);\n            }\n          });\n        });\n      }\n\n      /**\n       * Removes event handlers for scroll and change events on anchor.\n       * @fires Sticky#pause\n       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n       */\n\n    }, {\n      key: '_pauseListeners',\n      value: function _pauseListeners(scrollListener) {\n        this.isOn = false;\n        $(window).off(scrollListener);\n\n        /**\n         * Fires when the plugin is paused due to resize event shrinking the view.\n         * @event Sticky#pause\n         * @private\n         */\n        this.$element.trigger('pause.zf.sticky');\n      }\n\n      /**\n       * Called on every `scroll` event and on `_init`\n       * fires functions based on booleans and cached values\n       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n       */\n\n    }, {\n      key: '_calc',\n      value: function _calc(checkSizes, scroll) {\n        if (checkSizes) {\n          this._setSizes();\n        }\n\n        if (!this.canStick) {\n          if (this.isStuck) {\n            this._removeSticky(true);\n          }\n          return false;\n        }\n\n        if (!scroll) {\n          scroll = window.pageYOffset;\n        }\n\n        if (scroll >= this.topPoint) {\n          if (scroll <= this.bottomPoint) {\n            if (!this.isStuck) {\n              this._setSticky();\n            }\n          } else {\n            if (this.isStuck) {\n              this._removeSticky(false);\n            }\n          }\n        } else {\n          if (this.isStuck) {\n            this._removeSticky(true);\n          }\n        }\n      }\n\n      /**\n       * Causes the $element to become stuck.\n       * Adds `position: fixed;`, and helper classes.\n       * @fires Sticky#stuckto\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_setSticky',\n      value: function _setSticky() {\n        var _this = this,\n            stickTo = this.options.stickTo,\n            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n            css = {};\n\n        css[mrgn] = this.options[mrgn] + 'em';\n        css[stickTo] = 0;\n        css[notStuckTo] = 'auto';\n        css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])[\"padding-left\"], 10);\n        this.isStuck = true;\n        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)\n        /**\n         * Fires when the $element has become `position: fixed;`\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n         * @event Sticky#stuckto\n         */\n        .trigger('sticky.zf.stuckto:' + stickTo);\n        this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\", function () {\n          _this._setSizes();\n        });\n      }\n\n      /**\n       * Causes the $element to become unstuck.\n       * Removes `position: fixed;`, and helper classes.\n       * Adds other helper classes.\n       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n       * @fires Sticky#unstuckfrom\n       * @private\n       */\n\n    }, {\n      key: '_removeSticky',\n      value: function _removeSticky(isTop) {\n        var stickTo = this.options.stickTo,\n            stickToTop = stickTo === 'top',\n            css = {},\n            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\n            mrgn = stickToTop ? 'marginTop' : 'marginBottom',\n            notStuckTo = stickToTop ? 'bottom' : 'top',\n            topOrBottom = isTop ? 'top' : 'bottom';\n\n        css[mrgn] = 0;\n\n        css['bottom'] = 'auto';\n        if (isTop) {\n          css['top'] = 0;\n        } else {\n          css['top'] = anchorPt;\n        }\n\n        css['left'] = '';\n        this.isStuck = false;\n        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)\n        /**\n         * Fires when the $element has become anchored.\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n         * @event Sticky#unstuckfrom\n         */\n        .trigger('sticky.zf.unstuckfrom:' + topOrBottom);\n      }\n\n      /**\n       * Sets the $element and $container sizes for plugin.\n       * Calls `_setBreakPoints`.\n       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n       * @private\n       */\n\n    }, {\n      key: '_setSizes',\n      value: function _setSizes(cb) {\n        this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);\n        if (!this.canStick) {\n          cb();\n        }\n        var _this = this,\n            newElemWidth = this.$container[0].getBoundingClientRect().width,\n            comp = window.getComputedStyle(this.$container[0]),\n            pdng = parseInt(comp['padding-right'], 10);\n\n        if (this.$anchor && this.$anchor.length) {\n          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n        } else {\n          this._parsePoints();\n        }\n\n        this.$element.css({\n          'max-width': newElemWidth - pdng + 'px'\n        });\n\n        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n        if (this.$element.css(\"display\") == \"none\") {\n          newContainerHeight = 0;\n        }\n        this.containerHeight = newContainerHeight;\n        this.$container.css({\n          height: newContainerHeight\n        });\n        this.elemHeight = newContainerHeight;\n\n        if (this.isStuck) {\n          this.$element.css({ \"left\": this.$container.offset().left + parseInt(comp['padding-left'], 10) });\n        }\n\n        this._setBreakPoints(newContainerHeight, function () {\n          if (cb) {\n            cb();\n          }\n        });\n      }\n\n      /**\n       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n       * @param {Function} cb - optional callback function to be called on completion.\n       * @private\n       */\n\n    }, {\n      key: '_setBreakPoints',\n      value: function _setBreakPoints(elemHeight, cb) {\n        if (!this.canStick) {\n          if (cb) {\n            cb();\n          } else {\n            return false;\n          }\n        }\n        var mTop = emCalc(this.options.marginTop),\n            mBtm = emCalc(this.options.marginBottom),\n            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n\n        // topPoint = this.$anchor.offset().top || this.points[0],\n        // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n        winHeight = window.innerHeight;\n\n        if (this.options.stickTo === 'top') {\n          topPoint -= mTop;\n          bottomPoint -= elemHeight + mTop;\n        } else if (this.options.stickTo === 'bottom') {\n          topPoint -= winHeight - (elemHeight + mBtm);\n          bottomPoint -= winHeight - mBtm;\n        } else {\n          //this would be the stickTo: both option... tricky\n        }\n\n        this.topPoint = topPoint;\n        this.bottomPoint = bottomPoint;\n\n        if (cb) {\n          cb();\n        }\n      }\n\n      /**\n       * Destroys the current sticky element.\n       * Resets the element to the top position first.\n       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this._removeSticky(true);\n\n        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({\n          height: '',\n          top: '',\n          bottom: '',\n          'max-width': ''\n        }).off('resizeme.zf.trigger');\n        if (this.$anchor && this.$anchor.length) {\n          this.$anchor.off('change.zf.sticky');\n        }\n        $(window).off(this.scrollListener);\n\n        if (this.wasWrapped) {\n          this.$element.unwrap();\n        } else {\n          this.$container.removeClass(this.options.containerClass).css({\n            height: ''\n          });\n        }\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Sticky;\n  }();\n\n  Sticky.defaults = {\n    /**\n     * Customizable container template. Add your own classes for styling and sizing.\n     * @option\n     * @example '&lt;div data-sticky-container class=\"small-6 columns\"&gt;&lt;/div&gt;'\n     */\n    container: '<div data-sticky-container></div>',\n    /**\n     * Location in the view the element sticks to.\n     * @option\n     * @example 'top'\n     */\n    stickTo: 'top',\n    /**\n     * If anchored to a single element, the id of that element.\n     * @option\n     * @example 'exampleId'\n     */\n    anchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the top anchor.\n     * @option\n     * @example 'exampleId:top'\n     */\n    topAnchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the bottom anchor.\n     * @option\n     * @example 'exampleId:bottom'\n     */\n    btmAnchor: '',\n    /**\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginTop: 1,\n    /**\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginBottom: 1,\n    /**\n     * Breakpoint string that is the minimum screen size an element should become sticky.\n     * @option\n     * @example 'medium'\n     */\n    stickyOn: 'medium',\n    /**\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n     * @option\n     * @example 'sticky'\n     */\n    stickyClass: 'sticky',\n    /**\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n     * @option\n     * @example 'sticky-container'\n     */\n    containerClass: 'sticky-container',\n    /**\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n     * @option\n     * @example 50\n     */\n    checkEvery: -1\n  };\n\n  /**\n   * Helper function to calculate em values\n   * @param Number {em} - number of em's to calculate into pixels\n   */\n  function emCalc(em) {\n    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n  }\n\n  // Window exports\n  Foundation.plugin(Sticky, 'Sticky');\n}(jQuery);"]},"hash":"3e02b73d2175799c55c023173a9357c25fe51537"}
