{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.mediaQuery.js","filenameRelative":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.mediaQuery.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.mediaQuery.js.map","sourceFileName":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.mediaQuery.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.util.mediaQuery"},"ignored":false,"code":"'use strict';\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  // Default set of media queries\n  var defaultQueries = {\n    'default': 'only screen',\n    landscape: 'only screen and (orientation: landscape)',\n    portrait: 'only screen and (orientation: portrait)',\n    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'\n  };\n\n  var MediaQuery = {\n    queries: [],\n\n    current: '',\n\n    /**\n     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n     * @function\n     * @private\n     */\n    _init: function () {\n      function _init() {\n        var self = this;\n        var extractedStyles = $('.foundation-mq').css('font-family');\n        var namedQueries;\n\n        namedQueries = parseStyleToObject(extractedStyles);\n\n        for (var key in meteorBabelHelpers.sanitizeForInObject(namedQueries)) {\n          if (namedQueries.hasOwnProperty(key)) {\n            self.queries.push({\n              name: key,\n              value: 'only screen and (min-width: ' + namedQueries[key] + ')'\n            });\n          }\n        }\n\n        this.current = this._getCurrentSize();\n\n        this._watcher();\n      }\n\n      return _init;\n    }(),\n\n    /**\n     * Checks if the screen is at least as wide as a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to check.\n     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n     */\n    atLeast: function () {\n      function atLeast(size) {\n        var query = this.get(size);\n\n        if (query) {\n          return window.matchMedia(query).matches;\n        }\n\n        return false;\n      }\n\n      return atLeast;\n    }(),\n\n    /**\n     * Gets the media query of a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to get.\n     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n     */\n    get: function () {\n      function get(size) {\n        for (var i in meteorBabelHelpers.sanitizeForInObject(this.queries)) {\n          if (this.queries.hasOwnProperty(i)) {\n            var query = this.queries[i];\n            if (size === query.name) return query.value;\n          }\n        }\n\n        return null;\n      }\n\n      return get;\n    }(),\n\n    /**\n     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n     * @function\n     * @private\n     * @returns {String} Name of the current breakpoint.\n     */\n    _getCurrentSize: function () {\n      function _getCurrentSize() {\n        var matched;\n\n        for (var i = 0; i < this.queries.length; i++) {\n          var query = this.queries[i];\n\n          if (window.matchMedia(query.value).matches) {\n            matched = query;\n          }\n        }\n\n        if ((typeof matched === 'undefined' ? 'undefined' : (0, _typeof3['default'])(matched)) === 'object') {\n          return matched.name;\n        } else {\n          return matched;\n        }\n      }\n\n      return _getCurrentSize;\n    }(),\n\n    /**\n     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n     * @function\n     * @private\n     */\n    _watcher: function () {\n      function _watcher() {\n        var _this = this;\n\n        $(window).on('resize.zf.mediaquery', function () {\n          var newSize = _this._getCurrentSize(),\n              currentSize = _this.current;\n\n          if (newSize !== currentSize) {\n            // Change the current media query\n            _this.current = newSize;\n\n            // Broadcast the media query change on the window\n            $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\n          }\n        });\n      }\n\n      return _watcher;\n    }()\n  };\n\n  Foundation.MediaQuery = MediaQuery;\n\n  // matchMedia() polyfill - Test a CSS media type/query in JS.\n  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\n  window.matchMedia || (window.matchMedia = function () {\n    'use strict';\n\n    // For browsers that support matchMedium api such as IE 9 and webkit\n\n    var styleMedia = window.styleMedia || window.media;\n\n    // For those that don't support matchMedium\n    if (!styleMedia) {\n      var style = document.createElement('style'),\n          script = document.getElementsByTagName('script')[0],\n          info = null;\n\n      style.type = 'text/css';\n      style.id = 'matchmediajs-test';\n\n      script.parentNode.insertBefore(style, script);\n\n      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;\n\n      styleMedia = {\n        matchMedium: function () {\n          function matchMedium(media) {\n            var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n            // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n            if (style.styleSheet) {\n              style.styleSheet.cssText = text;\n            } else {\n              style.textContent = text;\n            }\n\n            // Test if media query is true or false\n            return info.width === '1px';\n          }\n\n          return matchMedium;\n        }()\n      };\n    }\n\n    return function (media) {\n      return {\n        matches: styleMedia.matchMedium(media || 'all'),\n        media: media || 'all'\n      };\n    };\n  }());\n\n  // Thank you: https://github.com/sindresorhus/query-string\n  function parseStyleToObject(str) {\n    var styleObject = {};\n\n    if (typeof str !== 'string') {\n      return styleObject;\n    }\n\n    str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n    if (!str) {\n      return styleObject;\n    }\n\n    styleObject = str.split('&').reduce(function (ret, param) {\n      var parts = param.replace(/\\+/g, ' ').split('=');\n      var key = parts[0];\n      var val = parts[1];\n      key = decodeURIComponent(key);\n\n      // missing `=` should be `null`:\n      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n      val = val === undefined ? null : decodeURIComponent(val);\n\n      if (!ret.hasOwnProperty(key)) {\n        ret[key] = val;\n      } else if (Array.isArray(ret[key])) {\n        ret[key].push(val);\n      } else {\n        ret[key] = [ret[key], val];\n      }\n      return ret;\n    }, {});\n\n    return styleObject;\n  }\n\n  Foundation.MediaQuery = MediaQuery;\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/dist/plugins/foundation.util.mediaQuery.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/dist/plugins/foundation.util.mediaQuery.js.map","sourcesContent":["'use strict';\n\n!function ($) {\n\n  // Default set of media queries\n  var defaultQueries = {\n    'default': 'only screen',\n    landscape: 'only screen and (orientation: landscape)',\n    portrait: 'only screen and (orientation: portrait)',\n    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'\n  };\n\n  var MediaQuery = {\n    queries: [],\n\n    current: '',\n\n    /**\n     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n     * @function\n     * @private\n     */\n    _init: function () {\n      var self = this;\n      var extractedStyles = $('.foundation-mq').css('font-family');\n      var namedQueries;\n\n      namedQueries = parseStyleToObject(extractedStyles);\n\n      for (var key in namedQueries) {\n        if (namedQueries.hasOwnProperty(key)) {\n          self.queries.push({\n            name: key,\n            value: 'only screen and (min-width: ' + namedQueries[key] + ')'\n          });\n        }\n      }\n\n      this.current = this._getCurrentSize();\n\n      this._watcher();\n    },\n\n\n    /**\n     * Checks if the screen is at least as wide as a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to check.\n     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n     */\n    atLeast: function (size) {\n      var query = this.get(size);\n\n      if (query) {\n        return window.matchMedia(query).matches;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Gets the media query of a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to get.\n     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n     */\n    get: function (size) {\n      for (var i in this.queries) {\n        if (this.queries.hasOwnProperty(i)) {\n          var query = this.queries[i];\n          if (size === query.name) return query.value;\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n     * @function\n     * @private\n     * @returns {String} Name of the current breakpoint.\n     */\n    _getCurrentSize: function () {\n      var matched;\n\n      for (var i = 0; i < this.queries.length; i++) {\n        var query = this.queries[i];\n\n        if (window.matchMedia(query.value).matches) {\n          matched = query;\n        }\n      }\n\n      if (typeof matched === 'object') {\n        return matched.name;\n      } else {\n        return matched;\n      }\n    },\n\n\n    /**\n     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n     * @function\n     * @private\n     */\n    _watcher: function () {\n      var _this = this;\n\n      $(window).on('resize.zf.mediaquery', function () {\n        var newSize = _this._getCurrentSize(),\n            currentSize = _this.current;\n\n        if (newSize !== currentSize) {\n          // Change the current media query\n          _this.current = newSize;\n\n          // Broadcast the media query change on the window\n          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\n        }\n      });\n    }\n  };\n\n  Foundation.MediaQuery = MediaQuery;\n\n  // matchMedia() polyfill - Test a CSS media type/query in JS.\n  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\n  window.matchMedia || (window.matchMedia = function () {\n    'use strict';\n\n    // For browsers that support matchMedium api such as IE 9 and webkit\n\n    var styleMedia = window.styleMedia || window.media;\n\n    // For those that don't support matchMedium\n    if (!styleMedia) {\n      var style = document.createElement('style'),\n          script = document.getElementsByTagName('script')[0],\n          info = null;\n\n      style.type = 'text/css';\n      style.id = 'matchmediajs-test';\n\n      script.parentNode.insertBefore(style, script);\n\n      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;\n\n      styleMedia = {\n        matchMedium: function (media) {\n          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n          if (style.styleSheet) {\n            style.styleSheet.cssText = text;\n          } else {\n            style.textContent = text;\n          }\n\n          // Test if media query is true or false\n          return info.width === '1px';\n        }\n      };\n    }\n\n    return function (media) {\n      return {\n        matches: styleMedia.matchMedium(media || 'all'),\n        media: media || 'all'\n      };\n    };\n  }());\n\n  // Thank you: https://github.com/sindresorhus/query-string\n  function parseStyleToObject(str) {\n    var styleObject = {};\n\n    if (typeof str !== 'string') {\n      return styleObject;\n    }\n\n    str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n    if (!str) {\n      return styleObject;\n    }\n\n    styleObject = str.split('&').reduce(function (ret, param) {\n      var parts = param.replace(/\\+/g, ' ').split('=');\n      var key = parts[0];\n      var val = parts[1];\n      key = decodeURIComponent(key);\n\n      // missing `=` should be `null`:\n      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n      val = val === undefined ? null : decodeURIComponent(val);\n\n      if (!ret.hasOwnProperty(key)) {\n        ret[key] = val;\n      } else if (Array.isArray(ret[key])) {\n        ret[key].push(val);\n      } else {\n        ret[key] = [ret[key], val];\n      }\n      return ret;\n    }, {});\n\n    return styleObject;\n  }\n\n  Foundation.MediaQuery = MediaQuery;\n}(jQuery);"]},"hash":"54a8e50c92797fe6b21cc65acddc8b259242d04a"}
