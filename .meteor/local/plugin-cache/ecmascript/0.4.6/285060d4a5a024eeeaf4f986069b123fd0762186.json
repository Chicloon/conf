{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/vendor/jquery/src/css/adjustCSS.js","filenameRelative":"/packages/zurb:foundation-sites/vendor/jquery/src/css/adjustCSS.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/vendor/jquery/src/css/adjustCSS.js.map","sourceFileName":"/packages/zurb:foundation-sites/vendor/jquery/src/css/adjustCSS.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"adjustCSS"},"ignored":false,"code":"define([\"../core\", \"../var/rcssNum\"], function (jQuery, rcssNum) {\n\n\tfunction adjustCSS(elem, prop, valueParts, tween) {\n\t\tvar adjusted,\n\t\t    scale = 1,\n\t\t    maxIterations = 20,\n\t\t    currentValue = tween ? function () {\n\t\t\treturn tween.cur();\n\t\t} : function () {\n\t\t\treturn jQuery.css(elem, prop, \"\");\n\t\t},\n\t\t    initial = currentValue(),\n\t\t    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = (jQuery.cssNumber[prop] || unit !== \"px\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n\t\tif (initialInUnit && initialInUnit[3] !== unit) {\n\n\t\t\t// Trust units reported by jQuery.css\n\t\t\tunit = unit || initialInUnit[3];\n\n\t\t\t// Make sure we update the tween properties later on\n\t\t\tvalueParts = valueParts || [];\n\n\t\t\t// Iteratively approximate from a nonzero starting point\n\t\t\tinitialInUnit = +initial || 1;\n\n\t\t\tdo {\n\n\t\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\t\tscale = scale || \".5\";\n\n\t\t\t\t// Adjust and apply\n\t\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\t\tjQuery.style(elem, prop, initialInUnit + unit);\n\n\t\t\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t\t} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);\n\t\t}\n\n\t\tif (valueParts) {\n\t\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t\t// Apply relative offset (+=/-=) if specified\n\t\t\tadjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\t\t\tif (tween) {\n\t\t\t\ttween.unit = unit;\n\t\t\t\ttween.start = initialInUnit;\n\t\t\t\ttween.end = adjusted;\n\t\t\t}\n\t\t}\n\t\treturn adjusted;\n\t}\n\n\treturn adjustCSS;\n});","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/vendor/jquery/src/css/adjustCSS.js"],"names":[],"mappings":"AAAA,OAAQ,CACP,SADO,EAEP,gBAFO,CAAR,EAGG,UAAU,MAAV,EAAkB,OAAlB,EAA4B;;AAE/B,UAAS,SAAT,CAAoB,IAApB,EAA0B,IAA1B,EAAgC,UAAhC,EAA4C,KAA5C,EAAoD;AACnD,MAAI,QAAJ;AAAA,MACC,QAAQ,CADT;AAAA,MAEC,gBAAgB,EAFjB;AAAA,MAGC,eAAe,QACd,YAAW;AAAE,UAAO,MAAM,GAAN,EAAP;AAAqB,GADpB,GAEd,YAAW;AAAE,UAAO,OAAO,GAAP,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,EAAxB,CAAP;AAAsC,GALrD;AAAA,MAMC,UAAU,cANX;AAAA,MAOC,OAAO,cAAc,WAAY,CAAZ,CAAd,KAAmC,OAAO,SAAP,CAAkB,IAAlB,IAA2B,EAA3B,GAAgC,IAAnE,CAPR;AAAA;;;AAUC,kBAAgB,CAAE,OAAO,SAAP,CAAkB,IAAlB,KAA4B,SAAS,IAAT,IAAiB,CAAC,OAAhD,KACf,QAAQ,IAAR,CAAc,OAAO,GAAP,CAAY,IAAZ,EAAkB,IAAlB,CAAd,CAXF;;AAaA,MAAK,iBAAiB,cAAe,CAAf,MAAuB,IAA7C,EAAoD;;;AAGnD,UAAO,QAAQ,cAAe,CAAf,CAAf;;;AAGA,gBAAa,cAAc,EAA3B;;;AAGA,mBAAgB,CAAC,OAAD,IAAY,CAA5B;;AAEA,MAAG;;;;AAIF,YAAQ,SAAS,IAAjB;;;AAGA,oBAAgB,gBAAgB,KAAhC;AACA,WAAO,KAAP,CAAc,IAAd,EAAoB,IAApB,EAA0B,gBAAgB,IAA1C;;;;AAIA,IAZD,QAaC,WAAY,QAAQ,iBAAiB,OAArC,KAAkD,UAAU,CAA5D,IAAiE,EAAE,aAbpE;AAeA;;AAED,MAAK,UAAL,EAAkB;AACjB,mBAAgB,CAAC,aAAD,IAAkB,CAAC,OAAnB,IAA8B,CAA9C;;;AAGA,cAAW,WAAY,CAAZ,IACV,gBAAgB,CAAE,WAAY,CAAZ,IAAkB,CAApB,IAA0B,WAAY,CAAZ,CADhC,GAEV,CAAC,WAAY,CAAZ,CAFF;AAGA,OAAK,KAAL,EAAa;AACZ,UAAM,IAAN,GAAa,IAAb;AACA,UAAM,KAAN,GAAc,aAAd;AACA,UAAM,GAAN,GAAY,QAAZ;AACA;AACD;AACD,SAAO,QAAP;AACA;;AAED,QAAO,SAAP;AACC,CAhED","file":"/packages/zurb:foundation-sites/vendor/jquery/src/css/adjustCSS.js.map","sourcesContent":["define( [\n\t\"../core\",\n\t\"../var/rcssNum\"\n], function( jQuery, rcssNum ) {\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() { return tween.cur(); } :\n\t\t\tfunction() { return jQuery.css( elem, prop, \"\" ); },\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\nreturn adjustCSS;\n} );\n"]},"hash":"285060d4a5a024eeeaf4f986069b123fd0762186"}
