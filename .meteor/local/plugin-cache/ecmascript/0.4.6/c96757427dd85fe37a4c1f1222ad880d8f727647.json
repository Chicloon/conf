{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.toggler.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.toggler.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.toggler.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.toggler.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.toggler"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * Toggler module.\n   * @module foundation.toggler\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   */\n\n  var Toggler = function () {\n    /**\n     * Creates a new instance of Toggler.\n     * @class\n     * @fires Toggler#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Toggler(element, options) {\n      (0, _classCallCheck3['default'])(this, Toggler);\n\n      this.$element = element;\n      this.options = $.extend({}, Toggler.defaults, element.data(), options);\n      this.className = '';\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'Toggler');\n    }\n\n    /**\n     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n     * @function\n     * @private\n     */\n\n\n    Toggler.prototype._init = function () {\n      function _init() {\n        var input;\n        // Parse animation classes if they were set\n        if (this.options.animate) {\n          input = this.options.animate.split(' ');\n\n          this.animationIn = input[0];\n          this.animationOut = input[1] || null;\n        }\n        // Otherwise, parse toggle class\n        else {\n            input = this.$element.data('toggler');\n            // Allow for a . at the beginning of the string\n            this.className = input[0] === '.' ? input.slice(1) : input;\n          }\n\n        // Add ARIA attributes to triggers\n        var id = this.$element[0].id;\n        $('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-controls', id);\n        // If the target is hidden, add aria-hidden\n        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\n      }\n\n      return _init;\n    }();\n\n    /**\n     * Initializes events for the toggle trigger.\n     * @function\n     * @private\n     */\n\n\n    Toggler.prototype._events = function () {\n      function _events() {\n        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\n      }\n\n      return _events;\n    }();\n\n    /**\n     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n     * @function\n     * @fires Toggler#on\n     * @fires Toggler#off\n     */\n\n\n    Toggler.prototype.toggle = function () {\n      function toggle() {\n        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();\n      }\n\n      return toggle;\n    }();\n\n    Toggler.prototype._toggleClass = function () {\n      function _toggleClass() {\n        this.$element.toggleClass(this.className);\n\n        var isOn = this.$element.hasClass(this.className);\n        if (isOn) {\n          /**\n           * Fires if the target element has the class after a toggle.\n           * @event Toggler#on\n           */\n          this.$element.trigger('on.zf.toggler');\n        } else {\n          /**\n           * Fires if the target element does not have the class after a toggle.\n           * @event Toggler#off\n           */\n          this.$element.trigger('off.zf.toggler');\n        }\n\n        this._updateARIA(isOn);\n      }\n\n      return _toggleClass;\n    }();\n\n    Toggler.prototype._toggleAnimate = function () {\n      function _toggleAnimate() {\n        var _this = this;\n\n        if (this.$element.is(':hidden')) {\n          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {\n            _this._updateARIA(true);\n            this.trigger('on.zf.toggler');\n          });\n        } else {\n          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {\n            _this._updateARIA(false);\n            this.trigger('off.zf.toggler');\n          });\n        }\n      }\n\n      return _toggleAnimate;\n    }();\n\n    Toggler.prototype._updateARIA = function () {\n      function _updateARIA(isOn) {\n        this.$element.attr('aria-expanded', isOn ? true : false);\n      }\n\n      return _updateARIA;\n    }();\n\n    /**\n     * Destroys the instance of Toggler on the element.\n     * @function\n     */\n\n\n    Toggler.prototype.destroy = function () {\n      function destroy() {\n        this.$element.off('.zf.toggler');\n        Foundation.unregisterPlugin(this);\n      }\n\n      return destroy;\n    }();\n\n    return Toggler;\n  }();\n\n  Toggler.defaults = {\n    /**\n     * Tells the plugin if the element should animated when toggled.\n     * @option\n     * @example false\n     */\n    animate: false\n  };\n\n  // Window exports\n  Foundation.plugin(Toggler, 'Toggler');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.toggler.js"],"names":[],"mappings":"AAAA;;;;;;;;AAEA,CAAC,UAAS,CAAT,EAAY;;;;;;;;;AAAA,MASP,OATO;;;;;;;;;AAiBX,qBAAY,OAAZ,EAAqB,OAArB,EAA8B;AAAA;;AAC5B,WAAK,QAAL,GAAgB,OAAhB;AACA,WAAK,OAAL,GAAe,EAAE,MAAF,CAAS,EAAT,EAAa,QAAQ,QAArB,EAA+B,QAAQ,IAAR,EAA/B,EAA+C,OAA/C,CAAf;AACA,WAAK,SAAL,GAAiB,EAAjB;;AAEA,WAAK,KAAL;AACA,WAAK,OAAL;;AAEA,iBAAW,cAAX,CAA0B,IAA1B,EAAgC,SAAhC;AACD;;;;;;;;;AA1BU,sBAiCX,KAjCW;AAAA,uBAiCH;AACN,YAAI,KAAJ;;AAEA,YAAI,KAAK,OAAL,CAAa,OAAjB,EAA0B;AACxB,kBAAQ,KAAK,OAAL,CAAa,OAAb,CAAqB,KAArB,CAA2B,GAA3B,CAAR;;AAEA,eAAK,WAAL,GAAmB,MAAM,CAAN,CAAnB;AACA,eAAK,YAAL,GAAoB,MAAM,CAAN,KAAY,IAAhC;AACD;;AALD,aAOK;AACH,oBAAQ,KAAK,QAAL,CAAc,IAAd,CAAmB,SAAnB,CAAR;;AAEA,iBAAK,SAAL,GAAiB,MAAM,CAAN,MAAa,GAAb,GAAmB,MAAM,KAAN,CAAY,CAAZ,CAAnB,GAAoC,KAArD;AACD;;;AAGD,YAAI,KAAK,KAAK,QAAL,CAAc,CAAd,EAAiB,EAA1B;AACA,2BAAiB,EAAjB,yBAAuC,EAAvC,0BAA8D,EAA9D,SACG,IADH,CACQ,eADR,EACyB,EADzB;;AAGA,aAAK,QAAL,CAAc,IAAd,CAAmB,eAAnB,EAAoC,KAAK,QAAL,CAAc,EAAd,CAAiB,SAAjB,IAA8B,KAA9B,GAAsC,IAA1E;AACD;;AAvDU;AAAA;;;;;;;;;AAAA,sBA8DX,OA9DW;AAAA,yBA8DD;AACR,aAAK,QAAL,CAAc,GAAd,CAAkB,mBAAlB,EAAuC,EAAvC,CAA0C,mBAA1C,EAA+D,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAA/D;AACD;;AAhEU;AAAA;;;;;;;;;;AAAA,sBAwEX,MAxEW;AAAA,wBAwEF;AACP,aAAM,KAAK,OAAL,CAAa,OAAb,GAAuB,gBAAvB,GAA0C,cAAhD;AACD;;AA1EU;AAAA;;AAAA,sBA4EX,YA5EW;AAAA,8BA4EI;AACb,aAAK,QAAL,CAAc,WAAd,CAA0B,KAAK,SAA/B;;AAEA,YAAI,OAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,SAA5B,CAAX;AACA,YAAI,IAAJ,EAAU;;;;;AAKR,eAAK,QAAL,CAAc,OAAd,CAAsB,eAAtB;AACD,SAND,MAOK;;;;;AAKH,eAAK,QAAL,CAAc,OAAd,CAAsB,gBAAtB;AACD;;AAED,aAAK,WAAL,CAAiB,IAAjB;AACD;;AAhGU;AAAA;;AAAA,sBAkGX,cAlGW;AAAA,gCAkGM;AACf,YAAI,QAAQ,IAAZ;;AAEA,YAAI,KAAK,QAAL,CAAc,EAAd,CAAiB,SAAjB,CAAJ,EAAiC;AAC/B,qBAAW,MAAX,CAAkB,SAAlB,CAA4B,KAAK,QAAjC,EAA2C,KAAK,WAAhD,EAA6D,YAAW;AACtE,kBAAM,WAAN,CAAkB,IAAlB;AACA,iBAAK,OAAL,CAAa,eAAb;AACD,WAHD;AAID,SALD,MAMK;AACH,qBAAW,MAAX,CAAkB,UAAlB,CAA6B,KAAK,QAAlC,EAA4C,KAAK,YAAjD,EAA+D,YAAW;AACxE,kBAAM,WAAN,CAAkB,KAAlB;AACA,iBAAK,OAAL,CAAa,gBAAb;AACD,WAHD;AAID;AACF;;AAjHU;AAAA;;AAAA,sBAmHX,WAnHW;AAAA,2BAmHC,IAnHD,EAmHO;AAChB,aAAK,QAAL,CAAc,IAAd,CAAmB,eAAnB,EAAoC,OAAO,IAAP,GAAc,KAAlD;AACD;;AArHU;AAAA;;;;;;;;AAAA,sBA2HX,OA3HW;AAAA,yBA2HD;AACR,aAAK,QAAL,CAAc,GAAd,CAAkB,aAAlB;AACA,mBAAW,gBAAX,CAA4B,IAA5B;AACD;;AA9HU;AAAA;;AAAA;AAAA;;AAiIb,UAAQ,QAAR,GAAmB;;;;;;AAMjB,aAAS;AANQ,GAAnB;;;AAUA,aAAW,MAAX,CAAkB,OAAlB,EAA2B,SAA3B;AAEC,CA7IA,CA6IC,MA7ID,CAAD","file":"/packages/zurb:foundation-sites/js/foundation.toggler.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * Toggler module.\n * @module foundation.toggler\n * @requires foundation.util.motion\n * @requires foundation.util.triggers\n */\n\nclass Toggler {\n  /**\n   * Creates a new instance of Toggler.\n   * @class\n   * @fires Toggler#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  constructor(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Toggler.defaults, element.data(), options);\n    this.className = '';\n\n    this._init();\n    this._events();\n\n    Foundation.registerPlugin(this, 'Toggler');\n  }\n\n  /**\n   * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n   * @function\n   * @private\n   */\n  _init() {\n    var input;\n    // Parse animation classes if they were set\n    if (this.options.animate) {\n      input = this.options.animate.split(' ');\n\n      this.animationIn = input[0];\n      this.animationOut = input[1] || null;\n    }\n    // Otherwise, parse toggle class\n    else {\n      input = this.$element.data('toggler');\n      // Allow for a . at the beginning of the string\n      this.className = input[0] === '.' ? input.slice(1) : input;\n    }\n\n    // Add ARIA attributes to triggers\n    var id = this.$element[0].id;\n    $(`[data-open=\"${id}\"], [data-close=\"${id}\"], [data-toggle=\"${id}\"]`)\n      .attr('aria-controls', id);\n    // If the target is hidden, add aria-hidden\n    this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\n  }\n\n  /**\n   * Initializes events for the toggle trigger.\n   * @function\n   * @private\n   */\n  _events() {\n    this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\n  }\n\n  /**\n   * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n   * @function\n   * @fires Toggler#on\n   * @fires Toggler#off\n   */\n  toggle() {\n    this[ this.options.animate ? '_toggleAnimate' : '_toggleClass']();\n  }\n\n  _toggleClass() {\n    this.$element.toggleClass(this.className);\n\n    var isOn = this.$element.hasClass(this.className);\n    if (isOn) {\n      /**\n       * Fires if the target element has the class after a toggle.\n       * @event Toggler#on\n       */\n      this.$element.trigger('on.zf.toggler');\n    }\n    else {\n      /**\n       * Fires if the target element does not have the class after a toggle.\n       * @event Toggler#off\n       */\n      this.$element.trigger('off.zf.toggler');\n    }\n\n    this._updateARIA(isOn);\n  }\n\n  _toggleAnimate() {\n    var _this = this;\n\n    if (this.$element.is(':hidden')) {\n      Foundation.Motion.animateIn(this.$element, this.animationIn, function() {\n        _this._updateARIA(true);\n        this.trigger('on.zf.toggler');\n      });\n    }\n    else {\n      Foundation.Motion.animateOut(this.$element, this.animationOut, function() {\n        _this._updateARIA(false);\n        this.trigger('off.zf.toggler');\n      });\n    }\n  }\n\n  _updateARIA(isOn) {\n    this.$element.attr('aria-expanded', isOn ? true : false);\n  }\n\n  /**\n   * Destroys the instance of Toggler on the element.\n   * @function\n   */\n  destroy() {\n    this.$element.off('.zf.toggler');\n    Foundation.unregisterPlugin(this);\n  }\n}\n\nToggler.defaults = {\n  /**\n   * Tells the plugin if the element should animated when toggled.\n   * @option\n   * @example false\n   */\n  animate: false\n};\n\n// Window exports\nFoundation.plugin(Toggler, 'Toggler');\n\n}(jQuery);\n"]},"hash":"c96757427dd85fe37a4c1f1222ad880d8f727647"}
