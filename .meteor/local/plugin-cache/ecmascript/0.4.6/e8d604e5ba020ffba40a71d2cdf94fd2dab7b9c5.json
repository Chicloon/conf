{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/dist/plugins/foundation.toggler.js","filenameRelative":"/packages/zurb:foundation-sites/dist/plugins/foundation.toggler.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/dist/plugins/foundation.toggler.js.map","sourceFileName":"/packages/zurb:foundation-sites/dist/plugins/foundation.toggler.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.toggler"},"ignored":false,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n!function ($) {\n\n  /**\n   * Toggler module.\n   * @module foundation.toggler\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   */\n\n  var Toggler = function () {\n    /**\n     * Creates a new instance of Toggler.\n     * @class\n     * @fires Toggler#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Toggler(element, options) {\n      _classCallCheck(this, Toggler);\n\n      this.$element = element;\n      this.options = $.extend({}, Toggler.defaults, element.data(), options);\n      this.className = '';\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'Toggler');\n    }\n\n    /**\n     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n     * @function\n     * @private\n     */\n\n    _createClass(Toggler, [{\n      key: '_init',\n      value: function () {\n        function _init() {\n          var input;\n          // Parse animation classes if they were set\n          if (this.options.animate) {\n            input = this.options.animate.split(' ');\n\n            this.animationIn = input[0];\n            this.animationOut = input[1] || null;\n          }\n          // Otherwise, parse toggle class\n          else {\n              input = this.$element.data('toggler');\n              // Allow for a . at the beginning of the string\n              this.className = input[0] === '.' ? input.slice(1) : input;\n            }\n\n          // Add ARIA attributes to triggers\n          var id = this.$element[0].id;\n          $('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-controls', id);\n          // If the target is hidden, add aria-hidden\n          this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\n        }\n\n        return _init;\n      }()\n\n      /**\n       * Initializes events for the toggle trigger.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function () {\n        function _events() {\n          this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\n        }\n\n        return _events;\n      }()\n\n      /**\n       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n       * @function\n       * @fires Toggler#on\n       * @fires Toggler#off\n       */\n\n    }, {\n      key: 'toggle',\n      value: function () {\n        function toggle() {\n          this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();\n        }\n\n        return toggle;\n      }()\n    }, {\n      key: '_toggleClass',\n      value: function () {\n        function _toggleClass() {\n          this.$element.toggleClass(this.className);\n\n          var isOn = this.$element.hasClass(this.className);\n          if (isOn) {\n            /**\n             * Fires if the target element has the class after a toggle.\n             * @event Toggler#on\n             */\n            this.$element.trigger('on.zf.toggler');\n          } else {\n            /**\n             * Fires if the target element does not have the class after a toggle.\n             * @event Toggler#off\n             */\n            this.$element.trigger('off.zf.toggler');\n          }\n\n          this._updateARIA(isOn);\n        }\n\n        return _toggleClass;\n      }()\n    }, {\n      key: '_toggleAnimate',\n      value: function () {\n        function _toggleAnimate() {\n          var _this = this;\n\n          if (this.$element.is(':hidden')) {\n            Foundation.Motion.animateIn(this.$element, this.animationIn, function () {\n              _this._updateARIA(true);\n              this.trigger('on.zf.toggler');\n            });\n          } else {\n            Foundation.Motion.animateOut(this.$element, this.animationOut, function () {\n              _this._updateARIA(false);\n              this.trigger('off.zf.toggler');\n            });\n          }\n        }\n\n        return _toggleAnimate;\n      }()\n    }, {\n      key: '_updateARIA',\n      value: function () {\n        function _updateARIA(isOn) {\n          this.$element.attr('aria-expanded', isOn ? true : false);\n        }\n\n        return _updateARIA;\n      }()\n\n      /**\n       * Destroys the instance of Toggler on the element.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function () {\n        function destroy() {\n          this.$element.off('.zf.toggler');\n          Foundation.unregisterPlugin(this);\n        }\n\n        return destroy;\n      }()\n    }]);\n\n    return Toggler;\n  }();\n\n  Toggler.defaults = {\n    /**\n     * Tells the plugin if the element should animated when toggled.\n     * @option\n     * @example false\n     */\n    animate: false\n  };\n\n  // Window exports\n  Foundation.plugin(Toggler, 'Toggler');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/dist/plugins/foundation.toggler.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/dist/plugins/foundation.toggler.js.map","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Toggler module.\n   * @module foundation.toggler\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   */\n\n  var Toggler = function () {\n    /**\n     * Creates a new instance of Toggler.\n     * @class\n     * @fires Toggler#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n\n    function Toggler(element, options) {\n      _classCallCheck(this, Toggler);\n\n      this.$element = element;\n      this.options = $.extend({}, Toggler.defaults, element.data(), options);\n      this.className = '';\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'Toggler');\n    }\n\n    /**\n     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n     * @function\n     * @private\n     */\n\n\n    _createClass(Toggler, [{\n      key: '_init',\n      value: function _init() {\n        var input;\n        // Parse animation classes if they were set\n        if (this.options.animate) {\n          input = this.options.animate.split(' ');\n\n          this.animationIn = input[0];\n          this.animationOut = input[1] || null;\n        }\n        // Otherwise, parse toggle class\n        else {\n            input = this.$element.data('toggler');\n            // Allow for a . at the beginning of the string\n            this.className = input[0] === '.' ? input.slice(1) : input;\n          }\n\n        // Add ARIA attributes to triggers\n        var id = this.$element[0].id;\n        $('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-controls', id);\n        // If the target is hidden, add aria-hidden\n        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\n      }\n\n      /**\n       * Initializes events for the toggle trigger.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\n      }\n\n      /**\n       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n       * @function\n       * @fires Toggler#on\n       * @fires Toggler#off\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle() {\n        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();\n      }\n    }, {\n      key: '_toggleClass',\n      value: function _toggleClass() {\n        this.$element.toggleClass(this.className);\n\n        var isOn = this.$element.hasClass(this.className);\n        if (isOn) {\n          /**\n           * Fires if the target element has the class after a toggle.\n           * @event Toggler#on\n           */\n          this.$element.trigger('on.zf.toggler');\n        } else {\n          /**\n           * Fires if the target element does not have the class after a toggle.\n           * @event Toggler#off\n           */\n          this.$element.trigger('off.zf.toggler');\n        }\n\n        this._updateARIA(isOn);\n      }\n    }, {\n      key: '_toggleAnimate',\n      value: function _toggleAnimate() {\n        var _this = this;\n\n        if (this.$element.is(':hidden')) {\n          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {\n            _this._updateARIA(true);\n            this.trigger('on.zf.toggler');\n          });\n        } else {\n          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {\n            _this._updateARIA(false);\n            this.trigger('off.zf.toggler');\n          });\n        }\n      }\n    }, {\n      key: '_updateARIA',\n      value: function _updateARIA(isOn) {\n        this.$element.attr('aria-expanded', isOn ? true : false);\n      }\n\n      /**\n       * Destroys the instance of Toggler on the element.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.off('.zf.toggler');\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Toggler;\n  }();\n\n  Toggler.defaults = {\n    /**\n     * Tells the plugin if the element should animated when toggled.\n     * @option\n     * @example false\n     */\n    animate: false\n  };\n\n  // Window exports\n  Foundation.plugin(Toggler, 'Toggler');\n}(jQuery);"]},"hash":"e8d604e5ba020ffba40a71d2cdf94fd2dab7b9c5"}
