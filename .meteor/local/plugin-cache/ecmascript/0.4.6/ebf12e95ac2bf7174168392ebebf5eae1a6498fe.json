{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/zurb:foundation-sites/js/foundation.tooltip.js","filenameRelative":"/packages/zurb:foundation-sites/js/foundation.tooltip.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/zurb:foundation-sites/js/foundation.tooltip.js.map","sourceFileName":"/packages/zurb:foundation-sites/js/foundation.tooltip.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"foundation.tooltip"},"ignored":false,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n!function ($) {\n\n  /**\n   * Tooltip module.\n   * @module foundation.tooltip\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   */\n\n  var Tooltip = function () {\n    /**\n     * Creates a new instance of a Tooltip.\n     * @class\n     * @fires Tooltip#init\n     * @param {jQuery} element - jQuery object to attach a tooltip to.\n     * @param {Object} options - object to extend the default configuration.\n     */\n\n    function Tooltip(element, options) {\n      (0, _classCallCheck3['default'])(this, Tooltip);\n\n      this.$element = element;\n      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);\n\n      this.isActive = false;\n      this.isClick = false;\n      this._init();\n\n      Foundation.registerPlugin(this, 'Tooltip');\n    }\n\n    /**\n     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\n     * @private\n     */\n\n\n    Tooltip.prototype._init = function () {\n      function _init() {\n        var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');\n\n        this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);\n        this.options.tipText = this.options.tipText || this.$element.attr('title');\n        this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);\n\n        this.template.appendTo(document.body).text(this.options.tipText).hide();\n\n        this.$element.attr({\n          'title': '',\n          'aria-describedby': elemId,\n          'data-yeti-box': elemId,\n          'data-toggle': elemId,\n          'data-resize': elemId\n        }).addClass(this.triggerClass);\n\n        //helper variables to track movement on collisions\n        this.usedPositions = [];\n        this.counter = 4;\n        this.classChanged = false;\n\n        this._events();\n      }\n\n      return _init;\n    }();\n\n    /**\n     * Grabs the current positioning class, if present, and returns the value or an empty string.\n     * @private\n     */\n\n\n    Tooltip.prototype._getPositionClass = function () {\n      function _getPositionClass(element) {\n        if (!element) {\n          return '';\n        }\n        // var position = element.attr('class').match(/top|left|right/g);\n        var position = element[0].className.match(/\\b(top|left|right)\\b/g);\n        position = position ? position[0] : '';\n        return position;\n      }\n\n      return _getPositionClass;\n    }();\n\n    /**\n     * builds the tooltip element, adds attributes, and returns the template.\n     * @private\n     */\n\n    Tooltip.prototype._buildTemplate = function () {\n      function _buildTemplate(id) {\n        var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();\n        var $template = $('<div></div>').addClass(templateClasses).attr({\n          'role': 'tooltip',\n          'aria-hidden': true,\n          'data-is-active': false,\n          'data-is-focus': false,\n          'id': id\n        });\n        return $template;\n      }\n\n      return _buildTemplate;\n    }();\n\n    /**\n     * Function that gets called if a collision event is detected.\n     * @param {String} position - positioning class to try\n     * @private\n     */\n\n\n    Tooltip.prototype._reposition = function () {\n      function _reposition(position) {\n        this.usedPositions.push(position ? position : 'bottom');\n\n        //default, try switching to opposite side\n        if (!position && this.usedPositions.indexOf('top') < 0) {\n          this.template.addClass('top');\n        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {\n          this.template.removeClass(position);\n        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {\n          this.template.removeClass(position).addClass('right');\n        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {\n          this.template.removeClass(position).addClass('left');\n        }\n\n        //if default change didn't work, try bottom or left first\n        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {\n            this.template.addClass('left');\n          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {\n            this.template.removeClass(position).addClass('left');\n          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n            this.template.removeClass(position);\n          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n            this.template.removeClass(position);\n          }\n          //if nothing cleared, set to bottom\n          else {\n              this.template.removeClass(position);\n            }\n        this.classChanged = true;\n        this.counter--;\n      }\n\n      return _reposition;\n    }();\n\n    /**\n     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\n     * if the tooltip is larger than the screen width, default to full width - any user selected margin\n     * @private\n     */\n\n\n    Tooltip.prototype._setPosition = function () {\n      function _setPosition() {\n        var position = this._getPositionClass(this.template),\n            $tipDims = Foundation.Box.GetDimensions(this.template),\n            $anchorDims = Foundation.Box.GetDimensions(this.$element),\n            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',\n            param = direction === 'top' ? 'height' : 'width',\n            offset = param === 'height' ? this.options.vOffset : this.options.hOffset,\n            _this = this;\n\n        if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {\n          this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n            // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n            'width': $anchorDims.windowDims.width - this.options.hOffset * 2,\n            'height': 'auto'\n          });\n          return false;\n        }\n\n        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));\n\n        while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {\n          this._reposition(position);\n          this._setPosition();\n        }\n      }\n\n      return _setPosition;\n    }();\n\n    /**\n     * reveals the tooltip, and fires an event to close any other open tooltips on the page\n     * @fires Tooltip#closeme\n     * @fires Tooltip#show\n     * @function\n     */\n\n\n    Tooltip.prototype.show = function () {\n      function show() {\n        if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {\n          // console.error('The screen is too small to display this tooltip');\n          return false;\n        }\n\n        var _this = this;\n        this.template.css('visibility', 'hidden').show();\n        this._setPosition();\n\n        /**\n         * Fires to close all other open tooltips on the page\n         * @event Closeme#tooltip\n         */\n        this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));\n\n        this.template.attr({\n          'data-is-active': true,\n          'aria-hidden': false\n        });\n        _this.isActive = true;\n        // console.log(this.template);\n        this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {\n          //maybe do stuff?\n        });\n        /**\n         * Fires when the tooltip is shown\n         * @event Tooltip#show\n         */\n        this.$element.trigger('show.zf.tooltip');\n      }\n\n      return show;\n    }();\n\n    /**\n     * Hides the current tooltip, and resets the positioning class if it was changed due to collision\n     * @fires Tooltip#hide\n     * @function\n     */\n\n\n    Tooltip.prototype.hide = function () {\n      function hide() {\n        // console.log('hiding', this.$element.data('yeti-box'));\n        var _this = this;\n        this.template.stop().attr({\n          'aria-hidden': true,\n          'data-is-active': false\n        }).fadeOut(this.options.fadeOutDuration, function () {\n          _this.isActive = false;\n          _this.isClick = false;\n          if (_this.classChanged) {\n            _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);\n\n            _this.usedPositions = [];\n            _this.counter = 4;\n            _this.classChanged = false;\n          }\n        });\n        /**\n         * fires when the tooltip is hidden\n         * @event Tooltip#hide\n         */\n        this.$element.trigger('hide.zf.tooltip');\n      }\n\n      return hide;\n    }();\n\n    /**\n     * adds event listeners for the tooltip and its anchor\n     * TODO combine some of the listeners like focus and mouseenter, etc.\n     * @private\n     */\n\n\n    Tooltip.prototype._events = function () {\n      function _events() {\n        var _this = this;\n        var $template = this.template;\n        var isFocus = false;\n\n        if (!this.options.disableHover) {\n\n          this.$element.on('mouseenter.zf.tooltip', function (e) {\n            if (!_this.isActive) {\n              _this.timeout = setTimeout(function () {\n                _this.show();\n              }, _this.options.hoverDelay);\n            }\n          }).on('mouseleave.zf.tooltip', function (e) {\n            clearTimeout(_this.timeout);\n            if (!isFocus || _this.isClick && !_this.options.clickOpen) {\n              _this.hide();\n            }\n          });\n        }\n\n        if (this.options.clickOpen) {\n          this.$element.on('mousedown.zf.tooltip', function (e) {\n            e.stopImmediatePropagation();\n            if (_this.isClick) {\n              //_this.hide();\n              // _this.isClick = false;\n            } else {\n                _this.isClick = true;\n                if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {\n                  _this.show();\n                }\n              }\n          });\n        } else {\n          this.$element.on('mousedown.zf.tooltip', function (e) {\n            e.stopImmediatePropagation();\n            _this.isClick = true;\n          });\n        }\n\n        if (!this.options.disableForTouch) {\n          this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {\n            _this.isActive ? _this.hide() : _this.show();\n          });\n        }\n\n        this.$element.on({\n          // 'toggle.zf.trigger': this.toggle.bind(this),\n          // 'close.zf.trigger': this.hide.bind(this)\n          'close.zf.trigger': this.hide.bind(this)\n        });\n\n        this.$element.on('focus.zf.tooltip', function (e) {\n          isFocus = true;\n          if (_this.isClick) {\n            // If we're not showing open on clicks, we need to pretend a click-launched focus isn't\n            // a real focus, otherwise on hover and come back we get bad behavior\n            if (!_this.options.clickOpen) {\n              isFocus = false;\n            }\n            return false;\n          } else {\n            _this.show();\n          }\n        }).on('focusout.zf.tooltip', function (e) {\n          isFocus = false;\n          _this.isClick = false;\n          _this.hide();\n        }).on('resizeme.zf.trigger', function () {\n          if (_this.isActive) {\n            _this._setPosition();\n          }\n        });\n      }\n\n      return _events;\n    }();\n\n    /**\n     * adds a toggle method, in addition to the static show() & hide() functions\n     * @function\n     */\n\n\n    Tooltip.prototype.toggle = function () {\n      function toggle() {\n        if (this.isActive) {\n          this.hide();\n        } else {\n          this.show();\n        }\n      }\n\n      return toggle;\n    }();\n\n    /**\n     * Destroys an instance of tooltip, removes template element from the view.\n     * @function\n     */\n\n\n    Tooltip.prototype.destroy = function () {\n      function destroy() {\n        this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tootip')\n        //  .removeClass('has-tip')\n        .removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');\n\n        this.template.remove();\n\n        Foundation.unregisterPlugin(this);\n      }\n\n      return destroy;\n    }();\n\n    return Tooltip;\n  }();\n\n  Tooltip.defaults = {\n    disableForTouch: false,\n    /**\n     * Time, in ms, before a tooltip should open on hover.\n     * @option\n     * @example 200\n     */\n    hoverDelay: 200,\n    /**\n     * Time, in ms, a tooltip should take to fade into view.\n     * @option\n     * @example 150\n     */\n    fadeInDuration: 150,\n    /**\n     * Time, in ms, a tooltip should take to fade out of view.\n     * @option\n     * @example 150\n     */\n    fadeOutDuration: 150,\n    /**\n     * Disables hover events from opening the tooltip if set to true\n     * @option\n     * @example false\n     */\n    disableHover: false,\n    /**\n     * Optional addtional classes to apply to the tooltip template on init.\n     * @option\n     * @example 'my-cool-tip-class'\n     */\n    templateClasses: '',\n    /**\n     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\n     * @option\n     * @example 'tooltip'\n     */\n    tooltipClass: 'tooltip',\n    /**\n     * Class applied to the tooltip anchor element.\n     * @option\n     * @example 'has-tip'\n     */\n    triggerClass: 'has-tip',\n    /**\n     * Minimum breakpoint size at which to open the tooltip.\n     * @option\n     * @example 'small'\n     */\n    showOn: 'small',\n    /**\n     * Custom template to be used to generate markup for tooltip.\n     * @option\n     * @example '&lt;div class=\"tooltip\"&gt;&lt;/div&gt;'\n     */\n    template: '',\n    /**\n     * Text displayed in the tooltip template on open.\n     * @option\n     * @example 'Some cool space fact here.'\n     */\n    tipText: '',\n    touchCloseText: 'Tap to close.',\n    /**\n     * Allows the tooltip to remain open if triggered with a click or touch event.\n     * @option\n     * @example true\n     */\n    clickOpen: true,\n    /**\n     * Additional positioning classes, set by the JS\n     * @option\n     * @example 'top'\n     */\n    positionClass: '',\n    /**\n     * Distance, in pixels, the template should push away from the anchor on the Y axis.\n     * @option\n     * @example 10\n     */\n    vOffset: 10,\n    /**\n     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.\n     * @option\n     * @example 12\n     */\n    hOffset: 12\n  };\n\n  /**\n   * TODO utilize resize event trigger\n   */\n\n  // Window exports\n  Foundation.plugin(Tooltip, 'Tooltip');\n}(jQuery);","ast":null,"map":{"version":3,"sources":["/packages/zurb:foundation-sites/js/foundation.tooltip.js"],"names":[],"mappings":"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","file":"/packages/zurb:foundation-sites/js/foundation.tooltip.js.map","sourcesContent":["'use strict';\n\n!function($) {\n\n/**\n * Tooltip module.\n * @module foundation.tooltip\n * @requires foundation.util.box\n * @requires foundation.util.triggers\n */\n\nclass Tooltip {\n  /**\n   * Creates a new instance of a Tooltip.\n   * @class\n   * @fires Tooltip#init\n   * @param {jQuery} element - jQuery object to attach a tooltip to.\n   * @param {Object} options - object to extend the default configuration.\n   */\n  constructor(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);\n\n    this.isActive = false;\n    this.isClick = false;\n    this._init();\n\n    Foundation.registerPlugin(this, 'Tooltip');\n  }\n\n  /**\n   * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\n   * @private\n   */\n  _init() {\n    var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');\n\n    this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);\n    this.options.tipText = this.options.tipText || this.$element.attr('title');\n    this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);\n\n    this.template.appendTo(document.body)\n        .text(this.options.tipText)\n        .hide();\n\n    this.$element.attr({\n      'title': '',\n      'aria-describedby': elemId,\n      'data-yeti-box': elemId,\n      'data-toggle': elemId,\n      'data-resize': elemId\n    }).addClass(this.triggerClass);\n\n    //helper variables to track movement on collisions\n    this.usedPositions = [];\n    this.counter = 4;\n    this.classChanged = false;\n\n    this._events();\n  }\n\n  /**\n   * Grabs the current positioning class, if present, and returns the value or an empty string.\n   * @private\n   */\n  _getPositionClass(element) {\n    if (!element) { return ''; }\n    // var position = element.attr('class').match(/top|left|right/g);\n    var position = element[0].className.match(/\\b(top|left|right)\\b/g);\n        position = position ? position[0] : '';\n    return position;\n  };\n  /**\n   * builds the tooltip element, adds attributes, and returns the template.\n   * @private\n   */\n  _buildTemplate(id) {\n    var templateClasses = (`${this.options.tooltipClass} ${this.options.positionClass} ${this.options.templateClasses}`).trim();\n    var $template =  $('<div></div>').addClass(templateClasses).attr({\n      'role': 'tooltip',\n      'aria-hidden': true,\n      'data-is-active': false,\n      'data-is-focus': false,\n      'id': id\n    });\n    return $template;\n  }\n\n  /**\n   * Function that gets called if a collision event is detected.\n   * @param {String} position - positioning class to try\n   * @private\n   */\n  _reposition(position) {\n    this.usedPositions.push(position ? position : 'bottom');\n\n    //default, try switching to opposite side\n    if (!position && (this.usedPositions.indexOf('top') < 0)) {\n      this.template.addClass('top');\n    } else if (position === 'top' && (this.usedPositions.indexOf('bottom') < 0)) {\n      this.template.removeClass(position);\n    } else if (position === 'left' && (this.usedPositions.indexOf('right') < 0)) {\n      this.template.removeClass(position)\n          .addClass('right');\n    } else if (position === 'right' && (this.usedPositions.indexOf('left') < 0)) {\n      this.template.removeClass(position)\n          .addClass('left');\n    }\n\n    //if default change didn't work, try bottom or left first\n    else if (!position && (this.usedPositions.indexOf('top') > -1) && (this.usedPositions.indexOf('left') < 0)) {\n      this.template.addClass('left');\n    } else if (position === 'top' && (this.usedPositions.indexOf('bottom') > -1) && (this.usedPositions.indexOf('left') < 0)) {\n      this.template.removeClass(position)\n          .addClass('left');\n    } else if (position === 'left' && (this.usedPositions.indexOf('right') > -1) && (this.usedPositions.indexOf('bottom') < 0)) {\n      this.template.removeClass(position);\n    } else if (position === 'right' && (this.usedPositions.indexOf('left') > -1) && (this.usedPositions.indexOf('bottom') < 0)) {\n      this.template.removeClass(position);\n    }\n    //if nothing cleared, set to bottom\n    else {\n      this.template.removeClass(position);\n    }\n    this.classChanged = true;\n    this.counter--;\n  }\n\n  /**\n   * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\n   * if the tooltip is larger than the screen width, default to full width - any user selected margin\n   * @private\n   */\n  _setPosition() {\n    var position = this._getPositionClass(this.template),\n        $tipDims = Foundation.Box.GetDimensions(this.template),\n        $anchorDims = Foundation.Box.GetDimensions(this.$element),\n        direction = (position === 'left' ? 'left' : ((position === 'right') ? 'left' : 'top')),\n        param = (direction === 'top') ? 'height' : 'width',\n        offset = (param === 'height') ? this.options.vOffset : this.options.hOffset,\n        _this = this;\n\n    if (($tipDims.width >= $tipDims.windowDims.width) || (!this.counter && !Foundation.Box.ImNotTouchingYou(this.template))) {\n      this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n      // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n        'width': $anchorDims.windowDims.width - (this.options.hOffset * 2),\n        'height': 'auto'\n      });\n      return false;\n    }\n\n    this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element,'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));\n\n    while(!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {\n      this._reposition(position);\n      this._setPosition();\n    }\n  }\n\n  /**\n   * reveals the tooltip, and fires an event to close any other open tooltips on the page\n   * @fires Tooltip#closeme\n   * @fires Tooltip#show\n   * @function\n   */\n  show() {\n    if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {\n      // console.error('The screen is too small to display this tooltip');\n      return false;\n    }\n\n    var _this = this;\n    this.template.css('visibility', 'hidden').show();\n    this._setPosition();\n\n    /**\n     * Fires to close all other open tooltips on the page\n     * @event Closeme#tooltip\n     */\n    this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));\n\n\n    this.template.attr({\n      'data-is-active': true,\n      'aria-hidden': false\n    });\n    _this.isActive = true;\n    // console.log(this.template);\n    this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function() {\n      //maybe do stuff?\n    });\n    /**\n     * Fires when the tooltip is shown\n     * @event Tooltip#show\n     */\n    this.$element.trigger('show.zf.tooltip');\n  }\n\n  /**\n   * Hides the current tooltip, and resets the positioning class if it was changed due to collision\n   * @fires Tooltip#hide\n   * @function\n   */\n  hide() {\n    // console.log('hiding', this.$element.data('yeti-box'));\n    var _this = this;\n    this.template.stop().attr({\n      'aria-hidden': true,\n      'data-is-active': false\n    }).fadeOut(this.options.fadeOutDuration, function() {\n      _this.isActive = false;\n      _this.isClick = false;\n      if (_this.classChanged) {\n        _this.template\n             .removeClass(_this._getPositionClass(_this.template))\n             .addClass(_this.options.positionClass);\n\n       _this.usedPositions = [];\n       _this.counter = 4;\n       _this.classChanged = false;\n      }\n    });\n    /**\n     * fires when the tooltip is hidden\n     * @event Tooltip#hide\n     */\n    this.$element.trigger('hide.zf.tooltip');\n  }\n\n  /**\n   * adds event listeners for the tooltip and its anchor\n   * TODO combine some of the listeners like focus and mouseenter, etc.\n   * @private\n   */\n  _events() {\n    var _this = this;\n    var $template = this.template;\n    var isFocus = false;\n\n    if (!this.options.disableHover) {\n\n      this.$element\n      .on('mouseenter.zf.tooltip', function(e) {\n        if (!_this.isActive) {\n          _this.timeout = setTimeout(function() {\n            _this.show();\n          }, _this.options.hoverDelay);\n        }\n      })\n      .on('mouseleave.zf.tooltip', function(e) {\n        clearTimeout(_this.timeout);\n        if (!isFocus || (_this.isClick && !_this.options.clickOpen)) {\n          _this.hide();\n        }\n      });\n    }\n\n    if (this.options.clickOpen) {\n      this.$element.on('mousedown.zf.tooltip', function(e) {\n        e.stopImmediatePropagation();\n        if (_this.isClick) {\n          //_this.hide();\n          // _this.isClick = false;\n        } else {\n          _this.isClick = true;\n          if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {\n            _this.show();\n          }\n        }\n      });\n    } else {\n      this.$element.on('mousedown.zf.tooltip', function(e) {\n        e.stopImmediatePropagation();\n        _this.isClick = true;\n      });\n    }\n\n    if (!this.options.disableForTouch) {\n      this.$element\n      .on('tap.zf.tooltip touchend.zf.tooltip', function(e) {\n        _this.isActive ? _this.hide() : _this.show();\n      });\n    }\n\n    this.$element.on({\n      // 'toggle.zf.trigger': this.toggle.bind(this),\n      // 'close.zf.trigger': this.hide.bind(this)\n      'close.zf.trigger': this.hide.bind(this)\n    });\n\n    this.$element\n      .on('focus.zf.tooltip', function(e) {\n        isFocus = true;\n        if (_this.isClick) {\n          // If we're not showing open on clicks, we need to pretend a click-launched focus isn't\n          // a real focus, otherwise on hover and come back we get bad behavior\n          if(!_this.options.clickOpen) { isFocus = false; }\n          return false;\n        } else {\n          _this.show();\n        }\n      })\n\n      .on('focusout.zf.tooltip', function(e) {\n        isFocus = false;\n        _this.isClick = false;\n        _this.hide();\n      })\n\n      .on('resizeme.zf.trigger', function() {\n        if (_this.isActive) {\n          _this._setPosition();\n        }\n      });\n  }\n\n  /**\n   * adds a toggle method, in addition to the static show() & hide() functions\n   * @function\n   */\n  toggle() {\n    if (this.isActive) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Destroys an instance of tooltip, removes template element from the view.\n   * @function\n   */\n  destroy() {\n    this.$element.attr('title', this.template.text())\n                 .off('.zf.trigger .zf.tootip')\n                //  .removeClass('has-tip')\n                 .removeAttr('aria-describedby')\n                 .removeAttr('data-yeti-box')\n                 .removeAttr('data-toggle')\n                 .removeAttr('data-resize');\n\n    this.template.remove();\n\n    Foundation.unregisterPlugin(this);\n  }\n}\n\nTooltip.defaults = {\n  disableForTouch: false,\n  /**\n   * Time, in ms, before a tooltip should open on hover.\n   * @option\n   * @example 200\n   */\n  hoverDelay: 200,\n  /**\n   * Time, in ms, a tooltip should take to fade into view.\n   * @option\n   * @example 150\n   */\n  fadeInDuration: 150,\n  /**\n   * Time, in ms, a tooltip should take to fade out of view.\n   * @option\n   * @example 150\n   */\n  fadeOutDuration: 150,\n  /**\n   * Disables hover events from opening the tooltip if set to true\n   * @option\n   * @example false\n   */\n  disableHover: false,\n  /**\n   * Optional addtional classes to apply to the tooltip template on init.\n   * @option\n   * @example 'my-cool-tip-class'\n   */\n  templateClasses: '',\n  /**\n   * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\n   * @option\n   * @example 'tooltip'\n   */\n  tooltipClass: 'tooltip',\n  /**\n   * Class applied to the tooltip anchor element.\n   * @option\n   * @example 'has-tip'\n   */\n  triggerClass: 'has-tip',\n  /**\n   * Minimum breakpoint size at which to open the tooltip.\n   * @option\n   * @example 'small'\n   */\n  showOn: 'small',\n  /**\n   * Custom template to be used to generate markup for tooltip.\n   * @option\n   * @example '&lt;div class=\"tooltip\"&gt;&lt;/div&gt;'\n   */\n  template: '',\n  /**\n   * Text displayed in the tooltip template on open.\n   * @option\n   * @example 'Some cool space fact here.'\n   */\n  tipText: '',\n  touchCloseText: 'Tap to close.',\n  /**\n   * Allows the tooltip to remain open if triggered with a click or touch event.\n   * @option\n   * @example true\n   */\n  clickOpen: true,\n  /**\n   * Additional positioning classes, set by the JS\n   * @option\n   * @example 'top'\n   */\n  positionClass: '',\n  /**\n   * Distance, in pixels, the template should push away from the anchor on the Y axis.\n   * @option\n   * @example 10\n   */\n  vOffset: 10,\n  /**\n   * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.\n   * @option\n   * @example 12\n   */\n  hOffset: 12\n};\n\n/**\n * TODO utilize resize event trigger\n */\n\n// Window exports\nFoundation.plugin(Tooltip, 'Tooltip');\n\n}(jQuery);"]},"hash":"ebf12e95ac2bf7174168392ebebf5eae1a6498fe"}
