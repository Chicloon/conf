//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var offsetPct;

var require = meteorInstall({"node_modules":{"meteor":{"zurb:foundation-sites":{"dist":{"foundation.js":["babel-runtime/helpers/typeof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/zurb_foundation-sites/dist/foundation.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof2 = require('babel-runtime/helpers/typeof');                                                                //
                                                                                                                       //
var _typeof3 = _interopRequireDefault(_typeof2);                                                                       //
                                                                                                                       //
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }                      //
                                                                                                                       //
!function ($) {                                                                                                        // 1
                                                                                                                       //
  "use strict";                                                                                                        // 3
                                                                                                                       //
  var FOUNDATION_VERSION = '6.2.3';                                                                                    // 5
                                                                                                                       //
  // Global Foundation object                                                                                          //
  // This is attached to the window, or used as a module for AMD/Browserify                                            //
  var Foundation = {                                                                                                   // 9
    version: FOUNDATION_VERSION,                                                                                       // 10
                                                                                                                       //
    /**                                                                                                                //
     * Stores initialized plugins.                                                                                     //
     */                                                                                                                //
    _plugins: {},                                                                                                      // 15
                                                                                                                       //
    /**                                                                                                                //
     * Stores generated unique ids for plugin instances                                                                //
     */                                                                                                                //
    _uuids: [],                                                                                                        // 20
                                                                                                                       //
    /**                                                                                                                //
     * Returns a boolean for RTL support                                                                               //
     */                                                                                                                //
    rtl: function () {                                                                                                 // 25
      function rtl() {                                                                                                 // 25
        return $('html').attr('dir') === 'rtl';                                                                        // 26
      }                                                                                                                // 27
                                                                                                                       //
      return rtl;                                                                                                      // 25
    }(),                                                                                                               // 25
    /**                                                                                                                //
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.                                                         //
     */                                                                                                                //
    plugin: function () {                                                                                              // 32
      function plugin(_plugin, name) {                                                                                 // 32
        // Object key to use when adding to global Foundation object                                                   //
        // Examples: Foundation.Reveal, Foundation.OffCanvas                                                           //
        var className = name || functionName(_plugin);                                                                 // 35
        // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
        // Examples: data-reveal, data-off-canvas                                                                      //
        var attrName = hyphenate(className);                                                                           // 38
                                                                                                                       //
        // Add to the Foundation object and the plugins list (for reflowing)                                           //
        this._plugins[attrName] = this[className] = _plugin;                                                           // 41
      }                                                                                                                // 42
                                                                                                                       //
      return plugin;                                                                                                   // 32
    }(),                                                                                                               // 32
    /**                                                                                                                //
     * @function                                                                                                       //
     * Populates the _uuids array with pointers to each individual plugin instance.                                    //
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.                             //
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.                                    //
     * @param {String} name - the name of the plugin, passed as a camelCased string.                                   //
     * @fires Plugin#init                                                                                              //
     */                                                                                                                //
    registerPlugin: function () {                                                                                      // 52
      function registerPlugin(plugin, name) {                                                                          // 52
        var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();                      // 53
        plugin.uuid = this.GetYoDigits(6, pluginName);                                                                 // 54
                                                                                                                       //
        if (!plugin.$element.attr('data-' + pluginName)) {                                                             // 56
          plugin.$element.attr('data-' + pluginName, plugin.uuid);                                                     // 57
        }                                                                                                              // 58
        if (!plugin.$element.data('zfPlugin')) {                                                                       // 59
          plugin.$element.data('zfPlugin', plugin);                                                                    // 60
        }                                                                                                              // 61
        /**                                                                                                            //
         * Fires when the plugin has initialized.                                                                      //
         * @event Plugin#init                                                                                          //
         */                                                                                                            //
        plugin.$element.trigger('init.zf.' + pluginName);                                                              // 66
                                                                                                                       //
        this._uuids.push(plugin.uuid);                                                                                 // 68
                                                                                                                       //
        return;                                                                                                        // 70
      }                                                                                                                // 71
                                                                                                                       //
      return registerPlugin;                                                                                           // 52
    }(),                                                                                                               // 52
    /**                                                                                                                //
     * @function                                                                                                       //
     * Removes the plugins uuid from the _uuids array.                                                                 //
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.                                 //
     * Also fires the destroyed event for the plugin, consolidating repetitive code.                                   //
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.                                    //
     * @fires Plugin#destroyed                                                                                         //
     */                                                                                                                //
    unregisterPlugin: function () {                                                                                    // 80
      function unregisterPlugin(plugin) {                                                                              // 80
        var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));                        // 81
                                                                                                                       //
        this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);                                                       // 83
        plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')                                        // 84
        /**                                                                                                            //
         * Fires when the plugin has been destroyed.                                                                   //
         * @event Plugin#destroyed                                                                                     //
         */                                                                                                            //
        .trigger('destroyed.zf.' + pluginName);                                                                        // 84
        for (var prop in meteorBabelHelpers.sanitizeForInObject(plugin)) {                                             // 90
          plugin[prop] = null; //clean up script to prep for garbage collection.                                       // 91
        }                                                                                                              // 92
        return;                                                                                                        // 93
      }                                                                                                                // 94
                                                                                                                       //
      return unregisterPlugin;                                                                                         // 80
    }(),                                                                                                               // 80
                                                                                                                       //
    /**                                                                                                                //
     * @function                                                                                                       //
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.    //
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.                                         //
     */                                                                                                                //
    reInit: function () {                                                                                              // 102
      function reInit(plugins) {                                                                                       // 102
        var isJQ = plugins instanceof $;                                                                               // 103
        try {                                                                                                          // 104
          if (isJQ) {                                                                                                  // 105
            plugins.each(function () {                                                                                 // 106
              $(this).data('zfPlugin')._init();                                                                        // 107
            });                                                                                                        // 108
          } else {                                                                                                     // 109
            var type = typeof plugins === 'undefined' ? 'undefined' : (0, _typeof3['default'])(plugins),               // 110
                _this = this,                                                                                          // 110
                fns = {                                                                                                // 110
              'object': function () {                                                                                  // 113
                function object(plgs) {                                                                                // 113
                  plgs.forEach(function (p) {                                                                          // 114
                    p = hyphenate(p);                                                                                  // 115
                    $('[data-' + p + ']').foundation('_init');                                                         // 116
                  });                                                                                                  // 117
                }                                                                                                      // 118
                                                                                                                       //
                return object;                                                                                         // 113
              }(),                                                                                                     // 113
              'string': function () {                                                                                  // 119
                function string() {                                                                                    // 119
                  plugins = hyphenate(plugins);                                                                        // 120
                  $('[data-' + plugins + ']').foundation('_init');                                                     // 121
                }                                                                                                      // 122
                                                                                                                       //
                return string;                                                                                         // 119
              }(),                                                                                                     // 119
              'undefined': function () {                                                                               // 123
                function undefined() {                                                                                 // 123
                  this['object'](Object.keys(_this._plugins));                                                         // 124
                }                                                                                                      // 125
                                                                                                                       //
                return undefined;                                                                                      // 123
              }()                                                                                                      // 123
            };                                                                                                         // 112
            fns[type](plugins);                                                                                        // 127
          }                                                                                                            // 128
        } catch (err) {                                                                                                // 129
          console.error(err);                                                                                          // 130
        } finally {                                                                                                    // 131
          return plugins;                                                                                              // 132
        }                                                                                                              // 133
      }                                                                                                                // 134
                                                                                                                       //
      return reInit;                                                                                                   // 102
    }(),                                                                                                               // 102
                                                                                                                       //
    /**                                                                                                                //
     * returns a random base-36 uid with namespacing                                                                   //
     * @function                                                                                                       //
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.             //
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.                                 //
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.                           //
     * @returns {String} - unique id                                                                                   //
     */                                                                                                                //
    GetYoDigits: function () {                                                                                         // 144
      function GetYoDigits(length, namespace) {                                                                        // 144
        length = length || 6;                                                                                          // 145
        return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
      }                                                                                                                // 147
                                                                                                                       //
      return GetYoDigits;                                                                                              // 144
    }(),                                                                                                               // 144
    /**                                                                                                                //
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.           //
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.       //
     */                                                                                                                //
    reflow: function () {                                                                                              // 153
      function reflow(elem, plugins) {                                                                                 // 153
                                                                                                                       //
        // If plugins is undefined, just grab everything                                                               //
        if (typeof plugins === 'undefined') {                                                                          // 156
          plugins = Object.keys(this._plugins);                                                                        // 157
        }                                                                                                              // 158
        // If plugins is a string, convert it to an array with one item                                                //
        else if (typeof plugins === 'string') {                                                                        // 156
            plugins = [plugins];                                                                                       // 161
          }                                                                                                            // 162
                                                                                                                       //
        var _this = this;                                                                                              // 164
                                                                                                                       //
        // Iterate through each plugin                                                                                 //
        $.each(plugins, function (i, name) {                                                                           // 167
          // Get the current plugin                                                                                    //
          var plugin = _this._plugins[name];                                                                           // 169
                                                                                                                       //
          // Localize the search to all elements inside elem, as well as elem itself, unless elem === document         //
          var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');                              // 172
                                                                                                                       //
          // For each plugin found, initialize it                                                                      //
          $elem.each(function () {                                                                                     // 175
            var $el = $(this),                                                                                         // 176
                opts = {};                                                                                             // 176
            // Don't double-dip on plugins                                                                             //
            if ($el.data('zfPlugin')) {                                                                                // 179
              console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");    // 180
              return;                                                                                                  // 181
            }                                                                                                          // 182
                                                                                                                       //
            if ($el.attr('data-options')) {                                                                            // 184
              var thing = $el.attr('data-options').split(';').forEach(function (e, i) {                                // 185
                var opt = e.split(':').map(function (el) {                                                             // 186
                  return el.trim();                                                                                    // 187
                });                                                                                                    // 188
                if (opt[0]) opts[opt[0]] = parseValue(opt[1]);                                                         // 189
              });                                                                                                      // 190
            }                                                                                                          // 191
            try {                                                                                                      // 192
              $el.data('zfPlugin', new plugin($(this), opts));                                                         // 193
            } catch (er) {                                                                                             // 194
              console.error(er);                                                                                       // 195
            } finally {                                                                                                // 196
              return;                                                                                                  // 197
            }                                                                                                          // 198
          });                                                                                                          // 199
        });                                                                                                            // 200
      }                                                                                                                // 201
                                                                                                                       //
      return reflow;                                                                                                   // 153
    }(),                                                                                                               // 153
    getFnName: functionName,                                                                                           // 202
    transitionend: function () {                                                                                       // 203
      function transitionend($elem) {                                                                                  // 203
        var transitions = {                                                                                            // 204
          'transition': 'transitionend',                                                                               // 205
          'WebkitTransition': 'webkitTransitionEnd',                                                                   // 206
          'MozTransition': 'transitionend',                                                                            // 207
          'OTransition': 'otransitionend'                                                                              // 208
        };                                                                                                             // 204
        var elem = document.createElement('div'),                                                                      // 210
            end;                                                                                                       // 210
                                                                                                                       //
        for (var t in meteorBabelHelpers.sanitizeForInObject(transitions)) {                                           // 213
          if (typeof elem.style[t] !== 'undefined') {                                                                  // 214
            end = transitions[t];                                                                                      // 215
          }                                                                                                            // 216
        }                                                                                                              // 217
        if (end) {                                                                                                     // 218
          return end;                                                                                                  // 219
        } else {                                                                                                       // 220
          end = setTimeout(function () {                                                                               // 221
            $elem.triggerHandler('transitionend', [$elem]);                                                            // 222
          }, 1);                                                                                                       // 223
          return 'transitionend';                                                                                      // 224
        }                                                                                                              // 225
      }                                                                                                                // 226
                                                                                                                       //
      return transitionend;                                                                                            // 203
    }()                                                                                                                // 203
  };                                                                                                                   // 9
                                                                                                                       //
  Foundation.util = {                                                                                                  // 229
    /**                                                                                                                //
     * Function for applying a debounce effect to a function call.                                                     //
     * @function                                                                                                       //
     * @param {Function} func - Function to be called at end of timeout.                                               //
     * @param {Number} delay - Time in ms to delay the call of `func`.                                                 //
     * @returns function                                                                                               //
     */                                                                                                                //
    throttle: function () {                                                                                            // 237
      function throttle(func, delay) {                                                                                 // 237
        var timer = null;                                                                                              // 238
                                                                                                                       //
        return function () {                                                                                           // 240
          var context = this,                                                                                          // 241
              args = arguments;                                                                                        // 241
                                                                                                                       //
          if (timer === null) {                                                                                        // 244
            timer = setTimeout(function () {                                                                           // 245
              func.apply(context, args);                                                                               // 246
              timer = null;                                                                                            // 247
            }, delay);                                                                                                 // 248
          }                                                                                                            // 249
        };                                                                                                             // 250
      }                                                                                                                // 251
                                                                                                                       //
      return throttle;                                                                                                 // 237
    }()                                                                                                                // 237
  };                                                                                                                   // 229
                                                                                                                       //
  // TODO: consider not making this a jQuery function                                                                  //
  // TODO: need way to reflow vs. re-initialize                                                                        //
  /**                                                                                                                  //
   * The Foundation jQuery method.                                                                                     //
   * @param {String|Array} method - An action to perform on the current jQuery object.                                 //
   */                                                                                                                  //
  var foundation = function foundation(method) {                                                                       // 260
    var type = typeof method === 'undefined' ? 'undefined' : (0, _typeof3['default'])(method),                         // 261
        $meta = $('meta.foundation-mq'),                                                                               // 261
        $noJS = $('.no-js');                                                                                           // 261
                                                                                                                       //
    if (!$meta.length) {                                                                                               // 265
      $('<meta class="foundation-mq">').appendTo(document.head);                                                       // 266
    }                                                                                                                  // 267
    if ($noJS.length) {                                                                                                // 268
      $noJS.removeClass('no-js');                                                                                      // 269
    }                                                                                                                  // 270
                                                                                                                       //
    if (type === 'undefined') {                                                                                        // 272
      //needs to initialize the Foundation object, or an individual plugin.                                            //
      Foundation.MediaQuery._init();                                                                                   // 274
      Foundation.reflow(this);                                                                                         // 275
    } else if (type === 'string') {                                                                                    // 276
      //an individual method to invoke on a plugin or group of plugins                                                 //
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary                   // 278
      var plugClass = this.data('zfPlugin'); //determine the class of plugin                                           // 279
                                                                                                                       //
      if (plugClass !== undefined && plugClass[method] !== undefined) {                                                // 281
        //make sure both the class and method exist                                                                    //
        if (this.length === 1) {                                                                                       // 283
          //if there's only one, call it directly.                                                                     //
          plugClass[method].apply(plugClass, args);                                                                    // 285
        } else {                                                                                                       // 286
          this.each(function (i, el) {                                                                                 // 287
            //otherwise loop through the jQuery collection and invoke the method on each                               //
            plugClass[method].apply($(el).data('zfPlugin'), args);                                                     // 289
          });                                                                                                          // 290
        }                                                                                                              // 291
      } else {                                                                                                         // 292
        //error for no class or no method                                                                              //
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }                                                                                                                // 295
    } else {                                                                                                           // 296
      //error for invalid argument type                                                                                //
      throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
    }                                                                                                                  // 299
    return this;                                                                                                       // 300
  };                                                                                                                   // 301
                                                                                                                       //
  window.Foundation = Foundation;                                                                                      // 303
  $.fn.foundation = foundation;                                                                                        // 304
                                                                                                                       //
  // Polyfill for requestAnimationFrame                                                                                //
  (function () {                                                                                                       // 307
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {                                      // 308
      return new Date().getTime();                                                                                     // 309
    };                                                                                                                 // 310
                                                                                                                       //
    var vendors = ['webkit', 'moz'];                                                                                   // 312
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {                                        // 313
      var vp = vendors[i];                                                                                             // 314
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];                                             // 315
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }                                                                                                                  // 317
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;                                                                                                // 319
      window.requestAnimationFrame = function (callback) {                                                             // 320
        var now = Date.now();                                                                                          // 321
        var nextTime = Math.max(lastTime + 16, now);                                                                   // 322
        return setTimeout(function () {                                                                                // 323
          callback(lastTime = nextTime);                                                                               // 324
        }, nextTime - now);                                                                                            // 325
      };                                                                                                               // 326
      window.cancelAnimationFrame = clearTimeout;                                                                      // 327
    }                                                                                                                  // 328
    /**                                                                                                                //
     * Polyfill for performance.now, required by rAF                                                                   //
     */                                                                                                                //
    if (!window.performance || !window.performance.now) {                                                              // 332
      window.performance = {                                                                                           // 333
        start: Date.now(),                                                                                             // 334
        now: function () {                                                                                             // 335
          function now() {                                                                                             // 335
            return Date.now() - this.start;                                                                            // 336
          }                                                                                                            // 337
                                                                                                                       //
          return now;                                                                                                  // 335
        }()                                                                                                            // 335
      };                                                                                                               // 333
    }                                                                                                                  // 339
  })();                                                                                                                // 340
  if (!Function.prototype.bind) {                                                                                      // 341
    Function.prototype.bind = function (oThis) {                                                                       // 342
      if (typeof this !== 'function') {                                                                                // 343
        // closest thing possible to the ECMAScript 5                                                                  //
        // internal IsCallable function                                                                                //
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');                   // 346
      }                                                                                                                // 347
                                                                                                                       //
      var aArgs = Array.prototype.slice.call(arguments, 1),                                                            // 349
          fToBind = this,                                                                                              // 349
          fNOP = function fNOP() {},                                                                                   // 349
          fBound = function fBound() {                                                                                 // 349
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };                                                                                                               // 354
                                                                                                                       //
      if (this.prototype) {                                                                                            // 356
        // native functions don't have a prototype                                                                     //
        fNOP.prototype = this.prototype;                                                                               // 358
      }                                                                                                                // 359
      fBound.prototype = new fNOP();                                                                                   // 360
                                                                                                                       //
      return fBound;                                                                                                   // 362
    };                                                                                                                 // 363
  }                                                                                                                    // 364
  // Polyfill to get the name of a function in IE9                                                                     //
  function functionName(fn) {                                                                                          // 366
    if (Function.prototype.name === undefined) {                                                                       // 367
      var funcNameRegex = /function\s([^(]{1,})\(/;                                                                    // 368
      var results = funcNameRegex.exec(fn.toString());                                                                 // 369
      return results && results.length > 1 ? results[1].trim() : "";                                                   // 370
    } else if (fn.prototype === undefined) {                                                                           // 371
      return fn.constructor.name;                                                                                      // 372
    } else {                                                                                                           // 373
      return fn.prototype.constructor.name;                                                                            // 374
    }                                                                                                                  // 375
  }                                                                                                                    // 376
  function parseValue(str) {                                                                                           // 377
    if (/true/.test(str)) return true;else if (/false/.test(str)) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;                                                                                                        // 379
  }                                                                                                                    // 380
  // Convert PascalCase to kebab-case                                                                                  //
  // Thank you: http://stackoverflow.com/a/8955580                                                                     //
  function hyphenate(str) {                                                                                            // 383
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();                                                      // 384
  }                                                                                                                    // 385
}(jQuery);                                                                                                             // 386
'use strict';                                                                                                          // 387
                                                                                                                       //
!function ($) {                                                                                                        // 389
                                                                                                                       //
  Foundation.Box = {                                                                                                   // 391
    ImNotTouchingYou: ImNotTouchingYou,                                                                                // 392
    GetDimensions: GetDimensions,                                                                                      // 393
    GetOffsets: GetOffsets                                                                                             // 394
  };                                                                                                                   // 391
                                                                                                                       //
  /**                                                                                                                  //
   * Compares the dimensions of an element to a container and determines collision events with container.              //
   * @function                                                                                                         //
   * @param {jQuery} element - jQuery object to test for collisions.                                                   //
   * @param {jQuery} parent - jQuery object to use as bounding container.                                              //
   * @param {Boolean} lrOnly - set to true to check left and right values only.                                        //
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.                                        //
   * @default if no parent object passed, detects collisions with `window`.                                            //
   * @returns {Boolean} - true if collision free, false if a collision in any direction.                               //
   */                                                                                                                  //
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {                                                         // 407
    var eleDims = GetDimensions(element),                                                                              // 408
        top,                                                                                                           // 408
        bottom,                                                                                                        // 408
        left,                                                                                                          // 408
        right;                                                                                                         // 408
                                                                                                                       //
    if (parent) {                                                                                                      // 414
      var parDims = GetDimensions(parent);                                                                             // 415
                                                                                                                       //
      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;                             // 417
      top = eleDims.offset.top >= parDims.offset.top;                                                                  // 418
      left = eleDims.offset.left >= parDims.offset.left;                                                               // 419
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;                              // 420
    } else {                                                                                                           // 421
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;       // 422
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;                                                       // 423
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;                                                    // 424
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;                                         // 425
    }                                                                                                                  // 426
                                                                                                                       //
    var allDirs = [bottom, top, left, right];                                                                          // 428
                                                                                                                       //
    if (lrOnly) {                                                                                                      // 430
      return left === right === true;                                                                                  // 431
    }                                                                                                                  // 432
                                                                                                                       //
    if (tbOnly) {                                                                                                      // 434
      return top === bottom === true;                                                                                  // 435
    }                                                                                                                  // 436
                                                                                                                       //
    return allDirs.indexOf(false) === -1;                                                                              // 438
  };                                                                                                                   // 439
                                                                                                                       //
  /**                                                                                                                  //
   * Uses native methods to return an object of dimension values.                                                      //
   * @function                                                                                                         //
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values                                                         //
   * TODO - if element is window, return only those values.                                                            //
   */                                                                                                                  //
  function GetDimensions(elem, test) {                                                                                 // 448
    elem = elem.length ? elem[0] : elem;                                                                               // 449
                                                                                                                       //
    if (elem === window || elem === document) {                                                                        // 451
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");                                                 // 452
    }                                                                                                                  // 453
                                                                                                                       //
    var rect = elem.getBoundingClientRect(),                                                                           // 455
        parRect = elem.parentNode.getBoundingClientRect(),                                                             // 455
        winRect = document.body.getBoundingClientRect(),                                                               // 455
        winY = window.pageYOffset,                                                                                     // 455
        winX = window.pageXOffset;                                                                                     // 455
                                                                                                                       //
    return {                                                                                                           // 461
      width: rect.width,                                                                                               // 462
      height: rect.height,                                                                                             // 463
      offset: {                                                                                                        // 464
        top: rect.top + winY,                                                                                          // 465
        left: rect.left + winX                                                                                         // 466
      },                                                                                                               // 464
      parentDims: {                                                                                                    // 468
        width: parRect.width,                                                                                          // 469
        height: parRect.height,                                                                                        // 470
        offset: {                                                                                                      // 471
          top: parRect.top + winY,                                                                                     // 472
          left: parRect.left + winX                                                                                    // 473
        }                                                                                                              // 471
      },                                                                                                               // 468
      windowDims: {                                                                                                    // 476
        width: winRect.width,                                                                                          // 477
        height: winRect.height,                                                                                        // 478
        offset: {                                                                                                      // 479
          top: winY,                                                                                                   // 480
          left: winX                                                                                                   // 481
        }                                                                                                              // 479
      }                                                                                                                // 476
    };                                                                                                                 // 461
  }                                                                                                                    // 485
                                                                                                                       //
  /**                                                                                                                  //
   * Returns an object of top and left integer pixel values for dynamically rendered elements,                         //
   * such as: Tooltip, Reveal, and Dropdown                                                                            //
   * @function                                                                                                         //
   * @param {jQuery} element - jQuery object for the element being positioned.                                         //
   * @param {jQuery} anchor - jQuery object for the element's anchor point.                                            //
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor      //
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.          //
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.        //
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels                                             //
   */                                                                                                                  //
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {                                       // 499
    var $eleDims = GetDimensions(element),                                                                             // 500
        $anchorDims = anchor ? GetDimensions(anchor) : null;                                                           // 500
                                                                                                                       //
    switch (position) {                                                                                                // 503
      case 'top':                                                                                                      // 504
        return {                                                                                                       // 505
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)                                                    // 507
        };                                                                                                             // 505
        break;                                                                                                         // 509
      case 'left':                                                                                                     // 510
        return {                                                                                                       // 511
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),                                                  // 512
          top: $anchorDims.offset.top                                                                                  // 513
        };                                                                                                             // 511
        break;                                                                                                         // 515
      case 'right':                                                                                                    // 516
        return {                                                                                                       // 517
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,                                                 // 518
          top: $anchorDims.offset.top                                                                                  // 519
        };                                                                                                             // 517
        break;                                                                                                         // 521
      case 'center top':                                                                                               // 522
        return {                                                                                                       // 523
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,                                  // 524
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)                                                    // 525
        };                                                                                                             // 523
        break;                                                                                                         // 527
      case 'center bottom':                                                                                            // 528
        return {                                                                                                       // 529
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,           // 530
          top: $anchorDims.offset.top + $anchorDims.height + vOffset                                                   // 531
        };                                                                                                             // 529
        break;                                                                                                         // 533
      case 'center left':                                                                                              // 534
        return {                                                                                                       // 535
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),                                                  // 536
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2                                   // 537
        };                                                                                                             // 535
        break;                                                                                                         // 539
      case 'center right':                                                                                             // 540
        return {                                                                                                       // 541
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,                                             // 542
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2                                   // 543
        };                                                                                                             // 541
        break;                                                                                                         // 545
      case 'center':                                                                                                   // 546
        return {                                                                                                       // 547
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,                  // 548
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2                   // 549
        };                                                                                                             // 547
        break;                                                                                                         // 551
      case 'reveal':                                                                                                   // 552
        return {                                                                                                       // 553
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,                                                      // 554
          top: $eleDims.windowDims.offset.top + vOffset                                                                // 555
        };                                                                                                             // 553
      case 'reveal full':                                                                                              // 557
        return {                                                                                                       // 558
          left: $eleDims.windowDims.offset.left,                                                                       // 559
          top: $eleDims.windowDims.offset.top                                                                          // 560
        };                                                                                                             // 558
        break;                                                                                                         // 562
      case 'left bottom':                                                                                              // 563
        return {                                                                                                       // 564
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),                                                  // 565
          top: $anchorDims.offset.top + $anchorDims.height                                                             // 566
        };                                                                                                             // 564
        break;                                                                                                         // 568
      case 'right bottom':                                                                                             // 569
        return {                                                                                                       // 570
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,                                // 571
          top: $anchorDims.offset.top + $anchorDims.height                                                             // 572
        };                                                                                                             // 570
        break;                                                                                                         // 574
      default:                                                                                                         // 575
        return {                                                                                                       // 576
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset                                                   // 578
        };                                                                                                             // 576
    }                                                                                                                  // 503
  }                                                                                                                    // 581
}(jQuery);                                                                                                             // 582
/*******************************************                                                                           //
 *                                         *                                                                           //
 * This util was created by Marius Olbertz *                                                                           //
 * Please thank Marius on GitHub /owlbertz *                                                                           //
 * or the web http://www.mariusolbertz.de/ *                                                                           //
 *                                         *                                                                           //
 ******************************************/                                                                           //
                                                                                                                       //
'use strict';                                                                                                          // 591
                                                                                                                       //
!function ($) {                                                                                                        // 593
                                                                                                                       //
  var keyCodes = {                                                                                                     // 595
    9: 'TAB',                                                                                                          // 596
    13: 'ENTER',                                                                                                       // 597
    27: 'ESCAPE',                                                                                                      // 598
    32: 'SPACE',                                                                                                       // 599
    37: 'ARROW_LEFT',                                                                                                  // 600
    38: 'ARROW_UP',                                                                                                    // 601
    39: 'ARROW_RIGHT',                                                                                                 // 602
    40: 'ARROW_DOWN'                                                                                                   // 603
  };                                                                                                                   // 595
                                                                                                                       //
  var commands = {};                                                                                                   // 606
                                                                                                                       //
  var Keyboard = {                                                                                                     // 608
    keys: getKeyCodes(keyCodes),                                                                                       // 609
                                                                                                                       //
    /**                                                                                                                //
     * Parses the (keyboard) event and returns a String that represents its key                                        //
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE                                           //
     * @param {Event} event - the event generated by the event handler                                                 //
     * @return String key - String that represents the key pressed                                                     //
     */                                                                                                                //
    parseKey: function () {                                                                                            // 617
      function parseKey(event) {                                                                                       // 617
        var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();            // 618
        if (event.shiftKey) key = 'SHIFT_' + key;                                                                      // 619
        if (event.ctrlKey) key = 'CTRL_' + key;                                                                        // 620
        if (event.altKey) key = 'ALT_' + key;                                                                          // 621
        return key;                                                                                                    // 622
      }                                                                                                                // 623
                                                                                                                       //
      return parseKey;                                                                                                 // 617
    }(),                                                                                                               // 617
                                                                                                                       //
    /**                                                                                                                //
     * Handles the given (keyboard) event                                                                              //
     * @param {Event} event - the event generated by the event handler                                                 //
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal                                  //
     * @param {Objects} functions - collection of functions that are to be executed                                    //
     */                                                                                                                //
    handleKey: function () {                                                                                           // 632
      function handleKey(event, component, functions) {                                                                // 632
        var commandList = commands[component],                                                                         // 633
            keyCode = this.parseKey(event),                                                                            // 633
            cmds,                                                                                                      // 633
            command,                                                                                                   // 633
            fn;                                                                                                        // 633
                                                                                                                       //
        if (!commandList) return console.warn('Component not defined!');                                               // 639
                                                                                                                       //
        if (typeof commandList.ltr === 'undefined') {                                                                  // 641
          // this component does not differentiate between ltr and rtl                                                 //
          cmds = commandList; // use plain list                                                                        // 643
        } else {                                                                                                       // 644
            // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa                                //
            if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
          }                                                                                                            // 647
        command = cmds[keyCode];                                                                                       // 648
                                                                                                                       //
        fn = functions[command];                                                                                       // 650
        if (fn && typeof fn === 'function') {                                                                          // 651
          // execute function  if exists                                                                               //
          var returnValue = fn.apply();                                                                                // 653
          if (functions.handled || typeof functions.handled === 'function') {                                          // 654
            // execute function when event was handled                                                                 //
            functions.handled(returnValue);                                                                            // 656
          }                                                                                                            // 657
        } else {                                                                                                       // 658
          if (functions.unhandled || typeof functions.unhandled === 'function') {                                      // 659
            // execute function when event was not handled                                                             //
            functions.unhandled();                                                                                     // 661
          }                                                                                                            // 662
        }                                                                                                              // 663
      }                                                                                                                // 664
                                                                                                                       //
      return handleKey;                                                                                                // 632
    }(),                                                                                                               // 632
                                                                                                                       //
    /**                                                                                                                //
     * Finds all focusable elements within the given `$element`                                                        //
     * @param {jQuery} $element - jQuery object to search within                                                       //
     * @return {jQuery} $focusable - all focusable elements within `$element`                                          //
     */                                                                                                                //
    findFocusable: function () {                                                                                       // 672
      function findFocusable($element) {                                                                               // 672
        return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
          if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {                                               // 674
            return false;                                                                                              // 675
          } //only have visible elements and those that have a tabindex greater or equal 0                             // 676
          return true;                                                                                                 // 677
        });                                                                                                            // 678
      }                                                                                                                // 679
                                                                                                                       //
      return findFocusable;                                                                                            // 672
    }(),                                                                                                               // 672
                                                                                                                       //
    /**                                                                                                                //
     * Returns the component name name                                                                                 //
     * @param {Object} component - Foundation component, e.g. Slider or Reveal                                         //
     * @return String componentName                                                                                    //
     */                                                                                                                //
                                                                                                                       //
    register: function () {                                                                                            // 688
      function register(componentName, cmds) {                                                                         // 688
        commands[componentName] = cmds;                                                                                // 689
      }                                                                                                                // 690
                                                                                                                       //
      return register;                                                                                                 // 688
    }()                                                                                                                // 688
  };                                                                                                                   // 608
                                                                                                                       //
  /*                                                                                                                   //
   * Constants for easier comparing.                                                                                   //
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE                                             //
   */                                                                                                                  //
  function getKeyCodes(kcs) {                                                                                          // 697
    var k = {};                                                                                                        // 698
    for (var kc in meteorBabelHelpers.sanitizeForInObject(kcs)) {                                                      // 699
      k[kcs[kc]] = kcs[kc];                                                                                            // 700
    }return k;                                                                                                         // 701
  }                                                                                                                    // 702
                                                                                                                       //
  Foundation.Keyboard = Keyboard;                                                                                      // 704
}(jQuery);                                                                                                             // 705
'use strict';                                                                                                          // 706
                                                                                                                       //
!function ($) {                                                                                                        // 708
                                                                                                                       //
  // Default set of media queries                                                                                      //
  var defaultQueries = {                                                                                               // 711
    'default': 'only screen',                                                                                          // 712
    landscape: 'only screen and (orientation: landscape)',                                                             // 713
    portrait: 'only screen and (orientation: portrait)',                                                               // 714
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };                                                                                                                   // 711
                                                                                                                       //
  var MediaQuery = {                                                                                                   // 718
    queries: [],                                                                                                       // 719
                                                                                                                       //
    current: '',                                                                                                       // 721
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
    _init: function () {                                                                                               // 728
      function _init() {                                                                                               // 728
        var self = this;                                                                                               // 729
        var extractedStyles = $('.foundation-mq').css('font-family');                                                  // 730
        var namedQueries;                                                                                              // 731
                                                                                                                       //
        namedQueries = parseStyleToObject(extractedStyles);                                                            // 733
                                                                                                                       //
        for (var key in meteorBabelHelpers.sanitizeForInObject(namedQueries)) {                                        // 735
          if (namedQueries.hasOwnProperty(key)) {                                                                      // 736
            self.queries.push({                                                                                        // 737
              name: key,                                                                                               // 738
              value: 'only screen and (min-width: ' + namedQueries[key] + ')'                                          // 739
            });                                                                                                        // 737
          }                                                                                                            // 741
        }                                                                                                              // 742
                                                                                                                       //
        this.current = this._getCurrentSize();                                                                         // 744
                                                                                                                       //
        this._watcher();                                                                                               // 746
      }                                                                                                                // 747
                                                                                                                       //
      return _init;                                                                                                    // 728
    }(),                                                                                                               // 728
                                                                                                                       //
    /**                                                                                                                //
     * Checks if the screen is at least as wide as a breakpoint.                                                       //
     * @function                                                                                                       //
     * @param {String} size - Name of the breakpoint to check.                                                         //
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.                                   //
     */                                                                                                                //
    atLeast: function () {                                                                                             // 756
      function atLeast(size) {                                                                                         // 756
        var query = this.get(size);                                                                                    // 757
                                                                                                                       //
        if (query) {                                                                                                   // 759
          return window.matchMedia(query).matches;                                                                     // 760
        }                                                                                                              // 761
                                                                                                                       //
        return false;                                                                                                  // 763
      }                                                                                                                // 764
                                                                                                                       //
      return atLeast;                                                                                                  // 756
    }(),                                                                                                               // 756
                                                                                                                       //
    /**                                                                                                                //
     * Gets the media query of a breakpoint.                                                                           //
     * @function                                                                                                       //
     * @param {String} size - Name of the breakpoint to get.                                                           //
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.          //
     */                                                                                                                //
    get: function () {                                                                                                 // 773
      function get(size) {                                                                                             // 773
        for (var i in meteorBabelHelpers.sanitizeForInObject(this.queries)) {                                          // 774
          if (this.queries.hasOwnProperty(i)) {                                                                        // 775
            var query = this.queries[i];                                                                               // 776
            if (size === query.name) return query.value;                                                               // 777
          }                                                                                                            // 778
        }                                                                                                              // 779
                                                                                                                       //
        return null;                                                                                                   // 781
      }                                                                                                                // 782
                                                                                                                       //
      return get;                                                                                                      // 773
    }(),                                                                                                               // 773
                                                                                                                       //
    /**                                                                                                                //
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function                                                                                                       //
     * @private                                                                                                        //
     * @returns {String} Name of the current breakpoint.                                                               //
     */                                                                                                                //
    _getCurrentSize: function () {                                                                                     // 791
      function _getCurrentSize() {                                                                                     // 791
        var matched;                                                                                                   // 792
                                                                                                                       //
        for (var i = 0; i < this.queries.length; i++) {                                                                // 794
          var query = this.queries[i];                                                                                 // 795
                                                                                                                       //
          if (window.matchMedia(query.value).matches) {                                                                // 797
            matched = query;                                                                                           // 798
          }                                                                                                            // 799
        }                                                                                                              // 800
                                                                                                                       //
        if ((typeof matched === 'undefined' ? 'undefined' : (0, _typeof3['default'])(matched)) === 'object') {         // 802
          return matched.name;                                                                                         // 803
        } else {                                                                                                       // 804
          return matched;                                                                                              // 805
        }                                                                                                              // 806
      }                                                                                                                // 807
                                                                                                                       //
      return _getCurrentSize;                                                                                          // 791
    }(),                                                                                                               // 791
                                                                                                                       //
    /**                                                                                                                //
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.           //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
    _watcher: function () {                                                                                            // 815
      function _watcher() {                                                                                            // 815
        var _this = this;                                                                                              // 816
                                                                                                                       //
        $(window).on('resize.zf.mediaquery', function () {                                                             // 818
          var newSize = _this._getCurrentSize(),                                                                       // 819
              currentSize = _this.current;                                                                             // 819
                                                                                                                       //
          if (newSize !== currentSize) {                                                                               // 822
            // Change the current media query                                                                          //
            _this.current = newSize;                                                                                   // 824
                                                                                                                       //
            // Broadcast the media query change on the window                                                          //
            $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);                                        // 827
          }                                                                                                            // 828
        });                                                                                                            // 829
      }                                                                                                                // 830
                                                                                                                       //
      return _watcher;                                                                                                 // 815
    }()                                                                                                                // 815
  };                                                                                                                   // 718
                                                                                                                       //
  Foundation.MediaQuery = MediaQuery;                                                                                  // 833
                                                                                                                       //
  // matchMedia() polyfill - Test a CSS media type/query in JS.                                                        //
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license          //
  window.matchMedia || (window.matchMedia = function () {                                                              // 837
    'use strict';                                                                                                      // 838
                                                                                                                       //
    // For browsers that support matchMedium api such as IE 9 and webkit                                               //
                                                                                                                       //
    var styleMedia = window.styleMedia || window.media;                                                                // 842
                                                                                                                       //
    // For those that don't support matchMedium                                                                        //
    if (!styleMedia) {                                                                                                 // 845
      var style = document.createElement('style'),                                                                     // 846
          script = document.getElementsByTagName('script')[0],                                                         // 846
          info = null;                                                                                                 // 846
                                                                                                                       //
      style.type = 'text/css';                                                                                         // 850
      style.id = 'matchmediajs-test';                                                                                  // 851
                                                                                                                       //
      script.parentNode.insertBefore(style, script);                                                                   // 853
                                                                                                                       //
      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers                  //
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;               // 856
                                                                                                                       //
      styleMedia = {                                                                                                   // 858
        matchMedium: function () {                                                                                     // 859
          function matchMedium(media) {                                                                                // 859
            var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';                                   // 860
                                                                                                                       //
            // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers                    //
            if (style.styleSheet) {                                                                                    // 863
              style.styleSheet.cssText = text;                                                                         // 864
            } else {                                                                                                   // 865
              style.textContent = text;                                                                                // 866
            }                                                                                                          // 867
                                                                                                                       //
            // Test if media query is true or false                                                                    //
            return info.width === '1px';                                                                               // 870
          }                                                                                                            // 871
                                                                                                                       //
          return matchMedium;                                                                                          // 859
        }()                                                                                                            // 859
      };                                                                                                               // 858
    }                                                                                                                  // 873
                                                                                                                       //
    return function (media) {                                                                                          // 875
      return {                                                                                                         // 876
        matches: styleMedia.matchMedium(media || 'all'),                                                               // 877
        media: media || 'all'                                                                                          // 878
      };                                                                                                               // 876
    };                                                                                                                 // 880
  }());                                                                                                                // 881
                                                                                                                       //
  // Thank you: https://github.com/sindresorhus/query-string                                                           //
  function parseStyleToObject(str) {                                                                                   // 884
    var styleObject = {};                                                                                              // 885
                                                                                                                       //
    if (typeof str !== 'string') {                                                                                     // 887
      return styleObject;                                                                                              // 888
    }                                                                                                                  // 889
                                                                                                                       //
    str = str.trim().slice(1, -1); // browsers re-quote string style values                                            // 891
                                                                                                                       //
    if (!str) {                                                                                                        // 893
      return styleObject;                                                                                              // 894
    }                                                                                                                  // 895
                                                                                                                       //
    styleObject = str.split('&').reduce(function (ret, param) {                                                        // 897
      var parts = param.replace(/\+/g, ' ').split('=');                                                                // 898
      var key = parts[0];                                                                                              // 899
      var val = parts[1];                                                                                              // 900
      key = decodeURIComponent(key);                                                                                   // 901
                                                                                                                       //
      // missing `=` should be `null`:                                                                                 //
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters                                                 //
      val = val === undefined ? null : decodeURIComponent(val);                                                        // 905
                                                                                                                       //
      if (!ret.hasOwnProperty(key)) {                                                                                  // 907
        ret[key] = val;                                                                                                // 908
      } else if (Array.isArray(ret[key])) {                                                                            // 909
        ret[key].push(val);                                                                                            // 910
      } else {                                                                                                         // 911
        ret[key] = [ret[key], val];                                                                                    // 912
      }                                                                                                                // 913
      return ret;                                                                                                      // 914
    }, {});                                                                                                            // 915
                                                                                                                       //
    return styleObject;                                                                                                // 917
  }                                                                                                                    // 918
                                                                                                                       //
  Foundation.MediaQuery = MediaQuery;                                                                                  // 920
}(jQuery);                                                                                                             // 921
'use strict';                                                                                                          // 922
                                                                                                                       //
!function ($) {                                                                                                        // 924
                                                                                                                       //
  /**                                                                                                                  //
   * Motion module.                                                                                                    //
   * @module foundation.motion                                                                                         //
   */                                                                                                                  //
                                                                                                                       //
  var initClasses = ['mui-enter', 'mui-leave'];                                                                        // 931
  var activeClasses = ['mui-enter-active', 'mui-leave-active'];                                                        // 932
                                                                                                                       //
  var Motion = {                                                                                                       // 934
    animateIn: function () {                                                                                           // 935
      function animateIn(element, animation, cb) {                                                                     // 935
        animate(true, element, animation, cb);                                                                         // 936
      }                                                                                                                // 937
                                                                                                                       //
      return animateIn;                                                                                                // 935
    }(),                                                                                                               // 935
                                                                                                                       //
    animateOut: function () {                                                                                          // 939
      function animateOut(element, animation, cb) {                                                                    // 939
        animate(false, element, animation, cb);                                                                        // 940
      }                                                                                                                // 941
                                                                                                                       //
      return animateOut;                                                                                               // 939
    }()                                                                                                                // 939
  };                                                                                                                   // 934
                                                                                                                       //
  function Move(duration, elem, fn) {                                                                                  // 944
    var anim,                                                                                                          // 945
        prog,                                                                                                          // 945
        start = null;                                                                                                  // 945
    // console.log('called');                                                                                          //
                                                                                                                       //
    function move(ts) {                                                                                                // 950
      if (!start) start = window.performance.now();                                                                    // 951
      // console.log(start, ts);                                                                                       //
      prog = ts - start;                                                                                               // 953
      fn.apply(elem);                                                                                                  // 954
                                                                                                                       //
      if (prog < duration) {                                                                                           // 956
        anim = window.requestAnimationFrame(move, elem);                                                               // 957
      } else {                                                                                                         // 958
        window.cancelAnimationFrame(anim);                                                                             // 959
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);                     // 960
      }                                                                                                                // 961
    }                                                                                                                  // 962
    anim = window.requestAnimationFrame(move);                                                                         // 963
  }                                                                                                                    // 964
                                                                                                                       //
  /**                                                                                                                  //
   * Animates an element in or out using a CSS transition class.                                                       //
   * @function                                                                                                         //
   * @private                                                                                                          //
   * @param {Boolean} isIn - Defines if the animation is in or out.                                                    //
   * @param {Object} element - jQuery or HTML object to animate.                                                       //
   * @param {String} animation - CSS class to use.                                                                     //
   * @param {Function} cb - Callback to run when animation is finished.                                                //
   */                                                                                                                  //
  function animate(isIn, element, animation, cb) {                                                                     // 975
    element = $(element).eq(0);                                                                                        // 976
                                                                                                                       //
    if (!element.length) return;                                                                                       // 978
                                                                                                                       //
    var initClass = isIn ? initClasses[0] : initClasses[1];                                                            // 980
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];                                                      // 981
                                                                                                                       //
    // Set up the animation                                                                                            //
    reset();                                                                                                           // 984
                                                                                                                       //
    element.addClass(animation).css('transition', 'none');                                                             // 986
                                                                                                                       //
    requestAnimationFrame(function () {                                                                                // 988
      element.addClass(initClass);                                                                                     // 989
      if (isIn) element.show();                                                                                        // 990
    });                                                                                                                // 991
                                                                                                                       //
    // Start the animation                                                                                             //
    requestAnimationFrame(function () {                                                                                // 994
      element[0].offsetWidth;                                                                                          // 995
      element.css('transition', '').addClass(activeClass);                                                             // 996
    });                                                                                                                // 997
                                                                                                                       //
    // Clean up the animation when it finishes                                                                         //
    element.one(Foundation.transitionend(element), finish);                                                            // 1000
                                                                                                                       //
    // Hides the element (for out animations), resets the element, and runs a callback                                 //
    function finish() {                                                                                                // 1003
      if (!isIn) element.hide();                                                                                       // 1004
      reset();                                                                                                         // 1005
      if (cb) cb.apply(element);                                                                                       // 1006
    }                                                                                                                  // 1007
                                                                                                                       //
    // Resets transitions and removes motion-specific classes                                                          //
    function reset() {                                                                                                 // 1010
      element[0].style.transitionDuration = 0;                                                                         // 1011
      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);                                            // 1012
    }                                                                                                                  // 1013
  }                                                                                                                    // 1014
                                                                                                                       //
  Foundation.Move = Move;                                                                                              // 1016
  Foundation.Motion = Motion;                                                                                          // 1017
}(jQuery);                                                                                                             // 1018
'use strict';                                                                                                          // 1019
                                                                                                                       //
!function ($) {                                                                                                        // 1021
                                                                                                                       //
  var Nest = {                                                                                                         // 1023
    Feather: function () {                                                                                             // 1024
      function Feather(menu) {                                                                                         // 1024
        var type = arguments.length <= 1 || arguments[1] === undefined ? 'zf' : arguments[1];                          // 1025
                                                                                                                       //
        menu.attr('role', 'menubar');                                                                                  // 1027
                                                                                                                       //
        var items = menu.find('li').attr({ 'role': 'menuitem' }),                                                      // 1029
            subMenuClass = 'is-' + type + '-submenu',                                                                  // 1029
            subItemClass = subMenuClass + '-item',                                                                     // 1029
            hasSubClass = 'is-' + type + '-submenu-parent';                                                            // 1029
                                                                                                                       //
        menu.find('a:first').attr('tabindex', 0);                                                                      // 1034
                                                                                                                       //
        items.each(function () {                                                                                       // 1036
          var $item = $(this),                                                                                         // 1037
              $sub = $item.children('ul');                                                                             // 1037
                                                                                                                       //
          if ($sub.length) {                                                                                           // 1040
            $item.addClass(hasSubClass).attr({                                                                         // 1041
              'aria-haspopup': true,                                                                                   // 1042
              'aria-expanded': false,                                                                                  // 1043
              'aria-label': $item.children('a:first').text()                                                           // 1044
            });                                                                                                        // 1041
                                                                                                                       //
            $sub.addClass('submenu ' + subMenuClass).attr({                                                            // 1047
              'data-submenu': '',                                                                                      // 1048
              'aria-hidden': true,                                                                                     // 1049
              'role': 'menu'                                                                                           // 1050
            });                                                                                                        // 1047
          }                                                                                                            // 1052
                                                                                                                       //
          if ($item.parent('[data-submenu]').length) {                                                                 // 1054
            $item.addClass('is-submenu-item ' + subItemClass);                                                         // 1055
          }                                                                                                            // 1056
        });                                                                                                            // 1057
                                                                                                                       //
        return;                                                                                                        // 1059
      }                                                                                                                // 1060
                                                                                                                       //
      return Feather;                                                                                                  // 1024
    }(),                                                                                                               // 1024
    Burn: function () {                                                                                                // 1061
      function Burn(menu, type) {                                                                                      // 1061
        var items = menu.find('li').removeAttr('tabindex'),                                                            // 1062
            subMenuClass = 'is-' + type + '-submenu',                                                                  // 1062
            subItemClass = subMenuClass + '-item',                                                                     // 1062
            hasSubClass = 'is-' + type + '-submenu-parent';                                                            // 1062
                                                                                                                       //
        menu.find('*').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');
                                                                                                                       //
        // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
        //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')          //
        //           .removeAttr('data-submenu'));                                                                     //
        // items.each(function(){                                                                                      //
        //   var $item = $(this),                                                                                      //
        //       $sub = $item.children('ul');                                                                          //
        //   if($item.parent('[data-submenu]').length){                                                                //
        //     $item.removeClass('is-submenu-item ' + subItemClass);                                                   //
        //   }                                                                                                         //
        //   if($sub.length){                                                                                          //
        //     $item.removeClass('has-submenu');                                                                       //
        //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');                                 //
        //   }                                                                                                         //
        // });                                                                                                         //
      }                                                                                                                // 1083
                                                                                                                       //
      return Burn;                                                                                                     // 1061
    }()                                                                                                                // 1061
  };                                                                                                                   // 1023
                                                                                                                       //
  Foundation.Nest = Nest;                                                                                              // 1086
}(jQuery);                                                                                                             // 1087
'use strict';                                                                                                          // 1088
                                                                                                                       //
!function ($) {                                                                                                        // 1090
                                                                                                                       //
  function Timer(elem, options, cb) {                                                                                  // 1092
    var _this = this,                                                                                                  // 1093
        duration = options.duration,                                                                                   // 1093
                                                                                                                       // 1093
    //options is an object for easily adding features later.                                                           //
    nameSpace = Object.keys(elem.data())[0] || 'timer',                                                                // 1096
        remain = -1,                                                                                                   // 1093
        start,                                                                                                         // 1093
        timer;                                                                                                         // 1093
                                                                                                                       //
    this.isPaused = false;                                                                                             // 1101
                                                                                                                       //
    this.restart = function () {                                                                                       // 1103
      remain = -1;                                                                                                     // 1104
      clearTimeout(timer);                                                                                             // 1105
      this.start();                                                                                                    // 1106
    };                                                                                                                 // 1107
                                                                                                                       //
    this.start = function () {                                                                                         // 1109
      this.isPaused = false;                                                                                           // 1110
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.        //
      clearTimeout(timer);                                                                                             // 1112
      remain = remain <= 0 ? duration : remain;                                                                        // 1113
      elem.data('paused', false);                                                                                      // 1114
      start = Date.now();                                                                                              // 1115
      timer = setTimeout(function () {                                                                                 // 1116
        if (options.infinite) {                                                                                        // 1117
          _this.restart(); //rerun the timer.                                                                          // 1118
        }                                                                                                              // 1119
        cb();                                                                                                          // 1120
      }, remain);                                                                                                      // 1121
      elem.trigger('timerstart.zf.' + nameSpace);                                                                      // 1122
    };                                                                                                                 // 1123
                                                                                                                       //
    this.pause = function () {                                                                                         // 1125
      this.isPaused = true;                                                                                            // 1126
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.          //
      clearTimeout(timer);                                                                                             // 1128
      elem.data('paused', true);                                                                                       // 1129
      var end = Date.now();                                                                                            // 1130
      remain = remain - (end - start);                                                                                 // 1131
      elem.trigger('timerpaused.zf.' + nameSpace);                                                                     // 1132
    };                                                                                                                 // 1133
  }                                                                                                                    // 1134
                                                                                                                       //
  /**                                                                                                                  //
   * Runs a callback function when images are fully loaded.                                                            //
   * @param {Object} images - Image(s) to check if loaded.                                                             //
   * @param {Func} callback - Function to execute when image is fully loaded.                                          //
   */                                                                                                                  //
  function onImagesLoaded(images, callback) {                                                                          // 1141
    var self = this,                                                                                                   // 1142
        unloaded = images.length;                                                                                      // 1142
                                                                                                                       //
    if (unloaded === 0) {                                                                                              // 1145
      callback();                                                                                                      // 1146
    }                                                                                                                  // 1147
                                                                                                                       //
    images.each(function () {                                                                                          // 1149
      if (this.complete) {                                                                                             // 1150
        singleImageLoaded();                                                                                           // 1151
      } else if (typeof this.naturalWidth !== 'undefined' && this.naturalWidth > 0) {                                  // 1152
        singleImageLoaded();                                                                                           // 1153
      } else {                                                                                                         // 1154
        $(this).one('load', function () {                                                                              // 1155
          singleImageLoaded();                                                                                         // 1156
        });                                                                                                            // 1157
      }                                                                                                                // 1158
    });                                                                                                                // 1159
                                                                                                                       //
    function singleImageLoaded() {                                                                                     // 1161
      unloaded--;                                                                                                      // 1162
      if (unloaded === 0) {                                                                                            // 1163
        callback();                                                                                                    // 1164
      }                                                                                                                // 1165
    }                                                                                                                  // 1166
  }                                                                                                                    // 1167
                                                                                                                       //
  Foundation.Timer = Timer;                                                                                            // 1169
  Foundation.onImagesLoaded = onImagesLoaded;                                                                          // 1170
}(jQuery);                                                                                                             // 1171
//**************************************************                                                                   //
//**Work inspired by multiple jquery swipe plugins**                                                                   //
//**Done by Yohai Ararat ***************************                                                                   //
//**************************************************                                                                   //
(function ($) {                                                                                                        // 1176
                                                                                                                       //
  $.spotSwipe = {                                                                                                      // 1178
    version: '1.0.0',                                                                                                  // 1179
    enabled: 'ontouchstart' in document.documentElement,                                                               // 1180
    preventDefault: false,                                                                                             // 1181
    moveThreshold: 75,                                                                                                 // 1182
    timeThreshold: 200                                                                                                 // 1183
  };                                                                                                                   // 1178
                                                                                                                       //
  var startPosX,                                                                                                       // 1186
      startPosY,                                                                                                       // 1186
      startTime,                                                                                                       // 1186
      elapsedTime,                                                                                                     // 1186
      isMoving = false;                                                                                                // 1186
                                                                                                                       //
  function onTouchEnd() {                                                                                              // 1192
    //  alert(this);                                                                                                   //
    this.removeEventListener('touchmove', onTouchMove);                                                                // 1194
    this.removeEventListener('touchend', onTouchEnd);                                                                  // 1195
    isMoving = false;                                                                                                  // 1196
  }                                                                                                                    // 1197
                                                                                                                       //
  function onTouchMove(e) {                                                                                            // 1199
    if ($.spotSwipe.preventDefault) {                                                                                  // 1200
      e.preventDefault();                                                                                              // 1201
    }                                                                                                                  // 1202
    if (isMoving) {                                                                                                    // 1203
      var x = e.touches[0].pageX;                                                                                      // 1204
      var y = e.touches[0].pageY;                                                                                      // 1205
      var dx = startPosX - x;                                                                                          // 1206
      var dy = startPosY - y;                                                                                          // 1207
      var dir;                                                                                                         // 1208
      elapsedTime = new Date().getTime() - startTime;                                                                  // 1209
      if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {                     // 1210
        dir = dx > 0 ? 'left' : 'right';                                                                               // 1211
      }                                                                                                                // 1212
      // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {              //
      //   dir = dy > 0 ? 'down' : 'up';                                                                               //
      // }                                                                                                             //
      if (dir) {                                                                                                       // 1216
        e.preventDefault();                                                                                            // 1217
        onTouchEnd.call(this);                                                                                         // 1218
        $(this).trigger('swipe', dir).trigger('swipe' + dir);                                                          // 1219
      }                                                                                                                // 1220
    }                                                                                                                  // 1221
  }                                                                                                                    // 1222
                                                                                                                       //
  function onTouchStart(e) {                                                                                           // 1224
    if (e.touches.length == 1) {                                                                                       // 1225
      startPosX = e.touches[0].pageX;                                                                                  // 1226
      startPosY = e.touches[0].pageY;                                                                                  // 1227
      isMoving = true;                                                                                                 // 1228
      startTime = new Date().getTime();                                                                                // 1229
      this.addEventListener('touchmove', onTouchMove, false);                                                          // 1230
      this.addEventListener('touchend', onTouchEnd, false);                                                            // 1231
    }                                                                                                                  // 1232
  }                                                                                                                    // 1233
                                                                                                                       //
  function init() {                                                                                                    // 1235
    this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);                                 // 1236
  }                                                                                                                    // 1237
                                                                                                                       //
  function teardown() {                                                                                                // 1239
    this.removeEventListener('touchstart', onTouchStart);                                                              // 1240
  }                                                                                                                    // 1241
                                                                                                                       //
  $.event.special.swipe = { setup: init };                                                                             // 1243
                                                                                                                       //
  $.each(['left', 'up', 'down', 'right'], function () {                                                                // 1245
    $.event.special['swipe' + this] = { setup: function () {                                                           // 1246
        function setup() {                                                                                             // 1246
          $(this).on('swipe', $.noop);                                                                                 // 1247
        }                                                                                                              // 1248
                                                                                                                       //
        return setup;                                                                                                  // 1246
      }() };                                                                                                           // 1246
  });                                                                                                                  // 1249
})(jQuery);                                                                                                            // 1250
/****************************************************                                                                  //
 * Method for adding psuedo drag events to elements *                                                                  //
 ***************************************************/                                                                  //
!function ($) {                                                                                                        // 1254
  $.fn.addTouch = function () {                                                                                        // 1255
    this.each(function (i, el) {                                                                                       // 1256
      $(el).bind('touchstart touchmove touchend touchcancel', function () {                                            // 1257
        //we pass the original event object because the jQuery event                                                   //
        //object is normalized to w3c specs and does not provide the TouchList                                         //
        handleTouch(event);                                                                                            // 1260
      });                                                                                                              // 1261
    });                                                                                                                // 1262
                                                                                                                       //
    var handleTouch = function handleTouch(event) {                                                                    // 1264
      var touches = event.changedTouches,                                                                              // 1265
          first = touches[0],                                                                                          // 1265
          eventTypes = {                                                                                               // 1265
        touchstart: 'mousedown',                                                                                       // 1268
        touchmove: 'mousemove',                                                                                        // 1269
        touchend: 'mouseup'                                                                                            // 1270
      },                                                                                                               // 1267
          type = eventTypes[event.type],                                                                               // 1265
          simulatedEvent;                                                                                              // 1265
                                                                                                                       //
      if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {                                         // 1275
        simulatedEvent = new window.MouseEvent(type, {                                                                 // 1276
          'bubbles': true,                                                                                             // 1277
          'cancelable': true,                                                                                          // 1278
          'screenX': first.screenX,                                                                                    // 1279
          'screenY': first.screenY,                                                                                    // 1280
          'clientX': first.clientX,                                                                                    // 1281
          'clientY': first.clientY                                                                                     // 1282
        });                                                                                                            // 1276
      } else {                                                                                                         // 1284
        simulatedEvent = document.createEvent('MouseEvent');                                                           // 1285
        simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
      }                                                                                                                // 1287
      first.target.dispatchEvent(simulatedEvent);                                                                      // 1288
    };                                                                                                                 // 1289
  };                                                                                                                   // 1290
}(jQuery);                                                                                                             // 1291
                                                                                                                       //
//**********************************                                                                                   //
//**From the jQuery Mobile Library**                                                                                   //
//**need to recreate functionality**                                                                                   //
//**and try to improve if possible**                                                                                   //
//**********************************                                                                                   //
                                                                                                                       //
/* Removing the jQuery function ****                                                                                   //
************************************                                                                                   //
                                                                                                                       //
(function( $, window, undefined ) {                                                                                    //
                                                                                                                       //
	var $document = $( document ),                                                                                        //
		// supportTouch = $.mobile.support.touch,                                                                            //
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",                                           //
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",                                                  //
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";                                              //
                                                                                                                       //
	// setup new event shortcuts                                                                                          //
	$.each( ( "touchstart touchmove touchend " +                                                                          //
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {                                                   //
                                                                                                                       //
		$.fn[ name ] = function( fn ) {                                                                                      //
			return fn ? this.bind( name, fn ) : this.trigger( name );                                                           //
		};                                                                                                                   //
                                                                                                                       //
		// jQuery < 1.8                                                                                                      //
		if ( $.attrFn ) {                                                                                                    //
			$.attrFn[ name ] = true;                                                                                            //
		}                                                                                                                    //
	});                                                                                                                   //
                                                                                                                       //
	function triggerCustomEvent( obj, eventType, event, bubble ) {                                                        //
		var originalType = event.type;                                                                                       //
		event.type = eventType;                                                                                              //
		if ( bubble ) {                                                                                                      //
			$.event.trigger( event, undefined, obj );                                                                           //
		} else {                                                                                                             //
			$.event.dispatch.call( obj, event );                                                                                //
		}                                                                                                                    //
		event.type = originalType;                                                                                           //
	}                                                                                                                     //
                                                                                                                       //
	// also handles taphold                                                                                               //
                                                                                                                       //
	// Also handles swipeleft, swiperight                                                                                 //
	$.event.special.swipe = {                                                                                             //
                                                                                                                       //
		// More than this horizontal displacement, and we will suppress scrolling.                                           //
		scrollSupressionThreshold: 30,                                                                                       //
                                                                                                                       //
		// More time than this, and it isn't a swipe.                                                                        //
		durationThreshold: 1000,                                                                                             //
                                                                                                                       //
		// Swipe horizontal displacement must be more than this.                                                             //
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,                                                 //
                                                                                                                       //
		// Swipe vertical displacement must be less than this.                                                               //
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,                                                   //
                                                                                                                       //
		getLocation: function ( event ) {                                                                                    //
			var winPageX = window.pageXOffset,                                                                                  //
				winPageY = window.pageYOffset,                                                                                     //
				x = event.clientX,                                                                                                 //
				y = event.clientY;                                                                                                 //
                                                                                                                       //
			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||                                            //
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {                                               //
                                                                                                                       //
				// iOS4 clientX/clientY have the value that should have been                                                       //
				// in pageX/pageY. While pageX/page/ have the value 0                                                              //
				x = x - winPageX;                                                                                                  //
				y = y - winPageY;                                                                                                  //
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {                                     //
                                                                                                                       //
				// Some Android browsers have totally bogus values for clientX/Y                                                   //
				// when scrolling/zooming a page. Detectable since clientX/clientY                                                 //
				// should never be smaller than pageX/pageY minus page scroll                                                      //
				x = event.pageX - winPageX;                                                                                        //
				y = event.pageY - winPageY;                                                                                        //
			}                                                                                                                   //
                                                                                                                       //
			return {                                                                                                            //
				x: x,                                                                                                              //
				y: y                                                                                                               //
			};                                                                                                                  //
		},                                                                                                                   //
                                                                                                                       //
		start: function( event ) {                                                                                           //
			var data = event.originalEvent.touches ?                                                                            //
					event.originalEvent.touches[ 0 ] : event,                                                                         //
				location = $.event.special.swipe.getLocation( data );                                                              //
			return {                                                                                                            //
						time: ( new Date() ).getTime(),                                                                                  //
						coords: [ location.x, location.y ],                                                                              //
						origin: $( event.target )                                                                                        //
					};                                                                                                                //
		},                                                                                                                   //
                                                                                                                       //
		stop: function( event ) {                                                                                            //
			var data = event.originalEvent.touches ?                                                                            //
					event.originalEvent.touches[ 0 ] : event,                                                                         //
				location = $.event.special.swipe.getLocation( data );                                                              //
			return {                                                                                                            //
						time: ( new Date() ).getTime(),                                                                                  //
						coords: [ location.x, location.y ]                                                                               //
					};                                                                                                                //
		},                                                                                                                   //
                                                                                                                       //
		handleSwipe: function( start, stop, thisObject, origTarget ) {                                                       //
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&                                            //
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&            //
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {             //
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";                                   //
                                                                                                                       //
				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;                                                                                                       //
			}                                                                                                                   //
			return false;                                                                                                       //
                                                                                                                       //
		},                                                                                                                   //
                                                                                                                       //
		// This serves as a flag to ensure that at most one swipe event event is                                             //
		// in work at any given time                                                                                         //
		eventInProgress: false,                                                                                              //
                                                                                                                       //
		setup: function() {                                                                                                  //
			var events,                                                                                                         //
				thisObject = this,                                                                                                 //
				$this = $( thisObject ),                                                                                           //
				context = {};                                                                                                      //
                                                                                                                       //
			// Retrieve the events data for this element and add the swipe context                                              //
			events = $.data( this, "mobile-events" );                                                                           //
			if ( !events ) {                                                                                                    //
				events = { length: 0 };                                                                                            //
				$.data( this, "mobile-events", events );                                                                           //
			}                                                                                                                   //
			events.length++;                                                                                                    //
			events.swipe = context;                                                                                             //
                                                                                                                       //
			context.start = function( event ) {                                                                                 //
                                                                                                                       //
				// Bail if we're already working on a swipe event                                                                  //
				if ( $.event.special.swipe.eventInProgress ) {                                                                     //
					return;                                                                                                           //
				}                                                                                                                  //
				$.event.special.swipe.eventInProgress = true;                                                                      //
                                                                                                                       //
				var stop,                                                                                                          //
					start = $.event.special.swipe.start( event ),                                                                     //
					origTarget = event.target,                                                                                        //
					emitted = false;                                                                                                  //
                                                                                                                       //
				context.move = function( event ) {                                                                                 //
					if ( !start || event.isDefaultPrevented() ) {                                                                     //
						return;                                                                                                          //
					}                                                                                                                 //
                                                                                                                       //
					stop = $.event.special.swipe.stop( event );                                                                       //
					if ( !emitted ) {                                                                                                 //
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );                              //
						if ( emitted ) {                                                                                                 //
                                                                                                                       //
							// Reset the context to make way for the next swipe event                                                       //
							$.event.special.swipe.eventInProgress = false;                                                                  //
						}                                                                                                                //
					}                                                                                                                 //
					// prevent scrolling                                                                                              //
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {       //
						event.preventDefault();                                                                                          //
					}                                                                                                                 //
				};                                                                                                                 //
                                                                                                                       //
				context.stop = function() {                                                                                        //
						emitted = true;                                                                                                  //
                                                                                                                       //
						// Reset the context to make way for the next swipe event                                                        //
						$.event.special.swipe.eventInProgress = false;                                                                   //
						$document.off( touchMoveEvent, context.move );                                                                   //
						context.move = null;                                                                                             //
				};                                                                                                                 //
                                                                                                                       //
				$document.on( touchMoveEvent, context.move )                                                                       //
					.one( touchStopEvent, context.stop );                                                                             //
			};                                                                                                                  //
			$this.on( touchStartEvent, context.start );                                                                         //
		},                                                                                                                   //
                                                                                                                       //
		teardown: function() {                                                                                               //
			var events, context;                                                                                                //
                                                                                                                       //
			events = $.data( this, "mobile-events" );                                                                           //
			if ( events ) {                                                                                                     //
				context = events.swipe;                                                                                            //
				delete events.swipe;                                                                                               //
				events.length--;                                                                                                   //
				if ( events.length === 0 ) {                                                                                       //
					$.removeData( this, "mobile-events" );                                                                            //
				}                                                                                                                  //
			}                                                                                                                   //
                                                                                                                       //
			if ( context ) {                                                                                                    //
				if ( context.start ) {                                                                                             //
					$( this ).off( touchStartEvent, context.start );                                                                  //
				}                                                                                                                  //
				if ( context.move ) {                                                                                              //
					$document.off( touchMoveEvent, context.move );                                                                    //
				}                                                                                                                  //
				if ( context.stop ) {                                                                                              //
					$document.off( touchStopEvent, context.stop );                                                                    //
				}                                                                                                                  //
			}                                                                                                                   //
		}                                                                                                                    //
	};                                                                                                                    //
	$.each({                                                                                                              //
		swipeleft: "swipe.left",                                                                                             //
		swiperight: "swipe.right"                                                                                            //
	}, function( event, sourceEvent ) {                                                                                   //
                                                                                                                       //
		$.event.special[ event ] = {                                                                                         //
			setup: function() {                                                                                                 //
				$( this ).bind( sourceEvent, $.noop );                                                                             //
			},                                                                                                                  //
			teardown: function() {                                                                                              //
				$( this ).unbind( sourceEvent );                                                                                   //
			}                                                                                                                   //
		};                                                                                                                   //
	});                                                                                                                   //
})( jQuery, this );                                                                                                    //
*/                                                                                                                     //
'use strict';                                                                                                          // 1524
                                                                                                                       //
!function ($) {                                                                                                        // 1526
                                                                                                                       //
  var MutationObserver = function () {                                                                                 // 1528
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];                                                                   // 1529
    for (var i = 0; i < prefixes.length; i++) {                                                                        // 1530
      if (prefixes[i] + 'MutationObserver' in window) {                                                                // 1531
        return window[prefixes[i] + 'MutationObserver'];                                                               // 1532
      }                                                                                                                // 1533
    }                                                                                                                  // 1534
    return false;                                                                                                      // 1535
  }();                                                                                                                 // 1536
                                                                                                                       //
  var triggers = function triggers(el, type) {                                                                         // 1538
    el.data(type).split(' ').forEach(function (id) {                                                                   // 1539
      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);                        // 1540
    });                                                                                                                // 1541
  };                                                                                                                   // 1542
  // Elements with [data-open] will reveal a plugin that supports it when clicked.                                     //
  $(document).on('click.zf.trigger', '[data-open]', function () {                                                      // 1544
    triggers($(this), 'open');                                                                                         // 1545
  });                                                                                                                  // 1546
                                                                                                                       //
  // Elements with [data-close] will close a plugin that supports it when clicked.                                     //
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.          //
  $(document).on('click.zf.trigger', '[data-close]', function () {                                                     // 1550
    var id = $(this).data('close');                                                                                    // 1551
    if (id) {                                                                                                          // 1552
      triggers($(this), 'close');                                                                                      // 1553
    } else {                                                                                                           // 1554
      $(this).trigger('close.zf.trigger');                                                                             // 1555
    }                                                                                                                  // 1556
  });                                                                                                                  // 1557
                                                                                                                       //
  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.                                   //
  $(document).on('click.zf.trigger', '[data-toggle]', function () {                                                    // 1560
    triggers($(this), 'toggle');                                                                                       // 1561
  });                                                                                                                  // 1562
                                                                                                                       //
  // Elements with [data-closable] will respond to close.zf.trigger events.                                            //
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {                                                 // 1565
    e.stopPropagation();                                                                                               // 1566
    var animation = $(this).data('closable');                                                                          // 1567
                                                                                                                       //
    if (animation !== '') {                                                                                            // 1569
      Foundation.Motion.animateOut($(this), animation, function () {                                                   // 1570
        $(this).trigger('closed.zf');                                                                                  // 1571
      });                                                                                                              // 1572
    } else {                                                                                                           // 1573
      $(this).fadeOut().trigger('closed.zf');                                                                          // 1574
    }                                                                                                                  // 1575
  });                                                                                                                  // 1576
                                                                                                                       //
  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {                              // 1578
    var id = $(this).data('toggle-focus');                                                                             // 1579
    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);                                                        // 1580
  });                                                                                                                  // 1581
                                                                                                                       //
  /**                                                                                                                  //
  * Fires once after all other scripts have loaded                                                                     //
  * @function                                                                                                          //
  * @private                                                                                                           //
  */                                                                                                                   //
  $(window).load(function () {                                                                                         // 1588
    checkListeners();                                                                                                  // 1589
  });                                                                                                                  // 1590
                                                                                                                       //
  function checkListeners() {                                                                                          // 1592
    eventsListener();                                                                                                  // 1593
    resizeListener();                                                                                                  // 1594
    scrollListener();                                                                                                  // 1595
    closemeListener();                                                                                                 // 1596
  }                                                                                                                    // 1597
                                                                                                                       //
  //******** only fires this function once on load, if there's something to watch ********                             //
  function closemeListener(pluginName) {                                                                               // 1600
    var yetiBoxes = $('[data-yeti-box]'),                                                                              // 1601
        plugNames = ['dropdown', 'tooltip', 'reveal'];                                                                 // 1601
                                                                                                                       //
    if (pluginName) {                                                                                                  // 1604
      if (typeof pluginName === 'string') {                                                                            // 1605
        plugNames.push(pluginName);                                                                                    // 1606
      } else if ((typeof pluginName === 'undefined' ? 'undefined' : (0, _typeof3['default'])(pluginName)) === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);                                                                                  // 1608
      } else {                                                                                                         // 1609
        console.error('Plugin names must be strings');                                                                 // 1610
      }                                                                                                                // 1611
    }                                                                                                                  // 1612
    if (yetiBoxes.length) {                                                                                            // 1613
      var listeners = plugNames.map(function (name) {                                                                  // 1614
        return 'closeme.zf.' + name;                                                                                   // 1615
      }).join(' ');                                                                                                    // 1616
                                                                                                                       //
      $(window).off(listeners).on(listeners, function (e, pluginId) {                                                  // 1618
        var plugin = e.namespace.split('.')[0];                                                                        // 1619
        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');                            // 1620
                                                                                                                       //
        plugins.each(function () {                                                                                     // 1622
          var _this = $(this);                                                                                         // 1623
                                                                                                                       //
          _this.triggerHandler('close.zf.trigger', [_this]);                                                           // 1625
        });                                                                                                            // 1626
      });                                                                                                              // 1627
    }                                                                                                                  // 1628
  }                                                                                                                    // 1629
                                                                                                                       //
  function resizeListener(debounce) {                                                                                  // 1631
    var timer = void 0,                                                                                                // 1632
        $nodes = $('[data-resize]');                                                                                   // 1632
    if ($nodes.length) {                                                                                               // 1634
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {                                        // 1635
        if (timer) {                                                                                                   // 1636
          clearTimeout(timer);                                                                                         // 1637
        }                                                                                                              // 1638
                                                                                                                       //
        timer = setTimeout(function () {                                                                               // 1640
                                                                                                                       //
          if (!MutationObserver) {                                                                                     // 1642
            //fallback for IE 9                                                                                        //
            $nodes.each(function () {                                                                                  // 1644
              $(this).triggerHandler('resizeme.zf.trigger');                                                           // 1645
            });                                                                                                        // 1646
          }                                                                                                            // 1647
          //trigger all listening elements and signal a resize event                                                   //
          $nodes.attr('data-events', "resize");                                                                        // 1649
        }, debounce || 10); //default time to emit resize event                                                        // 1650
      });                                                                                                              // 1651
    }                                                                                                                  // 1652
  }                                                                                                                    // 1653
                                                                                                                       //
  function scrollListener(debounce) {                                                                                  // 1655
    var timer = void 0,                                                                                                // 1656
        $nodes = $('[data-scroll]');                                                                                   // 1656
    if ($nodes.length) {                                                                                               // 1658
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {                                        // 1659
        if (timer) {                                                                                                   // 1660
          clearTimeout(timer);                                                                                         // 1661
        }                                                                                                              // 1662
                                                                                                                       //
        timer = setTimeout(function () {                                                                               // 1664
                                                                                                                       //
          if (!MutationObserver) {                                                                                     // 1666
            //fallback for IE 9                                                                                        //
            $nodes.each(function () {                                                                                  // 1668
              $(this).triggerHandler('scrollme.zf.trigger');                                                           // 1669
            });                                                                                                        // 1670
          }                                                                                                            // 1671
          //trigger all listening elements and signal a scroll event                                                   //
          $nodes.attr('data-events', "scroll");                                                                        // 1673
        }, debounce || 10); //default time to emit scroll event                                                        // 1674
      });                                                                                                              // 1675
    }                                                                                                                  // 1676
  }                                                                                                                    // 1677
                                                                                                                       //
  function eventsListener() {                                                                                          // 1679
    if (!MutationObserver) {                                                                                           // 1680
      return false;                                                                                                    // 1681
    }                                                                                                                  // 1682
    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');                              // 1683
                                                                                                                       //
    //element callback                                                                                                 //
    var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {                          // 1686
      var $target = $(mutationRecordsList[0].target);                                                                  // 1687
      //trigger the event handler for the element depending on type                                                    //
      switch ($target.attr("data-events")) {                                                                           // 1689
                                                                                                                       //
        case "resize":                                                                                                 // 1691
          $target.triggerHandler('resizeme.zf.trigger', [$target]);                                                    // 1692
          break;                                                                                                       // 1693
                                                                                                                       //
        case "scroll":                                                                                                 // 1695
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);                                // 1696
          break;                                                                                                       // 1697
                                                                                                                       //
        // case "mutate" :                                                                                             //
        // console.log('mutate', $target);                                                                             //
        // $target.triggerHandler('mutate.zf.trigger');                                                                //
        //                                                                                                             //
        // //make sure we don't get stuck in an infinite loop from sloppy codeing                                      //
        // if ($target.index('[data-mutate]') == $("[data-mutate]").length-1) {                                        //
        //   domMutationObserver();                                                                                    //
        // }                                                                                                           //
        // break;                                                                                                      //
                                                                                                                       //
        default:                                                                                                       // 1709
          return false;                                                                                                // 1710
        //nothing                                                                                                      //
      }                                                                                                                // 1689
    };                                                                                                                 // 1713
                                                                                                                       //
    if (nodes.length) {                                                                                                // 1715
      //for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {                                                                    // 1717
        var elementObserver = new MutationObserver(listeningElementsMutation);                                         // 1718
        elementObserver.observe(nodes[i], { attributes: true, childList: false, characterData: false, subtree: false, attributeFilter: ["data-events"] });
      }                                                                                                                // 1720
    }                                                                                                                  // 1721
  }                                                                                                                    // 1722
                                                                                                                       //
  // ------------------------------------                                                                              //
                                                                                                                       //
  // [PH]                                                                                                              //
  // Foundation.CheckWatchers = checkWatchers;                                                                         //
  Foundation.IHearYou = checkListeners;                                                                                // 1728
  // Foundation.ISeeYou = scrollListener;                                                                              //
  // Foundation.IFeelYou = closemeListener;                                                                            //
}(jQuery);                                                                                                             // 1731
                                                                                                                       //
// function domMutationObserver(debounce) {                                                                            //
//   // !!! This is coming soon and needs more work; not active  !!! //                                                //
//   var timer,                                                                                                        //
//   nodes = document.querySelectorAll('[data-mutate]');                                                               //
//   //                                                                                                                //
//   if (nodes.length) {                                                                                               //
//     // var MutationObserver = (function () {                                                                        //
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];                                                           //
//     //   for (var i=0; i < prefixes.length; i++) {                                                                  //
//     //     if (prefixes[i] + 'MutationObserver' in window) {                                                        //
//     //       return window[prefixes[i] + 'MutationObserver'];                                                       //
//     //     }                                                                                                        //
//     //   }                                                                                                          //
//     //   return false;                                                                                              //
//     // }());                                                                                                        //
//                                                                                                                     //
//                                                                                                                     //
//     //for the body, we need to listen for all changes effecting the style and class attributes                      //
//     var bodyObserver = new MutationObserver(bodyMutation);                                                          //
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//                                                                                                                     //
//                                                                                                                     //
//     //body callback                                                                                                 //
//     function bodyMutation(mutate) {                                                                                 //
//       //trigger all listening elements and signal a mutation event                                                  //
//       if (timer) { clearTimeout(timer); }                                                                           //
//                                                                                                                     //
//       timer = setTimeout(function() {                                                                               //
//         bodyObserver.disconnect();                                                                                  //
//         $('[data-mutate]').attr('data-events',"mutate");                                                            //
//       }, debounce || 150);                                                                                          //
//     }                                                                                                               //
//   }                                                                                                                 //
// }                                                                                                                   //
'use strict';                                                                                                          // 1767
                                                                                                                       //
var _createClass = function () {                                                                                       // 1769
  function defineProperties(target, props) {                                                                           // 1769
    for (var i = 0; i < props.length; i++) {                                                                           // 1769
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 1769
  }return function (Constructor, protoProps, staticProps) {                                                            // 1769
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 1769
}();                                                                                                                   // 1769
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 1771
  if (!(instance instanceof Constructor)) {                                                                            // 1771
    throw new TypeError("Cannot call a class as a function");                                                          // 1771
  }                                                                                                                    // 1771
}                                                                                                                      // 1771
                                                                                                                       //
!function ($) {                                                                                                        // 1773
                                                                                                                       //
  /**                                                                                                                  //
   * Abide module.                                                                                                     //
   * @module foundation.abide                                                                                          //
   */                                                                                                                  //
                                                                                                                       //
  var Abide = function () {                                                                                            // 1780
    /**                                                                                                                //
     * Creates a new instance of Abide.                                                                                //
     * @class                                                                                                          //
     * @fires Abide#init                                                                                               //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Abide(element) {                                                                                          // 1789
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];                           // 1790
                                                                                                                       //
      _classCallCheck(this, Abide);                                                                                    // 1792
                                                                                                                       //
      this.$element = element;                                                                                         // 1794
      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);                                      // 1795
                                                                                                                       //
      this._init();                                                                                                    // 1797
                                                                                                                       //
      Foundation.registerPlugin(this, 'Abide');                                                                        // 1799
    }                                                                                                                  // 1800
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.                              //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Abide, [{                                                                                             // 1808
      key: '_init',                                                                                                    // 1809
      value: function () {                                                                                             // 1810
        function _init() {                                                                                             // 1810
          this.$inputs = this.$element.find('input, textarea, select');                                                // 1811
                                                                                                                       //
          this._events();                                                                                              // 1813
        }                                                                                                              // 1814
                                                                                                                       //
        return _init;                                                                                                  // 1810
      }()                                                                                                              // 1810
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for Abide.                                                                                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1808
      key: '_events',                                                                                                  // 1822
      value: function () {                                                                                             // 1823
        function _events() {                                                                                           // 1823
          var _this2 = this;                                                                                           // 1824
                                                                                                                       //
          this.$element.off('.abide').on('reset.zf.abide', function () {                                               // 1826
            _this2.resetForm();                                                                                        // 1827
          }).on('submit.zf.abide', function () {                                                                       // 1828
            return _this2.validateForm();                                                                              // 1829
          });                                                                                                          // 1830
                                                                                                                       //
          if (this.options.validateOn === 'fieldChange') {                                                             // 1832
            this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {                                   // 1833
              _this2.validateInput($(e.target));                                                                       // 1834
            });                                                                                                        // 1835
          }                                                                                                            // 1836
                                                                                                                       //
          if (this.options.liveValidate) {                                                                             // 1838
            this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {                                     // 1839
              _this2.validateInput($(e.target));                                                                       // 1840
            });                                                                                                        // 1841
          }                                                                                                            // 1842
        }                                                                                                              // 1843
                                                                                                                       //
        return _events;                                                                                                // 1823
      }()                                                                                                              // 1823
                                                                                                                       //
      /**                                                                                                              //
       * Calls necessary functions to update Abide upon DOM change                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1821
      key: '_reflow',                                                                                                  // 1851
      value: function () {                                                                                             // 1852
        function _reflow() {                                                                                           // 1852
          this._init();                                                                                                // 1853
        }                                                                                                              // 1854
                                                                                                                       //
        return _reflow;                                                                                                // 1852
      }()                                                                                                              // 1852
                                                                                                                       //
      /**                                                                                                              //
       * Checks whether or not a form element has the required attribute and if it's checked or not                    //
       * @param {Object} element - jQuery object to check for required attribute                                       //
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1850
      key: 'requiredCheck',                                                                                            // 1863
      value: function () {                                                                                             // 1864
        function requiredCheck($el) {                                                                                  // 1864
          if (!$el.attr('required')) return true;                                                                      // 1865
                                                                                                                       //
          var isGood = true;                                                                                           // 1867
                                                                                                                       //
          switch ($el[0].type) {                                                                                       // 1869
            case 'checkbox':                                                                                           // 1870
              isGood = $el[0].checked;                                                                                 // 1871
              break;                                                                                                   // 1872
                                                                                                                       //
            case 'select':                                                                                             // 1874
            case 'select-one':                                                                                         // 1875
            case 'select-multiple':                                                                                    // 1876
              var opt = $el.find('option:selected');                                                                   // 1877
              if (!opt.length || !opt.val()) isGood = false;                                                           // 1878
              break;                                                                                                   // 1879
                                                                                                                       //
            default:                                                                                                   // 1881
              if (!$el.val() || !$el.val().length) isGood = false;                                                     // 1882
          }                                                                                                            // 1869
                                                                                                                       //
          return isGood;                                                                                               // 1885
        }                                                                                                              // 1886
                                                                                                                       //
        return requiredCheck;                                                                                          // 1864
      }()                                                                                                              // 1864
                                                                                                                       //
      /**                                                                                                              //
       * Based on $el, get the first element with selector in this order:                                              //
       * 1. The element's direct sibling('s).                                                                          //
       * 3. The element's parent's children.                                                                           //
       *                                                                                                               //
       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.       //
       *                                                                                                               //
       * @param {Object} $el - jQuery object to use as reference to find the form error selector.                      //
       * @returns {Object} jQuery object with the selector.                                                            //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1862
      key: 'findFormError',                                                                                            // 1900
      value: function () {                                                                                             // 1901
        function findFormError($el) {                                                                                  // 1901
          var $error = $el.siblings(this.options.formErrorSelector);                                                   // 1902
                                                                                                                       //
          if (!$error.length) {                                                                                        // 1904
            $error = $el.parent().find(this.options.formErrorSelector);                                                // 1905
          }                                                                                                            // 1906
                                                                                                                       //
          return $error;                                                                                               // 1908
        }                                                                                                              // 1909
                                                                                                                       //
        return findFormError;                                                                                          // 1901
      }()                                                                                                              // 1901
                                                                                                                       //
      /**                                                                                                              //
       * Get the first element in this order:                                                                          //
       * 2. The <label> with the attribute `[for="someInputId"]`                                                       //
       * 3. The `.closest()` <label>                                                                                   //
       *                                                                                                               //
       * @param {Object} $el - jQuery object to check for required attribute                                           //
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1899
      key: 'findLabel',                                                                                                // 1921
      value: function () {                                                                                             // 1922
        function findLabel($el) {                                                                                      // 1922
          var id = $el[0].id;                                                                                          // 1923
          var $label = this.$element.find('label[for="' + id + '"]');                                                  // 1924
                                                                                                                       //
          if (!$label.length) {                                                                                        // 1926
            return $el.closest('label');                                                                               // 1927
          }                                                                                                            // 1928
                                                                                                                       //
          return $label;                                                                                               // 1930
        }                                                                                                              // 1931
                                                                                                                       //
        return findLabel;                                                                                              // 1922
      }()                                                                                                              // 1922
                                                                                                                       //
      /**                                                                                                              //
       * Get the set of labels associated with a set of radio els in this order                                        //
       * 2. The <label> with the attribute `[for="someInputId"]`                                                       //
       * 3. The `.closest()` <label>                                                                                   //
       *                                                                                                               //
       * @param {Object} $el - jQuery object to check for required attribute                                           //
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1920
      key: 'findRadioLabels',                                                                                          // 1943
      value: function () {                                                                                             // 1944
        function findRadioLabels($els) {                                                                               // 1944
          var _this3 = this;                                                                                           // 1945
                                                                                                                       //
          var labels = $els.map(function (i, el) {                                                                     // 1947
            var id = el.id;                                                                                            // 1948
            var $label = _this3.$element.find('label[for="' + id + '"]');                                              // 1949
                                                                                                                       //
            if (!$label.length) {                                                                                      // 1951
              $label = $(el).closest('label');                                                                         // 1952
            }                                                                                                          // 1953
            return $label[0];                                                                                          // 1954
          });                                                                                                          // 1955
                                                                                                                       //
          return $(labels);                                                                                            // 1957
        }                                                                                                              // 1958
                                                                                                                       //
        return findRadioLabels;                                                                                        // 1944
      }()                                                                                                              // 1944
                                                                                                                       //
      /**                                                                                                              //
       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form                 //
       * @param {Object} $el - jQuery object to add the class to                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1942
      key: 'addErrorClasses',                                                                                          // 1966
      value: function () {                                                                                             // 1967
        function addErrorClasses($el) {                                                                                // 1967
          var $label = this.findLabel($el);                                                                            // 1968
          var $formError = this.findFormError($el);                                                                    // 1969
                                                                                                                       //
          if ($label.length) {                                                                                         // 1971
            $label.addClass(this.options.labelErrorClass);                                                             // 1972
          }                                                                                                            // 1973
                                                                                                                       //
          if ($formError.length) {                                                                                     // 1975
            $formError.addClass(this.options.formErrorClass);                                                          // 1976
          }                                                                                                            // 1977
                                                                                                                       //
          $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');                                         // 1979
        }                                                                                                              // 1980
                                                                                                                       //
        return addErrorClasses;                                                                                        // 1967
      }()                                                                                                              // 1967
                                                                                                                       //
      /**                                                                                                              //
       * Remove CSS error classes etc from an entire radio button group                                                //
       * @param {String} groupName - A string that specifies the name of a radio button group                          //
       *                                                                                                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1965
      key: 'removeRadioErrorClasses',                                                                                  // 1989
      value: function () {                                                                                             // 1990
        function removeRadioErrorClasses(groupName) {                                                                  // 1990
          var $els = this.$element.find(':radio[name="' + groupName + '"]');                                           // 1991
          var $labels = this.findRadioLabels($els);                                                                    // 1992
          var $formErrors = this.findFormError($els);                                                                  // 1993
                                                                                                                       //
          if ($labels.length) {                                                                                        // 1995
            $labels.removeClass(this.options.labelErrorClass);                                                         // 1996
          }                                                                                                            // 1997
                                                                                                                       //
          if ($formErrors.length) {                                                                                    // 1999
            $formErrors.removeClass(this.options.formErrorClass);                                                      // 2000
          }                                                                                                            // 2001
                                                                                                                       //
          $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');                                   // 2003
        }                                                                                                              // 2004
                                                                                                                       //
        return removeRadioErrorClasses;                                                                                // 1990
      }()                                                                                                              // 1990
                                                                                                                       //
      /**                                                                                                              //
       * Removes CSS error class as specified by the Abide settings from the label, input, and the form                //
       * @param {Object} $el - jQuery object to remove the class from                                                  //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 1988
      key: 'removeErrorClasses',                                                                                       // 2012
      value: function () {                                                                                             // 2013
        function removeErrorClasses($el) {                                                                             // 2013
          // radios need to clear all of the els                                                                       //
          if ($el[0].type == 'radio') {                                                                                // 2015
            return this.removeRadioErrorClasses($el.attr('name'));                                                     // 2016
          }                                                                                                            // 2017
                                                                                                                       //
          var $label = this.findLabel($el);                                                                            // 2019
          var $formError = this.findFormError($el);                                                                    // 2020
                                                                                                                       //
          if ($label.length) {                                                                                         // 2022
            $label.removeClass(this.options.labelErrorClass);                                                          // 2023
          }                                                                                                            // 2024
                                                                                                                       //
          if ($formError.length) {                                                                                     // 2026
            $formError.removeClass(this.options.formErrorClass);                                                       // 2027
          }                                                                                                            // 2028
                                                                                                                       //
          $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');                                    // 2030
        }                                                                                                              // 2031
                                                                                                                       //
        return removeErrorClasses;                                                                                     // 2013
      }()                                                                                                              // 2013
                                                                                                                       //
      /**                                                                                                              //
       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type               //
       * @fires Abide#invalid                                                                                          //
       * @fires Abide#valid                                                                                            //
       * @param {Object} element - jQuery object to validate, should be an HTML input                                  //
       * @returns {Boolean} goodToGo - If the input is valid or not.                                                   //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2011
      key: 'validateInput',                                                                                            // 2042
      value: function () {                                                                                             // 2043
        function validateInput($el) {                                                                                  // 2043
          var clearRequire = this.requiredCheck($el),                                                                  // 2044
              validated = false,                                                                                       // 2044
              customValidator = true,                                                                                  // 2044
              validator = $el.attr('data-validator'),                                                                  // 2044
              equalTo = true;                                                                                          // 2044
                                                                                                                       //
          // don't validate ignored inputs or hidden inputs                                                            //
          if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]')) {                                            // 2051
            return true;                                                                                               // 2052
          }                                                                                                            // 2053
                                                                                                                       //
          switch ($el[0].type) {                                                                                       // 2055
            case 'radio':                                                                                              // 2056
              validated = this.validateRadio($el.attr('name'));                                                        // 2057
              break;                                                                                                   // 2058
                                                                                                                       //
            case 'checkbox':                                                                                           // 2060
              validated = clearRequire;                                                                                // 2061
              break;                                                                                                   // 2062
                                                                                                                       //
            case 'select':                                                                                             // 2064
            case 'select-one':                                                                                         // 2065
            case 'select-multiple':                                                                                    // 2066
              validated = clearRequire;                                                                                // 2067
              break;                                                                                                   // 2068
                                                                                                                       //
            default:                                                                                                   // 2070
              validated = this.validateText($el);                                                                      // 2071
          }                                                                                                            // 2055
                                                                                                                       //
          if (validator) {                                                                                             // 2074
            customValidator = this.matchValidation($el, validator, $el.attr('required'));                              // 2075
          }                                                                                                            // 2076
                                                                                                                       //
          if ($el.attr('data-equalto')) {                                                                              // 2078
            equalTo = this.options.validators.equalTo($el);                                                            // 2079
          }                                                                                                            // 2080
                                                                                                                       //
          var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;                    // 2082
          var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';                                                // 2083
                                                                                                                       //
          this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);                                              // 2085
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
           * Trigger includes the DOM element of the input.                                                            //
           * @event Abide#valid                                                                                        //
           * @event Abide#invalid                                                                                      //
           */                                                                                                          //
          $el.trigger(message, [$el]);                                                                                 // 2093
                                                                                                                       //
          return goodToGo;                                                                                             // 2095
        }                                                                                                              // 2096
                                                                                                                       //
        return validateInput;                                                                                          // 2043
      }()                                                                                                              // 2043
                                                                                                                       //
      /**                                                                                                              //
       * Goes through a form and if there are any invalid inputs, it will display the form error element               //
       * @returns {Boolean} noError - true if no errors were detected...                                               //
       * @fires Abide#formvalid                                                                                        //
       * @fires Abide#forminvalid                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2041
      key: 'validateForm',                                                                                             // 2106
      value: function () {                                                                                             // 2107
        function validateForm() {                                                                                      // 2107
          var acc = [];                                                                                                // 2108
          var _this = this;                                                                                            // 2109
                                                                                                                       //
          this.$inputs.each(function () {                                                                              // 2111
            acc.push(_this.validateInput($(this)));                                                                    // 2112
          });                                                                                                          // 2113
                                                                                                                       //
          var noError = acc.indexOf(false) === -1;                                                                     // 2115
                                                                                                                       //
          this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');                         // 2117
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
           * Trigger includes the element of the form.                                                                 //
           * @event Abide#formvalid                                                                                    //
           * @event Abide#forminvalid                                                                                  //
           */                                                                                                          //
          this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);               // 2125
                                                                                                                       //
          return noError;                                                                                              // 2127
        }                                                                                                              // 2128
                                                                                                                       //
        return validateForm;                                                                                           // 2107
      }()                                                                                                              // 2107
                                                                                                                       //
      /**                                                                                                              //
       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
       * @param {Object} $el - jQuery object to validate, should be a text input HTML element                          //
       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns                 //
       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2105
      key: 'validateText',                                                                                             // 2138
      value: function () {                                                                                             // 2139
        function validateText($el, pattern) {                                                                          // 2139
          // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
          pattern = pattern || $el.attr('pattern') || $el.attr('type');                                                // 2141
          var inputText = $el.val();                                                                                   // 2142
          var valid = false;                                                                                           // 2143
                                                                                                                       //
          if (inputText.length) {                                                                                      // 2145
            // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp           //
            if (this.options.patterns.hasOwnProperty(pattern)) {                                                       // 2147
              valid = this.options.patterns[pattern].test(inputText);                                                  // 2148
            }                                                                                                          // 2149
            // If the pattern name isn't also the type attribute of the field, then test it as a regexp                //
            else if (pattern !== $el.attr('type')) {                                                                   // 2147
                valid = new RegExp(pattern).test(inputText);                                                           // 2152
              } else {                                                                                                 // 2153
                valid = true;                                                                                          // 2154
              }                                                                                                        // 2155
          }                                                                                                            // 2156
          // An empty field is valid if it's not required                                                              //
          else if (!$el.prop('required')) {                                                                            // 2145
              valid = true;                                                                                            // 2159
            }                                                                                                          // 2160
                                                                                                                       //
          return valid;                                                                                                // 2162
        }                                                                                                              // 2163
                                                                                                                       //
        return validateText;                                                                                           // 2139
      }()                                                                                                              // 2139
                                                                                                                       //
      /**                                                                                                              //
       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
       * @param {String} groupName - A string that specifies the name of a radio button group                          //
       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2137
      key: 'validateRadio',                                                                                            // 2172
      value: function () {                                                                                             // 2173
        function validateRadio(groupName) {                                                                            // 2173
          // If at least one radio in the group has the `required` attribute, the group is considered required         //
          // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice                   //
          var $group = this.$element.find(':radio[name="' + groupName + '"]');                                         // 2176
          var valid = false,                                                                                           // 2177
              required = false;                                                                                        // 2177
                                                                                                                       //
          // For the group to be required, at least one radio needs to be required                                     //
          $group.each(function (i, e) {                                                                                // 2181
            if ($(e).attr('required')) {                                                                               // 2182
              required = true;                                                                                         // 2183
            }                                                                                                          // 2184
          });                                                                                                          // 2185
          if (!required) valid = true;                                                                                 // 2186
                                                                                                                       //
          if (!valid) {                                                                                                // 2188
            // For the group to be valid, at least one radio needs to be checked                                       //
            $group.each(function (i, e) {                                                                              // 2190
              if ($(e).prop('checked')) {                                                                              // 2191
                valid = true;                                                                                          // 2192
              }                                                                                                        // 2193
            });                                                                                                        // 2194
          };                                                                                                           // 2195
                                                                                                                       //
          return valid;                                                                                                // 2197
        }                                                                                                              // 2198
                                                                                                                       //
        return validateRadio;                                                                                          // 2173
      }()                                                                                                              // 2173
                                                                                                                       //
      /**                                                                                                              //
       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
       * @param {Object} $el - jQuery input element.                                                                   //
       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
       * @param {Boolean} required - self explanatory?                                                                 //
       * @returns {Boolean} - true if validations passed.                                                              //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2171
      key: 'matchValidation',                                                                                          // 2209
      value: function () {                                                                                             // 2210
        function matchValidation($el, validators, required) {                                                          // 2210
          var _this4 = this;                                                                                           // 2211
                                                                                                                       //
          required = required ? true : false;                                                                          // 2213
                                                                                                                       //
          var clear = validators.split(' ').map(function (v) {                                                         // 2215
            return _this4.options.validators[v]($el, required, $el.parent());                                          // 2216
          });                                                                                                          // 2217
          return clear.indexOf(false) === -1;                                                                          // 2218
        }                                                                                                              // 2219
                                                                                                                       //
        return matchValidation;                                                                                        // 2210
      }()                                                                                                              // 2210
                                                                                                                       //
      /**                                                                                                              //
       * Resets form inputs and styles                                                                                 //
       * @fires Abide#formreset                                                                                        //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2208
      key: 'resetForm',                                                                                                // 2227
      value: function () {                                                                                             // 2228
        function resetForm() {                                                                                         // 2228
          var $form = this.$element,                                                                                   // 2229
              opts = this.options;                                                                                     // 2229
                                                                                                                       //
          $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);                         // 2232
          $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);                         // 2233
          $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);                      // 2234
          $form.find('[data-abide-error]').css('display', 'none');                                                     // 2235
          $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
          $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');       // 2237
          $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');    // 2238
          /**                                                                                                          //
           * Fires when the form has been reset.                                                                       //
           * @event Abide#formreset                                                                                    //
           */                                                                                                          //
          $form.trigger('formreset.zf.abide', [$form]);                                                                // 2243
        }                                                                                                              // 2244
                                                                                                                       //
        return resetForm;                                                                                              // 2228
      }()                                                                                                              // 2228
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of Abide.                                                                                //
       * Removes error styles and classes from elements, without resetting their values.                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2226
      key: 'destroy',                                                                                                  // 2252
      value: function () {                                                                                             // 2253
        function destroy() {                                                                                           // 2253
          var _this = this;                                                                                            // 2254
          this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');                               // 2255
                                                                                                                       //
          this.$inputs.off('.abide').each(function () {                                                                // 2257
            _this.removeErrorClasses($(this));                                                                         // 2258
          });                                                                                                          // 2259
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 2261
        }                                                                                                              // 2262
                                                                                                                       //
        return destroy;                                                                                                // 2253
      }()                                                                                                              // 2253
    }]);                                                                                                               // 2251
                                                                                                                       //
    return Abide;                                                                                                      // 2265
  }();                                                                                                                 // 2266
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  Abide.defaults = {                                                                                                   // 2273
    /**                                                                                                                //
     * The default event to validate inputs. Checkboxes and radios validate immediately.                               //
     * Remove or change this value for manual validation.                                                              //
     * @option                                                                                                         //
     * @example 'fieldChange'                                                                                          //
     */                                                                                                                //
    validateOn: 'fieldChange',                                                                                         // 2280
                                                                                                                       //
    /**                                                                                                                //
     * Class to be applied to input labels on failed validation.                                                       //
     * @option                                                                                                         //
     * @example 'is-invalid-label'                                                                                     //
     */                                                                                                                //
    labelErrorClass: 'is-invalid-label',                                                                               // 2287
                                                                                                                       //
    /**                                                                                                                //
     * Class to be applied to inputs on failed validation.                                                             //
     * @option                                                                                                         //
     * @example 'is-invalid-input'                                                                                     //
     */                                                                                                                //
    inputErrorClass: 'is-invalid-input',                                                                               // 2294
                                                                                                                       //
    /**                                                                                                                //
     * Class selector to use to target Form Errors for show/hide.                                                      //
     * @option                                                                                                         //
     * @example '.form-error'                                                                                          //
     */                                                                                                                //
    formErrorSelector: '.form-error',                                                                                  // 2301
                                                                                                                       //
    /**                                                                                                                //
     * Class added to Form Errors on failed validation.                                                                //
     * @option                                                                                                         //
     * @example 'is-visible'                                                                                           //
     */                                                                                                                //
    formErrorClass: 'is-visible',                                                                                      // 2308
                                                                                                                       //
    /**                                                                                                                //
     * Set to true to validate text inputs on any value change.                                                        //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    liveValidate: false,                                                                                               // 2315
                                                                                                                       //
    patterns: {                                                                                                        // 2317
      alpha: /^[a-zA-Z]+$/,                                                                                            // 2318
      alpha_numeric: /^[a-zA-Z0-9]+$/,                                                                                 // 2319
      integer: /^[-+]?\d+$/,                                                                                           // 2320
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,                                                                              // 2321
                                                                                                                       //
      // amex, visa, diners                                                                                            //
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,                                                                                           // 2325
                                                                                                                       //
      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,
                                                                                                                       //
      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de                                                                                                        //
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,                                      // 2332
                                                                                                                       //
      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD                                                                                                    //
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS                                                                                                      //
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,                                                                // 2338
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,                                                                    // 2339
      // MM/DD/YYYY                                                                                                    //
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,                                  // 2341
      // DD/MM/YYYY                                                                                                    //
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,                                  // 2343
                                                                                                                       //
      // #FFF or #FFFFFF                                                                                               //
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/                                                                     // 2346
    },                                                                                                                 // 2317
                                                                                                                       //
    /**                                                                                                                //
     * Optional validation functions to be used. `equalTo` being the only default included function.                   //
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.                                                                            //
     * required : Boolean value of the required attribute be present or not.                                           //
     * parent : The direct parent of the input.                                                                        //
     * @option                                                                                                         //
     */                                                                                                                //
    validators: {                                                                                                      // 2357
      equalTo: function () {                                                                                           // 2358
        function equalTo(el, required, parent) {                                                                       // 2358
          return $('#' + el.attr('data-equalto')).val() === el.val();                                                  // 2359
        }                                                                                                              // 2360
                                                                                                                       //
        return equalTo;                                                                                                // 2358
      }()                                                                                                              // 2358
    }                                                                                                                  // 2357
  };                                                                                                                   // 2273
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Abide, 'Abide');                                                                                   // 2365
}(jQuery);                                                                                                             // 2366
'use strict';                                                                                                          // 2367
                                                                                                                       //
var _createClass = function () {                                                                                       // 2369
  function defineProperties(target, props) {                                                                           // 2369
    for (var i = 0; i < props.length; i++) {                                                                           // 2369
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 2369
  }return function (Constructor, protoProps, staticProps) {                                                            // 2369
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 2369
}();                                                                                                                   // 2369
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 2371
  if (!(instance instanceof Constructor)) {                                                                            // 2371
    throw new TypeError("Cannot call a class as a function");                                                          // 2371
  }                                                                                                                    // 2371
}                                                                                                                      // 2371
                                                                                                                       //
!function ($) {                                                                                                        // 2373
                                                                                                                       //
  /**                                                                                                                  //
   * Accordion module.                                                                                                 //
   * @module foundation.accordion                                                                                      //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.motion                                                                                  //
   */                                                                                                                  //
                                                                                                                       //
  var Accordion = function () {                                                                                        // 2382
    /**                                                                                                                //
     * Creates a new instance of an accordion.                                                                         //
     * @class                                                                                                          //
     * @fires Accordion#init                                                                                           //
     * @param {jQuery} element - jQuery object to make into an accordion.                                              //
     * @param {Object} options - a plain object with settings to override the default options.                         //
     */                                                                                                                //
                                                                                                                       //
    function Accordion(element, options) {                                                                             // 2391
      _classCallCheck(this, Accordion);                                                                                // 2392
                                                                                                                       //
      this.$element = element;                                                                                         // 2394
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);                                  // 2395
                                                                                                                       //
      this._init();                                                                                                    // 2397
                                                                                                                       //
      Foundation.registerPlugin(this, 'Accordion');                                                                    // 2399
      Foundation.Keyboard.register('Accordion', {                                                                      // 2400
        'ENTER': 'toggle',                                                                                             // 2401
        'SPACE': 'toggle',                                                                                             // 2402
        'ARROW_DOWN': 'next',                                                                                          // 2403
        'ARROW_UP': 'previous'                                                                                         // 2404
      });                                                                                                              // 2400
    }                                                                                                                  // 2406
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the accordion by animating the preset active pane(s).                                               //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Accordion, [{                                                                                         // 2414
      key: '_init',                                                                                                    // 2415
      value: function () {                                                                                             // 2416
        function _init() {                                                                                             // 2416
          this.$element.attr('role', 'tablist');                                                                       // 2417
          this.$tabs = this.$element.children('li, [data-accordion-item]');                                            // 2418
                                                                                                                       //
          this.$tabs.each(function (idx, el) {                                                                         // 2420
            var $el = $(el),                                                                                           // 2421
                $content = $el.children('[data-tab-content]'),                                                         // 2421
                id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),                                         // 2421
                linkId = el.id || id + '-label';                                                                       // 2421
                                                                                                                       //
            $el.find('a:first').attr({                                                                                 // 2426
              'aria-controls': id,                                                                                     // 2427
              'role': 'tab',                                                                                           // 2428
              'id': linkId,                                                                                            // 2429
              'aria-expanded': false,                                                                                  // 2430
              'aria-selected': false                                                                                   // 2431
            });                                                                                                        // 2426
                                                                                                                       //
            $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });           // 2434
          });                                                                                                          // 2435
          var $initActive = this.$element.find('.is-active').children('[data-tab-content]');                           // 2436
          if ($initActive.length) {                                                                                    // 2437
            this.down($initActive, true);                                                                              // 2438
          }                                                                                                            // 2439
          this._events();                                                                                              // 2440
        }                                                                                                              // 2441
                                                                                                                       //
        return _init;                                                                                                  // 2416
      }()                                                                                                              // 2416
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for items within the accordion.                                                           //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2414
      key: '_events',                                                                                                  // 2449
      value: function () {                                                                                             // 2450
        function _events() {                                                                                           // 2450
          var _this = this;                                                                                            // 2451
                                                                                                                       //
          this.$tabs.each(function () {                                                                                // 2453
            var $elem = $(this);                                                                                       // 2454
            var $tabContent = $elem.children('[data-tab-content]');                                                    // 2455
            if ($tabContent.length) {                                                                                  // 2456
              $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
                // $(this).children('a').on('click.zf.accordion', function(e) {                                        //
                e.preventDefault();                                                                                    // 2459
                if ($elem.hasClass('is-active')) {                                                                     // 2460
                  if (_this.options.allowAllClosed || $elem.siblings().hasClass('is-active')) {                        // 2461
                    _this.up($tabContent);                                                                             // 2462
                  }                                                                                                    // 2463
                } else {                                                                                               // 2464
                  _this.down($tabContent);                                                                             // 2465
                }                                                                                                      // 2466
              }).on('keydown.zf.accordion', function (e) {                                                             // 2467
                Foundation.Keyboard.handleKey(e, 'Accordion', {                                                        // 2468
                  toggle: function () {                                                                                // 2469
                    function toggle() {                                                                                // 2469
                      _this.toggle($tabContent);                                                                       // 2470
                    }                                                                                                  // 2471
                                                                                                                       //
                    return toggle;                                                                                     // 2469
                  }(),                                                                                                 // 2469
                  next: function () {                                                                                  // 2472
                    function next() {                                                                                  // 2472
                      var $a = $elem.next().find('a').focus();                                                         // 2473
                      if (!_this.options.multiExpand) {                                                                // 2474
                        $a.trigger('click.zf.accordion');                                                              // 2475
                      }                                                                                                // 2476
                    }                                                                                                  // 2477
                                                                                                                       //
                    return next;                                                                                       // 2472
                  }(),                                                                                                 // 2472
                  previous: function () {                                                                              // 2478
                    function previous() {                                                                              // 2478
                      var $a = $elem.prev().find('a').focus();                                                         // 2479
                      if (!_this.options.multiExpand) {                                                                // 2480
                        $a.trigger('click.zf.accordion');                                                              // 2481
                      }                                                                                                // 2482
                    }                                                                                                  // 2483
                                                                                                                       //
                    return previous;                                                                                   // 2478
                  }(),                                                                                                 // 2478
                  handled: function () {                                                                               // 2484
                    function handled() {                                                                               // 2484
                      e.preventDefault();                                                                              // 2485
                      e.stopPropagation();                                                                             // 2486
                    }                                                                                                  // 2487
                                                                                                                       //
                    return handled;                                                                                    // 2484
                  }()                                                                                                  // 2484
                });                                                                                                    // 2468
              });                                                                                                      // 2489
            }                                                                                                          // 2490
          });                                                                                                          // 2491
        }                                                                                                              // 2492
                                                                                                                       //
        return _events;                                                                                                // 2450
      }()                                                                                                              // 2450
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the selected content pane's open/close state.                                                         //
       * @param {jQuery} $target - jQuery object of the pane to toggle.                                                //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2448
      key: 'toggle',                                                                                                   // 2501
      value: function () {                                                                                             // 2502
        function toggle($target) {                                                                                     // 2502
          if ($target.parent().hasClass('is-active')) {                                                                // 2503
            if (this.options.allowAllClosed || $target.parent().siblings().hasClass('is-active')) {                    // 2504
              this.up($target);                                                                                        // 2505
            } else {                                                                                                   // 2506
              return;                                                                                                  // 2507
            }                                                                                                          // 2508
          } else {                                                                                                     // 2509
            this.down($target);                                                                                        // 2510
          }                                                                                                            // 2511
        }                                                                                                              // 2512
                                                                                                                       //
        return toggle;                                                                                                 // 2502
      }()                                                                                                              // 2502
                                                                                                                       //
      /**                                                                                                              //
       * Opens the accordion tab defined by `$target`.                                                                 //
       * @param {jQuery} $target - Accordion pane to open.                                                             //
       * @param {Boolean} firstTime - flag to determine if reflow should happen.                                       //
       * @fires Accordion#down                                                                                         //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2500
      key: 'down',                                                                                                     // 2523
      value: function () {                                                                                             // 2524
        function down($target, firstTime) {                                                                            // 2524
          var _this2 = this;                                                                                           // 2525
                                                                                                                       //
          if (!this.options.multiExpand && !firstTime) {                                                               // 2527
            var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');                  // 2528
            if ($currentActive.length) {                                                                               // 2529
              this.up($currentActive);                                                                                 // 2530
            }                                                                                                          // 2531
          }                                                                                                            // 2532
                                                                                                                       //
          $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');    // 2534
                                                                                                                       //
          $target.slideDown(this.options.slideSpeed, function () {                                                     // 2536
            /**                                                                                                        //
             * Fires when the tab is done opening.                                                                     //
             * @event Accordion#down                                                                                   //
             */                                                                                                        //
            _this2.$element.trigger('down.zf.accordion', [$target]);                                                   // 2541
          });                                                                                                          // 2542
                                                                                                                       //
          $('#' + $target.attr('aria-labelledby')).attr({                                                              // 2544
            'aria-expanded': true,                                                                                     // 2545
            'aria-selected': true                                                                                      // 2546
          });                                                                                                          // 2544
        }                                                                                                              // 2548
                                                                                                                       //
        return down;                                                                                                   // 2524
      }()                                                                                                              // 2524
                                                                                                                       //
      /**                                                                                                              //
       * Closes the tab defined by `$target`.                                                                          //
       * @param {jQuery} $target - Accordion tab to close.                                                             //
       * @fires Accordion#up                                                                                           //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2522
      key: 'up',                                                                                                       // 2558
      value: function () {                                                                                             // 2559
        function up($target) {                                                                                         // 2559
          var $aunts = $target.parent().siblings(),                                                                    // 2560
              _this = this;                                                                                            // 2560
          var canClose = this.options.multiExpand ? $aunts.hasClass('is-active') : $target.parent().hasClass('is-active');
                                                                                                                       //
          if (!this.options.allowAllClosed && !canClose) {                                                             // 2564
            return;                                                                                                    // 2565
          }                                                                                                            // 2566
                                                                                                                       //
          // Foundation.Move(this.options.slideSpeed, $target, function(){                                             //
          $target.slideUp(_this.options.slideSpeed, function () {                                                      // 2569
            /**                                                                                                        //
             * Fires when the tab is done collapsing up.                                                               //
             * @event Accordion#up                                                                                     //
             */                                                                                                        //
            _this.$element.trigger('up.zf.accordion', [$target]);                                                      // 2574
          });                                                                                                          // 2575
          // });                                                                                                       //
                                                                                                                       //
          $target.attr('aria-hidden', true).parent().removeClass('is-active');                                         // 2578
                                                                                                                       //
          $('#' + $target.attr('aria-labelledby')).attr({                                                              // 2580
            'aria-expanded': false,                                                                                    // 2581
            'aria-selected': false                                                                                     // 2582
          });                                                                                                          // 2580
        }                                                                                                              // 2584
                                                                                                                       //
        return up;                                                                                                     // 2559
      }()                                                                                                              // 2559
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of an accordion.                                                                         //
       * @fires Accordion#destroyed                                                                                    //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2557
      key: 'destroy',                                                                                                  // 2593
      value: function () {                                                                                             // 2594
        function destroy() {                                                                                           // 2594
          this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');                           // 2595
          this.$element.find('a').off('.zf.accordion');                                                                // 2596
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 2598
        }                                                                                                              // 2599
                                                                                                                       //
        return destroy;                                                                                                // 2594
      }()                                                                                                              // 2594
    }]);                                                                                                               // 2592
                                                                                                                       //
    return Accordion;                                                                                                  // 2602
  }();                                                                                                                 // 2603
                                                                                                                       //
  Accordion.defaults = {                                                                                               // 2605
    /**                                                                                                                //
     * Amount of time to animate the opening of an accordion pane.                                                     //
     * @option                                                                                                         //
     * @example 250                                                                                                    //
     */                                                                                                                //
    slideSpeed: 250,                                                                                                   // 2611
    /**                                                                                                                //
     * Allow the accordion to have multiple open panes.                                                                //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    multiExpand: false,                                                                                                // 2617
    /**                                                                                                                //
     * Allow the accordion to close all panes.                                                                         //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    allowAllClosed: false                                                                                              // 2623
  };                                                                                                                   // 2605
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Accordion, 'Accordion');                                                                           // 2627
}(jQuery);                                                                                                             // 2628
'use strict';                                                                                                          // 2629
                                                                                                                       //
var _createClass = function () {                                                                                       // 2631
  function defineProperties(target, props) {                                                                           // 2631
    for (var i = 0; i < props.length; i++) {                                                                           // 2631
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 2631
  }return function (Constructor, protoProps, staticProps) {                                                            // 2631
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 2631
}();                                                                                                                   // 2631
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 2633
  if (!(instance instanceof Constructor)) {                                                                            // 2633
    throw new TypeError("Cannot call a class as a function");                                                          // 2633
  }                                                                                                                    // 2633
}                                                                                                                      // 2633
                                                                                                                       //
!function ($) {                                                                                                        // 2635
                                                                                                                       //
  /**                                                                                                                  //
   * AccordionMenu module.                                                                                             //
   * @module foundation.accordionMenu                                                                                  //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.nest                                                                                    //
   */                                                                                                                  //
                                                                                                                       //
  var AccordionMenu = function () {                                                                                    // 2645
    /**                                                                                                                //
     * Creates a new instance of an accordion menu.                                                                    //
     * @class                                                                                                          //
     * @fires AccordionMenu#init                                                                                       //
     * @param {jQuery} element - jQuery object to make into an accordion menu.                                         //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function AccordionMenu(element, options) {                                                                         // 2654
      _classCallCheck(this, AccordionMenu);                                                                            // 2655
                                                                                                                       //
      this.$element = element;                                                                                         // 2657
      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);                              // 2658
                                                                                                                       //
      Foundation.Nest.Feather(this.$element, 'accordion');                                                             // 2660
                                                                                                                       //
      this._init();                                                                                                    // 2662
                                                                                                                       //
      Foundation.registerPlugin(this, 'AccordionMenu');                                                                // 2664
      Foundation.Keyboard.register('AccordionMenu', {                                                                  // 2665
        'ENTER': 'toggle',                                                                                             // 2666
        'SPACE': 'toggle',                                                                                             // 2667
        'ARROW_RIGHT': 'open',                                                                                         // 2668
        'ARROW_UP': 'up',                                                                                              // 2669
        'ARROW_DOWN': 'down',                                                                                          // 2670
        'ARROW_LEFT': 'close',                                                                                         // 2671
        'ESCAPE': 'closeAll',                                                                                          // 2672
        'TAB': 'down',                                                                                                 // 2673
        'SHIFT_TAB': 'up'                                                                                              // 2674
      });                                                                                                              // 2665
    }                                                                                                                  // 2676
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the accordion menu by hiding all nested menus.                                                      //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(AccordionMenu, [{                                                                                     // 2684
      key: '_init',                                                                                                    // 2685
      value: function () {                                                                                             // 2686
        function _init() {                                                                                             // 2686
          this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
          this.$element.attr({                                                                                         // 2688
            'role': 'tablist',                                                                                         // 2689
            'aria-multiselectable': this.options.multiOpen                                                             // 2690
          });                                                                                                          // 2688
                                                                                                                       //
          this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');                                        // 2693
          this.$menuLinks.each(function () {                                                                           // 2694
            var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),                                        // 2695
                $elem = $(this),                                                                                       // 2695
                $sub = $elem.children('[data-submenu]'),                                                               // 2695
                subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),                                           // 2695
                isActive = $sub.hasClass('is-active');                                                                 // 2695
            $elem.attr({                                                                                               // 2700
              'aria-controls': subId,                                                                                  // 2701
              'aria-expanded': isActive,                                                                               // 2702
              'role': 'tab',                                                                                           // 2703
              'id': linkId                                                                                             // 2704
            });                                                                                                        // 2700
            $sub.attr({                                                                                                // 2706
              'aria-labelledby': linkId,                                                                               // 2707
              'aria-hidden': !isActive,                                                                                // 2708
              'role': 'tabpanel',                                                                                      // 2709
              'id': subId                                                                                              // 2710
            });                                                                                                        // 2706
          });                                                                                                          // 2712
          var initPanes = this.$element.find('.is-active');                                                            // 2713
          if (initPanes.length) {                                                                                      // 2714
            var _this = this;                                                                                          // 2715
            initPanes.each(function () {                                                                               // 2716
              _this.down($(this));                                                                                     // 2717
            });                                                                                                        // 2718
          }                                                                                                            // 2719
          this._events();                                                                                              // 2720
        }                                                                                                              // 2721
                                                                                                                       //
        return _init;                                                                                                  // 2686
      }()                                                                                                              // 2686
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for items within the menu.                                                                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2684
      key: '_events',                                                                                                  // 2729
      value: function () {                                                                                             // 2730
        function _events() {                                                                                           // 2730
          var _this = this;                                                                                            // 2731
                                                                                                                       //
          this.$element.find('li').each(function () {                                                                  // 2733
            var $submenu = $(this).children('[data-submenu]');                                                         // 2734
                                                                                                                       //
            if ($submenu.length) {                                                                                     // 2736
              $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {          // 2737
                e.preventDefault();                                                                                    // 2738
                                                                                                                       //
                _this.toggle($submenu);                                                                                // 2740
              });                                                                                                      // 2741
            }                                                                                                          // 2742
          }).on('keydown.zf.accordionmenu', function (e) {                                                             // 2743
            var $element = $(this),                                                                                    // 2744
                $elements = $element.parent('ul').children('li'),                                                      // 2744
                $prevElement,                                                                                          // 2744
                $nextElement,                                                                                          // 2744
                $target = $element.children('[data-submenu]');                                                         // 2744
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 2750
              if ($(this).is($element)) {                                                                              // 2751
                $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();                                     // 2752
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();                  // 2753
                                                                                                                       //
                if ($(this).children('[data-submenu]:visible').length) {                                               // 2755
                  // has open sub menu                                                                                 //
                  $nextElement = $element.find('li:first-child').find('a').first();                                    // 2757
                }                                                                                                      // 2758
                if ($(this).is(':first-child')) {                                                                      // 2759
                  // is first element of sub menu                                                                      //
                  $prevElement = $element.parents('li').first().find('a').first();                                     // 2761
                } else if ($prevElement.children('[data-submenu]:visible').length) {                                   // 2762
                  // if previous element has open sub menu                                                             //
                  $prevElement = $prevElement.find('li:last-child').find('a').first();                                 // 2764
                }                                                                                                      // 2765
                if ($(this).is(':last-child')) {                                                                       // 2766
                  // is last element of sub menu                                                                       //
                  $nextElement = $element.parents('li').first().next('li').find('a').first();                          // 2768
                }                                                                                                      // 2769
                                                                                                                       //
                return;                                                                                                // 2771
              }                                                                                                        // 2772
            });                                                                                                        // 2773
            Foundation.Keyboard.handleKey(e, 'AccordionMenu', {                                                        // 2774
              open: function () {                                                                                      // 2775
                function open() {                                                                                      // 2775
                  if ($target.is(':hidden')) {                                                                         // 2776
                    _this.down($target);                                                                               // 2777
                    $target.find('li').first().find('a').first().focus();                                              // 2778
                  }                                                                                                    // 2779
                }                                                                                                      // 2780
                                                                                                                       //
                return open;                                                                                           // 2775
              }(),                                                                                                     // 2775
              close: function () {                                                                                     // 2781
                function close() {                                                                                     // 2781
                  if ($target.length && !$target.is(':hidden')) {                                                      // 2782
                    // close active sub of this item                                                                   //
                    _this.up($target);                                                                                 // 2784
                  } else if ($element.parent('[data-submenu]').length) {                                               // 2785
                    // close currently open sub                                                                        //
                    _this.up($element.parent('[data-submenu]'));                                                       // 2787
                    $element.parents('li').first().find('a').first().focus();                                          // 2788
                  }                                                                                                    // 2789
                }                                                                                                      // 2790
                                                                                                                       //
                return close;                                                                                          // 2781
              }(),                                                                                                     // 2781
              up: function () {                                                                                        // 2791
                function up() {                                                                                        // 2791
                  $prevElement.attr('tabindex', -1).focus();                                                           // 2792
                  return true;                                                                                         // 2793
                }                                                                                                      // 2794
                                                                                                                       //
                return up;                                                                                             // 2791
              }(),                                                                                                     // 2791
              down: function () {                                                                                      // 2795
                function down() {                                                                                      // 2795
                  $nextElement.attr('tabindex', -1).focus();                                                           // 2796
                  return true;                                                                                         // 2797
                }                                                                                                      // 2798
                                                                                                                       //
                return down;                                                                                           // 2795
              }(),                                                                                                     // 2795
              toggle: function () {                                                                                    // 2799
                function toggle() {                                                                                    // 2799
                  if ($element.children('[data-submenu]').length) {                                                    // 2800
                    _this.toggle($element.children('[data-submenu]'));                                                 // 2801
                  }                                                                                                    // 2802
                }                                                                                                      // 2803
                                                                                                                       //
                return toggle;                                                                                         // 2799
              }(),                                                                                                     // 2799
              closeAll: function () {                                                                                  // 2804
                function closeAll() {                                                                                  // 2804
                  _this.hideAll();                                                                                     // 2805
                }                                                                                                      // 2806
                                                                                                                       //
                return closeAll;                                                                                       // 2804
              }(),                                                                                                     // 2804
              handled: function () {                                                                                   // 2807
                function handled(preventDefault) {                                                                     // 2807
                  if (preventDefault) {                                                                                // 2808
                    e.preventDefault();                                                                                // 2809
                  }                                                                                                    // 2810
                  e.stopImmediatePropagation();                                                                        // 2811
                }                                                                                                      // 2812
                                                                                                                       //
                return handled;                                                                                        // 2807
              }()                                                                                                      // 2807
            });                                                                                                        // 2774
          }); //.attr('tabindex', 0);                                                                                  // 2814
        }                                                                                                              // 2815
                                                                                                                       //
        return _events;                                                                                                // 2730
      }()                                                                                                              // 2730
                                                                                                                       //
      /**                                                                                                              //
       * Closes all panes of the menu.                                                                                 //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2728
      key: 'hideAll',                                                                                                  // 2823
      value: function () {                                                                                             // 2824
        function hideAll() {                                                                                           // 2824
          this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);                                       // 2825
        }                                                                                                              // 2826
                                                                                                                       //
        return hideAll;                                                                                                // 2824
      }()                                                                                                              // 2824
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the open/close state of a submenu.                                                                    //
       * @function                                                                                                     //
       * @param {jQuery} $target - the submenu to toggle                                                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2822
      key: 'toggle',                                                                                                   // 2835
      value: function () {                                                                                             // 2836
        function toggle($target) {                                                                                     // 2836
          if (!$target.is(':animated')) {                                                                              // 2837
            if (!$target.is(':hidden')) {                                                                              // 2838
              this.up($target);                                                                                        // 2839
            } else {                                                                                                   // 2840
              this.down($target);                                                                                      // 2841
            }                                                                                                          // 2842
          }                                                                                                            // 2843
        }                                                                                                              // 2844
                                                                                                                       //
        return toggle;                                                                                                 // 2836
      }()                                                                                                              // 2836
                                                                                                                       //
      /**                                                                                                              //
       * Opens the sub-menu defined by `$target`.                                                                      //
       * @param {jQuery} $target - Sub-menu to open.                                                                   //
       * @fires AccordionMenu#down                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2834
      key: 'down',                                                                                                     // 2853
      value: function () {                                                                                             // 2854
        function down($target) {                                                                                       // 2854
          var _this = this;                                                                                            // 2855
                                                                                                                       //
          if (!this.options.multiOpen) {                                                                               // 2857
            this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));           // 2858
          }                                                                                                            // 2859
                                                                                                                       //
          $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });
                                                                                                                       //
          //Foundation.Move(this.options.slideSpeed, $target, function() {                                             //
          $target.slideDown(_this.options.slideSpeed, function () {                                                    // 2864
            /**                                                                                                        //
             * Fires when the menu is done opening.                                                                    //
             * @event AccordionMenu#down                                                                               //
             */                                                                                                        //
            _this.$element.trigger('down.zf.accordionMenu', [$target]);                                                // 2869
          });                                                                                                          // 2870
          //});                                                                                                        //
        }                                                                                                              // 2872
                                                                                                                       //
        return down;                                                                                                   // 2854
      }()                                                                                                              // 2854
                                                                                                                       //
      /**                                                                                                              //
       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.             //
       * @param {jQuery} $target - Sub-menu to close.                                                                  //
       * @fires AccordionMenu#up                                                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2852
      key: 'up',                                                                                                       // 2881
      value: function () {                                                                                             // 2882
        function up($target) {                                                                                         // 2882
          var _this = this;                                                                                            // 2883
          //Foundation.Move(this.options.slideSpeed, $target, function(){                                              //
          $target.slideUp(_this.options.slideSpeed, function () {                                                      // 2885
            /**                                                                                                        //
             * Fires when the menu is done collapsing up.                                                              //
             * @event AccordionMenu#up                                                                                 //
             */                                                                                                        //
            _this.$element.trigger('up.zf.accordionMenu', [$target]);                                                  // 2890
          });                                                                                                          // 2891
          //});                                                                                                        //
                                                                                                                       //
          var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);                  // 2894
                                                                                                                       //
          $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);                                  // 2896
        }                                                                                                              // 2897
                                                                                                                       //
        return up;                                                                                                     // 2882
      }()                                                                                                              // 2882
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of accordion menu.                                                                       //
       * @fires AccordionMenu#destroyed                                                                                //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2880
      key: 'destroy',                                                                                                  // 2905
      value: function () {                                                                                             // 2906
        function destroy() {                                                                                           // 2906
          this.$element.find('[data-submenu]').slideDown(0).css('display', '');                                        // 2907
          this.$element.find('a').off('click.zf.accordionMenu');                                                       // 2908
                                                                                                                       //
          Foundation.Nest.Burn(this.$element, 'accordion');                                                            // 2910
          Foundation.unregisterPlugin(this);                                                                           // 2911
        }                                                                                                              // 2912
                                                                                                                       //
        return destroy;                                                                                                // 2906
      }()                                                                                                              // 2906
    }]);                                                                                                               // 2904
                                                                                                                       //
    return AccordionMenu;                                                                                              // 2915
  }();                                                                                                                 // 2916
                                                                                                                       //
  AccordionMenu.defaults = {                                                                                           // 2918
    /**                                                                                                                //
     * Amount of time to animate the opening of a submenu in ms.                                                       //
     * @option                                                                                                         //
     * @example 250                                                                                                    //
     */                                                                                                                //
    slideSpeed: 250,                                                                                                   // 2924
    /**                                                                                                                //
     * Allow the menu to have multiple open panes.                                                                     //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    multiOpen: true                                                                                                    // 2930
  };                                                                                                                   // 2918
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(AccordionMenu, 'AccordionMenu');                                                                   // 2934
}(jQuery);                                                                                                             // 2935
'use strict';                                                                                                          // 2936
                                                                                                                       //
var _createClass = function () {                                                                                       // 2938
  function defineProperties(target, props) {                                                                           // 2938
    for (var i = 0; i < props.length; i++) {                                                                           // 2938
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 2938
  }return function (Constructor, protoProps, staticProps) {                                                            // 2938
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 2938
}();                                                                                                                   // 2938
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 2940
  if (!(instance instanceof Constructor)) {                                                                            // 2940
    throw new TypeError("Cannot call a class as a function");                                                          // 2940
  }                                                                                                                    // 2940
}                                                                                                                      // 2940
                                                                                                                       //
!function ($) {                                                                                                        // 2942
                                                                                                                       //
  /**                                                                                                                  //
   * Drilldown module.                                                                                                 //
   * @module foundation.drilldown                                                                                      //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.nest                                                                                    //
   */                                                                                                                  //
                                                                                                                       //
  var Drilldown = function () {                                                                                        // 2952
    /**                                                                                                                //
     * Creates a new instance of a drilldown menu.                                                                     //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to make into an accordion menu.                                         //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Drilldown(element, options) {                                                                             // 2960
      _classCallCheck(this, Drilldown);                                                                                // 2961
                                                                                                                       //
      this.$element = element;                                                                                         // 2963
      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);                                  // 2964
                                                                                                                       //
      Foundation.Nest.Feather(this.$element, 'drilldown');                                                             // 2966
                                                                                                                       //
      this._init();                                                                                                    // 2968
                                                                                                                       //
      Foundation.registerPlugin(this, 'Drilldown');                                                                    // 2970
      Foundation.Keyboard.register('Drilldown', {                                                                      // 2971
        'ENTER': 'open',                                                                                               // 2972
        'SPACE': 'open',                                                                                               // 2973
        'ARROW_RIGHT': 'next',                                                                                         // 2974
        'ARROW_UP': 'up',                                                                                              // 2975
        'ARROW_DOWN': 'down',                                                                                          // 2976
        'ARROW_LEFT': 'previous',                                                                                      // 2977
        'ESCAPE': 'close',                                                                                             // 2978
        'TAB': 'down',                                                                                                 // 2979
        'SHIFT_TAB': 'up'                                                                                              // 2980
      });                                                                                                              // 2971
    }                                                                                                                  // 2982
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the drilldown by creating jQuery collections of elements                                            //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Drilldown, [{                                                                                         // 2990
      key: '_init',                                                                                                    // 2991
      value: function () {                                                                                             // 2992
        function _init() {                                                                                             // 2992
          this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');                   // 2993
          this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');                               // 2994
          this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');     // 2995
                                                                                                                       //
          this._prepareMenu();                                                                                         // 2997
                                                                                                                       //
          this._keyboardEvents();                                                                                      // 2999
        }                                                                                                              // 3000
                                                                                                                       //
        return _init;                                                                                                  // 2992
      }()                                                                                                              // 2992
                                                                                                                       //
      /**                                                                                                              //
       * prepares drilldown menu by setting attributes to links and elements                                           //
       * sets a min height to prevent content jumping                                                                  //
       * wraps the element if not already wrapped                                                                      //
       * @private                                                                                                      //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 2990
      key: '_prepareMenu',                                                                                             // 3011
      value: function () {                                                                                             // 3012
        function _prepareMenu() {                                                                                      // 3012
          var _this = this;                                                                                            // 3013
          // if(!this.options.holdOpen){                                                                               //
          //   this._menuLinkEvents();                                                                                 //
          // }                                                                                                         //
          this.$submenuAnchors.each(function () {                                                                      // 3017
            var $link = $(this);                                                                                       // 3018
            var $sub = $link.parent();                                                                                 // 3019
            if (_this.options.parentLink) {                                                                            // 3020
              $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
            }                                                                                                          // 3022
            $link.data('savedHref', $link.attr('href')).removeAttr('href');                                            // 3023
            $link.children('[data-submenu]').attr({                                                                    // 3024
              'aria-hidden': true,                                                                                     // 3025
              'tabindex': 0,                                                                                           // 3026
              'role': 'menu'                                                                                           // 3027
            });                                                                                                        // 3024
            _this._events($link);                                                                                      // 3029
          });                                                                                                          // 3030
          this.$submenus.each(function () {                                                                            // 3031
            var $menu = $(this),                                                                                       // 3032
                $back = $menu.find('.js-drilldown-back');                                                              // 3032
            if (!$back.length) {                                                                                       // 3034
              $menu.prepend(_this.options.backButton);                                                                 // 3035
            }                                                                                                          // 3036
            _this._back($menu);                                                                                        // 3037
          });                                                                                                          // 3038
          if (!this.$element.parent().hasClass('is-drilldown')) {                                                      // 3039
            this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');                                          // 3040
            this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());                        // 3041
          }                                                                                                            // 3042
        }                                                                                                              // 3043
                                                                                                                       //
        return _prepareMenu;                                                                                           // 3012
      }()                                                                                                              // 3012
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers to elements in the menu.                                                                  //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $elem - the current menu item to add handlers to.                                             //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3010
      key: '_events',                                                                                                  // 3053
      value: function () {                                                                                             // 3054
        function _events($elem) {                                                                                      // 3054
          var _this = this;                                                                                            // 3055
                                                                                                                       //
          $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {                                      // 3057
            if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {                        // 3058
              e.stopImmediatePropagation();                                                                            // 3059
              e.preventDefault();                                                                                      // 3060
            }                                                                                                          // 3061
                                                                                                                       //
            // if(e.target !== e.currentTarget.firstElementChild){                                                     //
            //   return false;                                                                                         //
            // }                                                                                                       //
            _this._show($elem.parent('li'));                                                                           // 3066
                                                                                                                       //
            if (_this.options.closeOnClick) {                                                                          // 3068
              var $body = $('body');                                                                                   // 3069
              $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {                                       // 3070
                if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {                       // 3071
                  return;                                                                                              // 3072
                }                                                                                                      // 3073
                e.preventDefault();                                                                                    // 3074
                _this._hideAll();                                                                                      // 3075
                $body.off('.zf.drilldown');                                                                            // 3076
              });                                                                                                      // 3077
            }                                                                                                          // 3078
          });                                                                                                          // 3079
        }                                                                                                              // 3080
                                                                                                                       //
        return _events;                                                                                                // 3054
      }()                                                                                                              // 3054
                                                                                                                       //
      /**                                                                                                              //
       * Adds keydown event listener to `li`'s in the menu.                                                            //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3052
      key: '_keyboardEvents',                                                                                          // 3088
      value: function () {                                                                                             // 3089
        function _keyboardEvents() {                                                                                   // 3089
          var _this = this;                                                                                            // 3090
                                                                                                                       //
          this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown', function (e) {  // 3092
                                                                                                                       //
            var $element = $(this),                                                                                    // 3094
                $elements = $element.parent('li').parent('ul').children('li').children('a'),                           // 3094
                $prevElement,                                                                                          // 3094
                $nextElement;                                                                                          // 3094
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 3099
              if ($(this).is($element)) {                                                                              // 3100
                $prevElement = $elements.eq(Math.max(0, i - 1));                                                       // 3101
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));                                    // 3102
                return;                                                                                                // 3103
              }                                                                                                        // 3104
            });                                                                                                        // 3105
                                                                                                                       //
            Foundation.Keyboard.handleKey(e, 'Drilldown', {                                                            // 3107
              next: function () {                                                                                      // 3108
                function next() {                                                                                      // 3108
                  if ($element.is(_this.$submenuAnchors)) {                                                            // 3109
                    _this._show($element.parent('li'));                                                                // 3110
                    $element.parent('li').one(Foundation.transitionend($element), function () {                        // 3111
                      $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();                  // 3112
                    });                                                                                                // 3113
                    return true;                                                                                       // 3114
                  }                                                                                                    // 3115
                }                                                                                                      // 3116
                                                                                                                       //
                return next;                                                                                           // 3108
              }(),                                                                                                     // 3108
              previous: function () {                                                                                  // 3117
                function previous() {                                                                                  // 3117
                  _this._hide($element.parent('li').parent('ul'));                                                     // 3118
                  $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {             // 3119
                    setTimeout(function () {                                                                           // 3120
                      $element.parent('li').parent('ul').parent('li').children('a').first().focus();                   // 3121
                    }, 1);                                                                                             // 3122
                  });                                                                                                  // 3123
                  return true;                                                                                         // 3124
                }                                                                                                      // 3125
                                                                                                                       //
                return previous;                                                                                       // 3117
              }(),                                                                                                     // 3117
              up: function () {                                                                                        // 3126
                function up() {                                                                                        // 3126
                  $prevElement.focus();                                                                                // 3127
                  return true;                                                                                         // 3128
                }                                                                                                      // 3129
                                                                                                                       //
                return up;                                                                                             // 3126
              }(),                                                                                                     // 3126
              down: function () {                                                                                      // 3130
                function down() {                                                                                      // 3130
                  $nextElement.focus();                                                                                // 3131
                  return true;                                                                                         // 3132
                }                                                                                                      // 3133
                                                                                                                       //
                return down;                                                                                           // 3130
              }(),                                                                                                     // 3130
              close: function () {                                                                                     // 3134
                function close() {                                                                                     // 3134
                  _this._back();                                                                                       // 3135
                  //_this.$menuItems.first().focus(); // focus to first element                                        //
                }                                                                                                      // 3137
                                                                                                                       //
                return close;                                                                                          // 3134
              }(),                                                                                                     // 3134
              open: function () {                                                                                      // 3138
                function open() {                                                                                      // 3138
                  if (!$element.is(_this.$menuItems)) {                                                                // 3139
                    // not menu item means back button                                                                 //
                    _this._hide($element.parent('li').parent('ul'));                                                   // 3141
                    $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {           // 3142
                      setTimeout(function () {                                                                         // 3143
                        $element.parent('li').parent('ul').parent('li').children('a').first().focus();                 // 3144
                      }, 1);                                                                                           // 3145
                    });                                                                                                // 3146
                  } else if ($element.is(_this.$submenuAnchors)) {                                                     // 3147
                    _this._show($element.parent('li'));                                                                // 3148
                    $element.parent('li').one(Foundation.transitionend($element), function () {                        // 3149
                      $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();                  // 3150
                    });                                                                                                // 3151
                  }                                                                                                    // 3152
                  return true;                                                                                         // 3153
                }                                                                                                      // 3154
                                                                                                                       //
                return open;                                                                                           // 3138
              }(),                                                                                                     // 3138
              handled: function () {                                                                                   // 3155
                function handled(preventDefault) {                                                                     // 3155
                  if (preventDefault) {                                                                                // 3156
                    e.preventDefault();                                                                                // 3157
                  }                                                                                                    // 3158
                  e.stopImmediatePropagation();                                                                        // 3159
                }                                                                                                      // 3160
                                                                                                                       //
                return handled;                                                                                        // 3155
              }()                                                                                                      // 3155
            });                                                                                                        // 3107
          }); // end keyboardAccess                                                                                    // 3162
        }                                                                                                              // 3163
                                                                                                                       //
        return _keyboardEvents;                                                                                        // 3089
      }()                                                                                                              // 3089
                                                                                                                       //
      /**                                                                                                              //
       * Closes all open elements, and returns to root menu.                                                           //
       * @function                                                                                                     //
       * @fires Drilldown#closed                                                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3087
      key: '_hideAll',                                                                                                 // 3172
      value: function () {                                                                                             // 3173
        function _hideAll() {                                                                                          // 3173
          var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');                    // 3174
          $elem.one(Foundation.transitionend($elem), function (e) {                                                    // 3175
            $elem.removeClass('is-active is-closing');                                                                 // 3176
          });                                                                                                          // 3177
          /**                                                                                                          //
           * Fires when the menu is fully closed.                                                                      //
           * @event Drilldown#closed                                                                                   //
           */                                                                                                          //
          this.$element.trigger('closed.zf.drilldown');                                                                // 3182
        }                                                                                                              // 3183
                                                                                                                       //
        return _hideAll;                                                                                               // 3173
      }()                                                                                                              // 3173
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listener for each `back` button, and closes open menus.                                            //
       * @function                                                                                                     //
       * @fires Drilldown#back                                                                                         //
       * @param {jQuery} $elem - the current sub-menu to add `back` event.                                             //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3171
      key: '_back',                                                                                                    // 3193
      value: function () {                                                                                             // 3194
        function _back($elem) {                                                                                        // 3194
          var _this = this;                                                                                            // 3195
          $elem.off('click.zf.drilldown');                                                                             // 3196
          $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {                                 // 3197
            e.stopImmediatePropagation();                                                                              // 3198
            // console.log('mouseup on back');                                                                         //
            _this._hide($elem);                                                                                        // 3200
          });                                                                                                          // 3201
        }                                                                                                              // 3202
                                                                                                                       //
        return _back;                                                                                                  // 3194
      }()                                                                                                              // 3194
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listener to menu items w/o submenus to close open menus on click.                                  //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3192
      key: '_menuLinkEvents',                                                                                          // 3211
      value: function () {                                                                                             // 3212
        function _menuLinkEvents() {                                                                                   // 3212
          var _this = this;                                                                                            // 3213
          this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
            // e.stopImmediatePropagation();                                                                           //
            setTimeout(function () {                                                                                   // 3216
              _this._hideAll();                                                                                        // 3217
            }, 0);                                                                                                     // 3218
          });                                                                                                          // 3219
        }                                                                                                              // 3220
                                                                                                                       //
        return _menuLinkEvents;                                                                                        // 3212
      }()                                                                                                              // 3212
                                                                                                                       //
      /**                                                                                                              //
       * Opens a submenu.                                                                                              //
       * @function                                                                                                     //
       * @fires Drilldown#open                                                                                         //
       * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.                        //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3210
      key: '_show',                                                                                                    // 3230
      value: function () {                                                                                             // 3231
        function _show($elem) {                                                                                        // 3231
          $elem.children('[data-submenu]').addClass('is-active');                                                      // 3232
          /**                                                                                                          //
           * Fires when the submenu has opened.                                                                        //
           * @event Drilldown#open                                                                                     //
           */                                                                                                          //
          this.$element.trigger('open.zf.drilldown', [$elem]);                                                         // 3237
        }                                                                                                              // 3238
                                                                                                                       //
        return _show;                                                                                                  // 3231
      }()                                                                                                              // 3231
    }, {                                                                                                               // 3229
      key: '_hide',                                                                                                    // 3240
                                                                                                                       //
      /**                                                                                                              //
       * Hides a submenu                                                                                               //
       * @function                                                                                                     //
       * @fires Drilldown#hide                                                                                         //
       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.                                      //
       */                                                                                                              //
      value: function () {                                                                                             // 3249
        function _hide($elem) {                                                                                        // 3249
          var _this = this;                                                                                            // 3250
          $elem.addClass('is-closing').one(Foundation.transitionend($elem), function () {                              // 3251
            $elem.removeClass('is-active is-closing');                                                                 // 3252
            $elem.blur();                                                                                              // 3253
          });                                                                                                          // 3254
          /**                                                                                                          //
           * Fires when the submenu has closed.                                                                        //
           * @event Drilldown#hide                                                                                     //
           */                                                                                                          //
          $elem.trigger('hide.zf.drilldown', [$elem]);                                                                 // 3259
        }                                                                                                              // 3260
                                                                                                                       //
        return _hide;                                                                                                  // 3249
      }()                                                                                                              // 3249
                                                                                                                       //
      /**                                                                                                              //
       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.                    //
       * Prevents content jumping.                                                                                     //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3239
      key: '_getMaxDims',                                                                                              // 3270
      value: function () {                                                                                             // 3271
        function _getMaxDims() {                                                                                       // 3271
          var max = 0,                                                                                                 // 3272
              result = {};                                                                                             // 3272
          this.$submenus.add(this.$element).each(function () {                                                         // 3274
            var numOfElems = $(this).children('li').length;                                                            // 3275
            max = numOfElems > max ? numOfElems : max;                                                                 // 3276
          });                                                                                                          // 3277
                                                                                                                       //
          result['min-height'] = max * this.$menuItems[0].getBoundingClientRect().height + 'px';                       // 3279
          result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';                                 // 3280
                                                                                                                       //
          return result;                                                                                               // 3282
        }                                                                                                              // 3283
                                                                                                                       //
        return _getMaxDims;                                                                                            // 3271
      }()                                                                                                              // 3271
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the Drilldown Menu                                                                                   //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3269
      key: 'destroy',                                                                                                  // 3291
      value: function () {                                                                                             // 3292
        function destroy() {                                                                                           // 3292
          this._hideAll();                                                                                             // 3293
          Foundation.Nest.Burn(this.$element, 'drilldown');                                                            // 3294
          this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
          this.$submenuAnchors.each(function () {                                                                      // 3296
            $(this).off('.zf.drilldown');                                                                              // 3297
          });                                                                                                          // 3298
          this.$element.find('a').each(function () {                                                                   // 3299
            var $link = $(this);                                                                                       // 3300
            if ($link.data('savedHref')) {                                                                             // 3301
              $link.attr('href', $link.data('savedHref')).removeData('savedHref');                                     // 3302
            } else {                                                                                                   // 3303
              return;                                                                                                  // 3304
            }                                                                                                          // 3305
          });                                                                                                          // 3306
          Foundation.unregisterPlugin(this);                                                                           // 3307
        }                                                                                                              // 3308
                                                                                                                       //
        return destroy;                                                                                                // 3292
      }()                                                                                                              // 3292
    }]);                                                                                                               // 3290
                                                                                                                       //
    return Drilldown;                                                                                                  // 3311
  }();                                                                                                                 // 3312
                                                                                                                       //
  Drilldown.defaults = {                                                                                               // 3314
    /**                                                                                                                //
     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
     * @option                                                                                                         //
     * @example '<\li><\a>Back<\/a><\/li>'                                                                             //
     */                                                                                                                //
    backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',                                         // 3320
    /**                                                                                                                //
     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
     * @option                                                                                                         //
     * @example '<\div class="is-drilldown"><\/div>'                                                                   //
     */                                                                                                                //
    wrapper: '<div></div>',                                                                                            // 3326
    /**                                                                                                                //
     * Adds the parent link to the submenu.                                                                            //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    parentLink: false,                                                                                                 // 3332
    /**                                                                                                                //
     * Allow the menu to return to root list on body click.                                                            //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    closeOnClick: false                                                                                                // 3338
    // holdOpen: false                                                                                                 //
  };                                                                                                                   // 3314
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Drilldown, 'Drilldown');                                                                           // 3343
}(jQuery);                                                                                                             // 3344
'use strict';                                                                                                          // 3345
                                                                                                                       //
var _createClass = function () {                                                                                       // 3347
  function defineProperties(target, props) {                                                                           // 3347
    for (var i = 0; i < props.length; i++) {                                                                           // 3347
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 3347
  }return function (Constructor, protoProps, staticProps) {                                                            // 3347
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 3347
}();                                                                                                                   // 3347
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 3349
  if (!(instance instanceof Constructor)) {                                                                            // 3349
    throw new TypeError("Cannot call a class as a function");                                                          // 3349
  }                                                                                                                    // 3349
}                                                                                                                      // 3349
                                                                                                                       //
!function ($) {                                                                                                        // 3351
                                                                                                                       //
  /**                                                                                                                  //
   * Dropdown module.                                                                                                  //
   * @module foundation.dropdown                                                                                       //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.box                                                                                     //
   * @requires foundation.util.triggers                                                                                //
   */                                                                                                                  //
                                                                                                                       //
  var Dropdown = function () {                                                                                         // 3361
    /**                                                                                                                //
     * Creates a new instance of a dropdown.                                                                           //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to make into a dropdown.                                                //
     *        Object should be of the dropdown panel, rather than its anchor.                                          //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Dropdown(element, options) {                                                                              // 3370
      _classCallCheck(this, Dropdown);                                                                                 // 3371
                                                                                                                       //
      this.$element = element;                                                                                         // 3373
      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);                                   // 3374
      this._init();                                                                                                    // 3375
                                                                                                                       //
      Foundation.registerPlugin(this, 'Dropdown');                                                                     // 3377
      Foundation.Keyboard.register('Dropdown', {                                                                       // 3378
        'ENTER': 'open',                                                                                               // 3379
        'SPACE': 'open',                                                                                               // 3380
        'ESCAPE': 'close',                                                                                             // 3381
        'TAB': 'tab_forward',                                                                                          // 3382
        'SHIFT_TAB': 'tab_backward'                                                                                    // 3383
      });                                                                                                              // 3378
    }                                                                                                                  // 3385
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Dropdown, [{                                                                                          // 3394
      key: '_init',                                                                                                    // 3395
      value: function () {                                                                                             // 3396
        function _init() {                                                                                             // 3396
          var $id = this.$element.attr('id');                                                                          // 3397
                                                                                                                       //
          this.$anchor = $('[data-toggle="' + $id + '"]') || $('[data-open="' + $id + '"]');                           // 3399
          this.$anchor.attr({                                                                                          // 3400
            'aria-controls': $id,                                                                                      // 3401
            'data-is-focus': false,                                                                                    // 3402
            'data-yeti-box': $id,                                                                                      // 3403
            'aria-haspopup': true,                                                                                     // 3404
            'aria-expanded': false                                                                                     // 3405
                                                                                                                       //
          });                                                                                                          // 3400
                                                                                                                       //
          this.options.positionClass = this.getPositionClass();                                                        // 3409
          this.counter = 4;                                                                                            // 3410
          this.usedPositions = [];                                                                                     // 3411
          this.$element.attr({                                                                                         // 3412
            'aria-hidden': 'true',                                                                                     // 3413
            'data-yeti-box': $id,                                                                                      // 3414
            'data-resize': $id,                                                                                        // 3415
            'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')                            // 3416
          });                                                                                                          // 3412
          this._events();                                                                                              // 3418
        }                                                                                                              // 3419
                                                                                                                       //
        return _init;                                                                                                  // 3396
      }()                                                                                                              // 3396
                                                                                                                       //
      /**                                                                                                              //
       * Helper function to determine current orientation of dropdown pane.                                            //
       * @function                                                                                                     //
       * @returns {String} position - string value of a position class.                                                //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3394
      key: 'getPositionClass',                                                                                         // 3428
      value: function () {                                                                                             // 3429
        function getPositionClass() {                                                                                  // 3429
          var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);                         // 3430
          verticalPosition = verticalPosition ? verticalPosition[0] : '';                                              // 3431
          var horizontalPosition = /float-(\S+)\s/.exec(this.$anchor[0].className);                                    // 3432
          horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';                                        // 3433
          var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;          // 3434
          return position;                                                                                             // 3435
        }                                                                                                              // 3436
                                                                                                                       //
        return getPositionClass;                                                                                       // 3429
      }()                                                                                                              // 3429
                                                                                                                       //
      /**                                                                                                              //
       * Adjusts the dropdown panes orientation by adding/removing positioning classes.                                //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {String} position - position class to remove.                                                          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3427
      key: '_reposition',                                                                                              // 3446
      value: function () {                                                                                             // 3447
        function _reposition(position) {                                                                               // 3447
          this.usedPositions.push(position ? position : 'bottom');                                                     // 3448
          //default, try switching to opposite side                                                                    //
          if (!position && this.usedPositions.indexOf('top') < 0) {                                                    // 3450
            this.$element.addClass('top');                                                                             // 3451
          } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {                                 // 3452
            this.$element.removeClass(position);                                                                       // 3453
          } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {                                 // 3454
            this.$element.removeClass(position).addClass('right');                                                     // 3455
          } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {                                 // 3456
            this.$element.removeClass(position).addClass('left');                                                      // 3457
          }                                                                                                            // 3458
                                                                                                                       //
          //if default change didn't work, try bottom or left first                                                    //
          else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {    // 3456
              this.$element.addClass('left');                                                                          // 3462
            } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
              this.$element.removeClass(position).addClass('left');                                                    // 3464
            } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
              this.$element.removeClass(position);                                                                     // 3466
            } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
              this.$element.removeClass(position);                                                                     // 3468
            }                                                                                                          // 3469
            //if nothing cleared, set to bottom                                                                        //
            else {                                                                                                     // 3467
                this.$element.removeClass(position);                                                                   // 3472
              }                                                                                                        // 3473
          this.classChanged = true;                                                                                    // 3474
          this.counter--;                                                                                              // 3475
        }                                                                                                              // 3476
                                                                                                                       //
        return _reposition;                                                                                            // 3447
      }()                                                                                                              // 3447
                                                                                                                       //
      /**                                                                                                              //
       * Sets the position and orientation of the dropdown pane, checks for collisions.                                //
       * Recursively calls itself if a collision is detected, with a new position class.                               //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3445
      key: '_setPosition',                                                                                             // 3486
      value: function () {                                                                                             // 3487
        function _setPosition() {                                                                                      // 3487
          if (this.$anchor.attr('aria-expanded') === 'false') {                                                        // 3488
            return false;                                                                                              // 3489
          }                                                                                                            // 3490
          var position = this.getPositionClass(),                                                                      // 3491
              $eleDims = Foundation.Box.GetDimensions(this.$element),                                                  // 3491
              $anchorDims = Foundation.Box.GetDimensions(this.$anchor),                                                // 3491
              _this = this,                                                                                            // 3491
              direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',                        // 3491
              param = direction === 'top' ? 'height' : 'width',                                                        // 3491
              offset = param === 'height' ? this.options.vOffset : this.options.hOffset;                               // 3491
                                                                                                                       //
          if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {
            this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
              'width': $eleDims.windowDims.width - this.options.hOffset * 2,                                           // 3501
              'height': 'auto'                                                                                         // 3502
            });                                                                                                        // 3500
            this.classChanged = true;                                                                                  // 3504
            return false;                                                                                              // 3505
          }                                                                                                            // 3506
                                                                                                                       //
          this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));
                                                                                                                       //
          while (!Foundation.Box.ImNotTouchingYou(this.$element, false, true) && this.counter) {                       // 3510
            this._reposition(position);                                                                                // 3511
            this._setPosition();                                                                                       // 3512
          }                                                                                                            // 3513
        }                                                                                                              // 3514
                                                                                                                       //
        return _setPosition;                                                                                           // 3487
      }()                                                                                                              // 3487
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listeners to the element utilizing the triggers utility library.                                   //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3485
      key: '_events',                                                                                                  // 3523
      value: function () {                                                                                             // 3524
        function _events() {                                                                                           // 3524
          var _this = this;                                                                                            // 3525
          this.$element.on({                                                                                           // 3526
            'open.zf.trigger': this.open.bind(this),                                                                   // 3527
            'close.zf.trigger': this.close.bind(this),                                                                 // 3528
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 3529
            'resizeme.zf.trigger': this._setPosition.bind(this)                                                        // 3530
          });                                                                                                          // 3526
                                                                                                                       //
          if (this.options.hover) {                                                                                    // 3533
            this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
              clearTimeout(_this.timeout);                                                                             // 3535
              _this.timeout = setTimeout(function () {                                                                 // 3536
                _this.open();                                                                                          // 3537
                _this.$anchor.data('hover', true);                                                                     // 3538
              }, _this.options.hoverDelay);                                                                            // 3539
            }).on('mouseleave.zf.dropdown', function () {                                                              // 3540
              clearTimeout(_this.timeout);                                                                             // 3541
              _this.timeout = setTimeout(function () {                                                                 // 3542
                _this.close();                                                                                         // 3543
                _this.$anchor.data('hover', false);                                                                    // 3544
              }, _this.options.hoverDelay);                                                                            // 3545
            });                                                                                                        // 3546
            if (this.options.hoverPane) {                                                                              // 3547
              this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
                clearTimeout(_this.timeout);                                                                           // 3549
              }).on('mouseleave.zf.dropdown', function () {                                                            // 3550
                clearTimeout(_this.timeout);                                                                           // 3551
                _this.timeout = setTimeout(function () {                                                               // 3552
                  _this.close();                                                                                       // 3553
                  _this.$anchor.data('hover', false);                                                                  // 3554
                }, _this.options.hoverDelay);                                                                          // 3555
              });                                                                                                      // 3556
            }                                                                                                          // 3557
          }                                                                                                            // 3558
          this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {                                     // 3559
                                                                                                                       //
            var $target = $(this),                                                                                     // 3561
                visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);                          // 3561
                                                                                                                       //
            Foundation.Keyboard.handleKey(e, 'Dropdown', {                                                             // 3564
              tab_forward: function () {                                                                               // 3565
                function tab_forward() {                                                                               // 3565
                  if (_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {                             // 3566
                    // left modal downwards, setting focus to first element                                            //
                    if (_this.options.trapFocus) {                                                                     // 3568
                      // if focus shall be trapped                                                                     //
                      visibleFocusableElements.eq(0).focus();                                                          // 3570
                      e.preventDefault();                                                                              // 3571
                    } else {                                                                                           // 3572
                      // if focus is not trapped, close dropdown on focus out                                          //
                      _this.close();                                                                                   // 3574
                    }                                                                                                  // 3575
                  }                                                                                                    // 3576
                }                                                                                                      // 3577
                                                                                                                       //
                return tab_forward;                                                                                    // 3565
              }(),                                                                                                     // 3565
              tab_backward: function () {                                                                              // 3578
                function tab_backward() {                                                                              // 3578
                  if (_this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || _this.$element.is(':focus')) {
                    // left modal upwards, setting focus to last element                                               //
                    if (_this.options.trapFocus) {                                                                     // 3581
                      // if focus shall be trapped                                                                     //
                      visibleFocusableElements.eq(-1).focus();                                                         // 3583
                      e.preventDefault();                                                                              // 3584
                    } else {                                                                                           // 3585
                      // if focus is not trapped, close dropdown on focus out                                          //
                      _this.close();                                                                                   // 3587
                    }                                                                                                  // 3588
                  }                                                                                                    // 3589
                }                                                                                                      // 3590
                                                                                                                       //
                return tab_backward;                                                                                   // 3578
              }(),                                                                                                     // 3578
              open: function () {                                                                                      // 3591
                function open() {                                                                                      // 3591
                  if ($target.is(_this.$anchor)) {                                                                     // 3592
                    _this.open();                                                                                      // 3593
                    _this.$element.attr('tabindex', -1).focus();                                                       // 3594
                    e.preventDefault();                                                                                // 3595
                  }                                                                                                    // 3596
                }                                                                                                      // 3597
                                                                                                                       //
                return open;                                                                                           // 3591
              }(),                                                                                                     // 3591
              close: function () {                                                                                     // 3598
                function close() {                                                                                     // 3598
                  _this.close();                                                                                       // 3599
                  _this.$anchor.focus();                                                                               // 3600
                }                                                                                                      // 3601
                                                                                                                       //
                return close;                                                                                          // 3598
              }()                                                                                                      // 3598
            });                                                                                                        // 3564
          });                                                                                                          // 3603
        }                                                                                                              // 3604
                                                                                                                       //
        return _events;                                                                                                // 3524
      }()                                                                                                              // 3524
                                                                                                                       //
      /**                                                                                                              //
       * Adds an event handler to the body to close any dropdowns on a click.                                          //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3522
      key: '_addBodyHandler',                                                                                          // 3613
      value: function () {                                                                                             // 3614
        function _addBodyHandler() {                                                                                   // 3614
          var $body = $(document.body).not(this.$element),                                                             // 3615
              _this = this;                                                                                            // 3615
          $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {                                        // 3617
            if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {                                   // 3618
              return;                                                                                                  // 3619
            }                                                                                                          // 3620
            if (_this.$element.find(e.target).length) {                                                                // 3621
              return;                                                                                                  // 3622
            }                                                                                                          // 3623
            _this.close();                                                                                             // 3624
            $body.off('click.zf.dropdown');                                                                            // 3625
          });                                                                                                          // 3626
        }                                                                                                              // 3627
                                                                                                                       //
        return _addBodyHandler;                                                                                        // 3614
      }()                                                                                                              // 3614
                                                                                                                       //
      /**                                                                                                              //
       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.                                 //
       * @function                                                                                                     //
       * @fires Dropdown#closeme                                                                                       //
       * @fires Dropdown#show                                                                                          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3612
      key: 'open',                                                                                                     // 3637
      value: function () {                                                                                             // 3638
        function open() {                                                                                              // 3638
          // var _this = this;                                                                                         //
          /**                                                                                                          //
           * Fires to close other open dropdowns                                                                       //
           * @event Dropdown#closeme                                                                                   //
           */                                                                                                          //
          this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));                                      // 3644
          this.$anchor.addClass('hover').attr({ 'aria-expanded': true });                                              // 3645
          // this.$element/*.show()*/;                                                                                 //
          this._setPosition();                                                                                         // 3647
          this.$element.addClass('is-open').attr({ 'aria-hidden': false });                                            // 3648
                                                                                                                       //
          if (this.options.autoFocus) {                                                                                // 3650
            var $focusable = Foundation.Keyboard.findFocusable(this.$element);                                         // 3651
            if ($focusable.length) {                                                                                   // 3652
              $focusable.eq(0).focus();                                                                                // 3653
            }                                                                                                          // 3654
          }                                                                                                            // 3655
                                                                                                                       //
          if (this.options.closeOnClick) {                                                                             // 3657
            this._addBodyHandler();                                                                                    // 3658
          }                                                                                                            // 3659
                                                                                                                       //
          /**                                                                                                          //
           * Fires once the dropdown is visible.                                                                       //
           * @event Dropdown#show                                                                                      //
           */                                                                                                          //
          this.$element.trigger('show.zf.dropdown', [this.$element]);                                                  // 3665
        }                                                                                                              // 3666
                                                                                                                       //
        return open;                                                                                                   // 3638
      }()                                                                                                              // 3638
                                                                                                                       //
      /**                                                                                                              //
       * Closes the open dropdown pane.                                                                                //
       * @function                                                                                                     //
       * @fires Dropdown#hide                                                                                          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3636
      key: 'close',                                                                                                    // 3675
      value: function () {                                                                                             // 3676
        function close() {                                                                                             // 3676
          if (!this.$element.hasClass('is-open')) {                                                                    // 3677
            return false;                                                                                              // 3678
          }                                                                                                            // 3679
          this.$element.removeClass('is-open').attr({ 'aria-hidden': true });                                          // 3680
                                                                                                                       //
          this.$anchor.removeClass('hover').attr('aria-expanded', false);                                              // 3682
                                                                                                                       //
          if (this.classChanged) {                                                                                     // 3684
            var curPositionClass = this.getPositionClass();                                                            // 3685
            if (curPositionClass) {                                                                                    // 3686
              this.$element.removeClass(curPositionClass);                                                             // 3687
            }                                                                                                          // 3688
            this.$element.addClass(this.options.positionClass)                                                         // 3689
            /*.hide()*/.css({ height: '', width: '' });                                                                //
            this.classChanged = false;                                                                                 // 3691
            this.counter = 4;                                                                                          // 3692
            this.usedPositions.length = 0;                                                                             // 3693
          }                                                                                                            // 3694
          this.$element.trigger('hide.zf.dropdown', [this.$element]);                                                  // 3695
        }                                                                                                              // 3696
                                                                                                                       //
        return close;                                                                                                  // 3676
      }()                                                                                                              // 3676
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the dropdown pane's visibility.                                                                       //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3674
      key: 'toggle',                                                                                                   // 3704
      value: function () {                                                                                             // 3705
        function toggle() {                                                                                            // 3705
          if (this.$element.hasClass('is-open')) {                                                                     // 3706
            if (this.$anchor.data('hover')) return;                                                                    // 3707
            this.close();                                                                                              // 3708
          } else {                                                                                                     // 3709
            this.open();                                                                                               // 3710
          }                                                                                                            // 3711
        }                                                                                                              // 3712
                                                                                                                       //
        return toggle;                                                                                                 // 3705
      }()                                                                                                              // 3705
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the dropdown.                                                                                        //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3703
      key: 'destroy',                                                                                                  // 3720
      value: function () {                                                                                             // 3721
        function destroy() {                                                                                           // 3721
          this.$element.off('.zf.trigger').hide();                                                                     // 3722
          this.$anchor.off('.zf.dropdown');                                                                            // 3723
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 3725
        }                                                                                                              // 3726
                                                                                                                       //
        return destroy;                                                                                                // 3721
      }()                                                                                                              // 3721
    }]);                                                                                                               // 3719
                                                                                                                       //
    return Dropdown;                                                                                                   // 3729
  }();                                                                                                                 // 3730
                                                                                                                       //
  Dropdown.defaults = {                                                                                                // 3732
    /**                                                                                                                //
     * Amount of time to delay opening a submenu on hover event.                                                       //
     * @option                                                                                                         //
     * @example 250                                                                                                    //
     */                                                                                                                //
    hoverDelay: 250,                                                                                                   // 3738
    /**                                                                                                                //
     * Allow submenus to open on hover events                                                                          //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    hover: false,                                                                                                      // 3744
    /**                                                                                                                //
     * Don't close dropdown when hovering over dropdown pane                                                           //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    hoverPane: false,                                                                                                  // 3750
    /**                                                                                                                //
     * Number of pixels between the dropdown pane and the triggering element on open.                                  //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    vOffset: 1,                                                                                                        // 3756
    /**                                                                                                                //
     * Number of pixels between the dropdown pane and the triggering element on open.                                  //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    hOffset: 1,                                                                                                        // 3762
    /**                                                                                                                //
     * Class applied to adjust open position. JS will test and fill this in.                                           //
     * @option                                                                                                         //
     * @example 'top'                                                                                                  //
     */                                                                                                                //
    positionClass: '',                                                                                                 // 3768
    /**                                                                                                                //
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.                           //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    trapFocus: false,                                                                                                  // 3774
    /**                                                                                                                //
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.  //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    autoFocus: false,                                                                                                  // 3780
    /**                                                                                                                //
     * Allows a click on the body to close the dropdown.                                                               //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    closeOnClick: false                                                                                                // 3786
  };                                                                                                                   // 3732
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Dropdown, 'Dropdown');                                                                             // 3790
}(jQuery);                                                                                                             // 3791
'use strict';                                                                                                          // 3792
                                                                                                                       //
var _createClass = function () {                                                                                       // 3794
  function defineProperties(target, props) {                                                                           // 3794
    for (var i = 0; i < props.length; i++) {                                                                           // 3794
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 3794
  }return function (Constructor, protoProps, staticProps) {                                                            // 3794
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 3794
}();                                                                                                                   // 3794
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 3796
  if (!(instance instanceof Constructor)) {                                                                            // 3796
    throw new TypeError("Cannot call a class as a function");                                                          // 3796
  }                                                                                                                    // 3796
}                                                                                                                      // 3796
                                                                                                                       //
!function ($) {                                                                                                        // 3798
                                                                                                                       //
  /**                                                                                                                  //
   * DropdownMenu module.                                                                                              //
   * @module foundation.dropdown-menu                                                                                  //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.box                                                                                     //
   * @requires foundation.util.nest                                                                                    //
   */                                                                                                                  //
                                                                                                                       //
  var DropdownMenu = function () {                                                                                     // 3808
    /**                                                                                                                //
     * Creates a new instance of DropdownMenu.                                                                         //
     * @class                                                                                                          //
     * @fires DropdownMenu#init                                                                                        //
     * @param {jQuery} element - jQuery object to make into a dropdown menu.                                           //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function DropdownMenu(element, options) {                                                                          // 3817
      _classCallCheck(this, DropdownMenu);                                                                             // 3818
                                                                                                                       //
      this.$element = element;                                                                                         // 3820
      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);                               // 3821
                                                                                                                       //
      Foundation.Nest.Feather(this.$element, 'dropdown');                                                              // 3823
      this._init();                                                                                                    // 3824
                                                                                                                       //
      Foundation.registerPlugin(this, 'DropdownMenu');                                                                 // 3826
      Foundation.Keyboard.register('DropdownMenu', {                                                                   // 3827
        'ENTER': 'open',                                                                                               // 3828
        'SPACE': 'open',                                                                                               // 3829
        'ARROW_RIGHT': 'next',                                                                                         // 3830
        'ARROW_UP': 'up',                                                                                              // 3831
        'ARROW_DOWN': 'down',                                                                                          // 3832
        'ARROW_LEFT': 'previous',                                                                                      // 3833
        'ESCAPE': 'close'                                                                                              // 3834
      });                                                                                                              // 3827
    }                                                                                                                  // 3836
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the plugin, and calls _prepareMenu                                                                  //
     * @private                                                                                                        //
     * @function                                                                                                       //
     */                                                                                                                //
                                                                                                                       //
    _createClass(DropdownMenu, [{                                                                                      // 3845
      key: '_init',                                                                                                    // 3846
      value: function () {                                                                                             // 3847
        function _init() {                                                                                             // 3847
          var subs = this.$element.find('li.is-dropdown-submenu-parent');                                              // 3848
          this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');
                                                                                                                       //
          this.$menuItems = this.$element.find('[role="menuitem"]');                                                   // 3851
          this.$tabs = this.$element.children('[role="menuitem"]');                                                    // 3852
          this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);                              // 3853
                                                                                                                       //
          if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {
            this.options.alignment = 'right';                                                                          // 3856
            subs.addClass('opens-left');                                                                               // 3857
          } else {                                                                                                     // 3858
            subs.addClass('opens-right');                                                                              // 3859
          }                                                                                                            // 3860
          this.changed = false;                                                                                        // 3861
          this._events();                                                                                              // 3862
        }                                                                                                              // 3863
                                                                                                                       //
        return _init;                                                                                                  // 3847
      }()                                                                                                              // 3847
    }, {                                                                                                               // 3845
      key: '_events',                                                                                                  // 3865
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listeners to elements within the menu                                                              //
       * @private                                                                                                      //
       * @function                                                                                                     //
       */                                                                                                              //
      value: function () {                                                                                             // 3872
        function _events() {                                                                                           // 3872
          var _this = this,                                                                                            // 3873
              hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',                       // 3873
              parClass = 'is-dropdown-submenu-parent';                                                                 // 3873
                                                                                                                       //
          // used for onClick and in the keyboard handlers                                                             //
          var handleClickFn = function () {                                                                            // 3878
            function handleClickFn(e) {                                                                                // 3878
              var $elem = $(e.target).parentsUntil('ul', '.' + parClass),                                              // 3879
                  hasSub = $elem.hasClass(parClass),                                                                   // 3879
                  hasClicked = $elem.attr('data-is-click') === 'true',                                                 // 3879
                  $sub = $elem.children('.is-dropdown-submenu');                                                       // 3879
                                                                                                                       //
              if (hasSub) {                                                                                            // 3884
                if (hasClicked) {                                                                                      // 3885
                  if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
                    return;                                                                                            // 3887
                  } else {                                                                                             // 3888
                    e.stopImmediatePropagation();                                                                      // 3889
                    e.preventDefault();                                                                                // 3890
                    _this._hide($elem);                                                                                // 3891
                  }                                                                                                    // 3892
                } else {                                                                                               // 3893
                  e.preventDefault();                                                                                  // 3894
                  e.stopImmediatePropagation();                                                                        // 3895
                  _this._show($elem.children('.is-dropdown-submenu'));                                                 // 3896
                  $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);           // 3897
                }                                                                                                      // 3898
              } else {                                                                                                 // 3899
                return;                                                                                                // 3900
              }                                                                                                        // 3901
            }                                                                                                          // 3902
                                                                                                                       //
            return handleClickFn;                                                                                      // 3878
          }();                                                                                                         // 3878
                                                                                                                       //
          if (this.options.clickOpen || hasTouch) {                                                                    // 3904
            this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);                     // 3905
          }                                                                                                            // 3906
                                                                                                                       //
          if (!this.options.disableHover) {                                                                            // 3908
            this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {                                            // 3909
              var $elem = $(this),                                                                                     // 3910
                  hasSub = $elem.hasClass(parClass);                                                                   // 3910
                                                                                                                       //
              if (hasSub) {                                                                                            // 3913
                clearTimeout(_this.delay);                                                                             // 3914
                _this.delay = setTimeout(function () {                                                                 // 3915
                  _this._show($elem.children('.is-dropdown-submenu'));                                                 // 3916
                }, _this.options.hoverDelay);                                                                          // 3917
              }                                                                                                        // 3918
            }).on('mouseleave.zf.dropdownmenu', function (e) {                                                         // 3919
              var $elem = $(this),                                                                                     // 3920
                  hasSub = $elem.hasClass(parClass);                                                                   // 3920
              if (hasSub && _this.options.autoclose) {                                                                 // 3922
                if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {                               // 3923
                  return false;                                                                                        // 3924
                }                                                                                                      // 3925
                                                                                                                       //
                clearTimeout(_this.delay);                                                                             // 3927
                _this.delay = setTimeout(function () {                                                                 // 3928
                  _this._hide($elem);                                                                                  // 3929
                }, _this.options.closingTime);                                                                         // 3930
              }                                                                                                        // 3931
            });                                                                                                        // 3932
          }                                                                                                            // 3933
          this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {                                                 // 3934
            var $element = $(e.target).parentsUntil('ul', '[role="menuitem"]'),                                        // 3935
                isTab = _this.$tabs.index($element) > -1,                                                              // 3935
                $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),                               // 3935
                $prevElement,                                                                                          // 3935
                $nextElement;                                                                                          // 3935
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 3941
              if ($(this).is($element)) {                                                                              // 3942
                $prevElement = $elements.eq(i - 1);                                                                    // 3943
                $nextElement = $elements.eq(i + 1);                                                                    // 3944
                return;                                                                                                // 3945
              }                                                                                                        // 3946
            });                                                                                                        // 3947
                                                                                                                       //
            var nextSibling = function () {                                                                            // 3949
              function nextSibling() {                                                                                 // 3949
                if (!$element.is(':last-child')) {                                                                     // 3950
                  $nextElement.children('a:first').focus();                                                            // 3951
                  e.preventDefault();                                                                                  // 3952
                }                                                                                                      // 3953
              }                                                                                                        // 3954
                                                                                                                       //
              return nextSibling;                                                                                      // 3949
            }(),                                                                                                       // 3949
                prevSibling = function () {                                                                            // 3949
              function prevSibling() {                                                                                 // 3955
                $prevElement.children('a:first').focus();                                                              // 3956
                e.preventDefault();                                                                                    // 3957
              }                                                                                                        // 3958
                                                                                                                       //
              return prevSibling;                                                                                      // 3955
            }(),                                                                                                       // 3955
                openSub = function () {                                                                                // 3949
              function openSub() {                                                                                     // 3959
                var $sub = $element.children('ul.is-dropdown-submenu');                                                // 3960
                if ($sub.length) {                                                                                     // 3961
                  _this._show($sub);                                                                                   // 3962
                  $element.find('li > a:first').focus();                                                               // 3963
                  e.preventDefault();                                                                                  // 3964
                } else {                                                                                               // 3965
                  return;                                                                                              // 3966
                }                                                                                                      // 3967
              }                                                                                                        // 3968
                                                                                                                       //
              return openSub;                                                                                          // 3959
            }(),                                                                                                       // 3959
                closeSub = function () {                                                                               // 3949
              function closeSub() {                                                                                    // 3969
                //if ($element.is(':first-child')) {                                                                   //
                var close = $element.parent('ul').parent('li');                                                        // 3971
                close.children('a:first').focus();                                                                     // 3972
                _this._hide(close);                                                                                    // 3973
                e.preventDefault();                                                                                    // 3974
                //}                                                                                                    //
              }                                                                                                        // 3976
                                                                                                                       //
              return closeSub;                                                                                         // 3969
            }();                                                                                                       // 3969
            var functions = {                                                                                          // 3977
              open: openSub,                                                                                           // 3978
              close: function () {                                                                                     // 3979
                function close() {                                                                                     // 3979
                  _this._hide(_this.$element);                                                                         // 3980
                  _this.$menuItems.find('a:first').focus(); // focus to first element                                  // 3981
                  e.preventDefault();                                                                                  // 3982
                }                                                                                                      // 3983
                                                                                                                       //
                return close;                                                                                          // 3979
              }(),                                                                                                     // 3979
              handled: function () {                                                                                   // 3984
                function handled() {                                                                                   // 3984
                  e.stopImmediatePropagation();                                                                        // 3985
                }                                                                                                      // 3986
                                                                                                                       //
                return handled;                                                                                        // 3984
              }()                                                                                                      // 3984
            };                                                                                                         // 3977
                                                                                                                       //
            if (isTab) {                                                                                               // 3989
              if (_this.$element.hasClass(_this.options.verticalClass)) {                                              // 3990
                // vertical menu                                                                                       //
                if (_this.options.alignment === 'left') {                                                              // 3992
                  // left aligned                                                                                      //
                  $.extend(functions, {                                                                                // 3994
                    down: nextSibling,                                                                                 // 3995
                    up: prevSibling,                                                                                   // 3996
                    next: openSub,                                                                                     // 3997
                    previous: closeSub                                                                                 // 3998
                  });                                                                                                  // 3994
                } else {                                                                                               // 4000
                  // right aligned                                                                                     //
                  $.extend(functions, {                                                                                // 4002
                    down: nextSibling,                                                                                 // 4003
                    up: prevSibling,                                                                                   // 4004
                    next: closeSub,                                                                                    // 4005
                    previous: openSub                                                                                  // 4006
                  });                                                                                                  // 4002
                }                                                                                                      // 4008
              } else {                                                                                                 // 4009
                // horizontal menu                                                                                     //
                $.extend(functions, {                                                                                  // 4011
                  next: nextSibling,                                                                                   // 4012
                  previous: prevSibling,                                                                               // 4013
                  down: openSub,                                                                                       // 4014
                  up: closeSub                                                                                         // 4015
                });                                                                                                    // 4011
              }                                                                                                        // 4017
            } else {                                                                                                   // 4018
              // not tabs -> one sub                                                                                   //
              if (_this.options.alignment === 'left') {                                                                // 4020
                // left aligned                                                                                        //
                $.extend(functions, {                                                                                  // 4022
                  next: openSub,                                                                                       // 4023
                  previous: closeSub,                                                                                  // 4024
                  down: nextSibling,                                                                                   // 4025
                  up: prevSibling                                                                                      // 4026
                });                                                                                                    // 4022
              } else {                                                                                                 // 4028
                // right aligned                                                                                       //
                $.extend(functions, {                                                                                  // 4030
                  next: closeSub,                                                                                      // 4031
                  previous: openSub,                                                                                   // 4032
                  down: nextSibling,                                                                                   // 4033
                  up: prevSibling                                                                                      // 4034
                });                                                                                                    // 4030
              }                                                                                                        // 4036
            }                                                                                                          // 4037
            Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);                                               // 4038
          });                                                                                                          // 4039
        }                                                                                                              // 4040
                                                                                                                       //
        return _events;                                                                                                // 3872
      }()                                                                                                              // 3872
                                                                                                                       //
      /**                                                                                                              //
       * Adds an event handler to the body to close any dropdowns on a click.                                          //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 3864
      key: '_addBodyHandler',                                                                                          // 4049
      value: function () {                                                                                             // 4050
        function _addBodyHandler() {                                                                                   // 4050
          var $body = $(document.body),                                                                                // 4051
              _this = this;                                                                                            // 4051
          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
            var $link = _this.$element.find(e.target);                                                                 // 4054
            if ($link.length) {                                                                                        // 4055
              return;                                                                                                  // 4056
            }                                                                                                          // 4057
                                                                                                                       //
            _this._hide();                                                                                             // 4059
            $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');                                             // 4060
          });                                                                                                          // 4061
        }                                                                                                              // 4062
                                                                                                                       //
        return _addBodyHandler;                                                                                        // 4050
      }()                                                                                                              // 4050
                                                                                                                       //
      /**                                                                                                              //
       * Opens a dropdown pane, and checks for collisions first.                                                       //
       * @param {jQuery} $sub - ul element that is a submenu to show                                                   //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @fires DropdownMenu#show                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4048
      key: '_show',                                                                                                    // 4073
      value: function () {                                                                                             // 4074
        function _show($sub) {                                                                                         // 4074
          var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {                                              // 4075
            return $(el).find($sub).length > 0;                                                                        // 4076
          }));                                                                                                         // 4077
          var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');          // 4078
          this._hide($sibs, idx);                                                                                      // 4079
          $sub.css('visibility', 'hidden').addClass('js-dropdown-active').attr({ 'aria-hidden': false }).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({ 'aria-expanded': true });
          var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);                                               // 4081
          if (!clear) {                                                                                                // 4082
            var oldClass = this.options.alignment === 'left' ? '-right' : '-left',                                     // 4083
                $parentLi = $sub.parent('.is-dropdown-submenu-parent');                                                // 4083
            $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);                     // 4085
            clear = Foundation.Box.ImNotTouchingYou($sub, null, true);                                                 // 4086
            if (!clear) {                                                                                              // 4087
              $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');                        // 4088
            }                                                                                                          // 4089
            this.changed = true;                                                                                       // 4090
          }                                                                                                            // 4091
          $sub.css('visibility', '');                                                                                  // 4092
          if (this.options.closeOnClick) {                                                                             // 4093
            this._addBodyHandler();                                                                                    // 4094
          }                                                                                                            // 4095
          /**                                                                                                          //
           * Fires when the new dropdown pane is visible.                                                              //
           * @event DropdownMenu#show                                                                                  //
           */                                                                                                          //
          this.$element.trigger('show.zf.dropdownmenu', [$sub]);                                                       // 4100
        }                                                                                                              // 4101
                                                                                                                       //
        return _show;                                                                                                  // 4074
      }()                                                                                                              // 4074
                                                                                                                       //
      /**                                                                                                              //
       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.             //
       * @function                                                                                                     //
       * @param {jQuery} $elem - element with a submenu to hide                                                        //
       * @param {Number} idx - index of the $tabs collection to hide                                                   //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4072
      key: '_hide',                                                                                                    // 4112
      value: function () {                                                                                             // 4113
        function _hide($elem, idx) {                                                                                   // 4113
          var $toClose;                                                                                                // 4114
          if ($elem && $elem.length) {                                                                                 // 4115
            $toClose = $elem;                                                                                          // 4116
          } else if (idx !== undefined) {                                                                              // 4117
            $toClose = this.$tabs.not(function (i, el) {                                                               // 4118
              return i === idx;                                                                                        // 4119
            });                                                                                                        // 4120
          } else {                                                                                                     // 4121
            $toClose = this.$element;                                                                                  // 4122
          }                                                                                                            // 4123
          var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;             // 4124
                                                                                                                       //
          if (somethingToClose) {                                                                                      // 4126
            $toClose.find('li.is-active').add($toClose).attr({                                                         // 4127
              'aria-expanded': false,                                                                                  // 4128
              'data-is-click': false                                                                                   // 4129
            }).removeClass('is-active');                                                                               // 4127
                                                                                                                       //
            $toClose.find('ul.js-dropdown-active').attr({                                                              // 4132
              'aria-hidden': true                                                                                      // 4133
            }).removeClass('js-dropdown-active');                                                                      // 4132
                                                                                                                       //
            if (this.changed || $toClose.find('opens-inner').length) {                                                 // 4136
              var oldClass = this.options.alignment === 'left' ? 'right' : 'left';                                     // 4137
              $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);
              this.changed = false;                                                                                    // 4139
            }                                                                                                          // 4140
            /**                                                                                                        //
             * Fires when the open menus are closed.                                                                   //
             * @event DropdownMenu#hide                                                                                //
             */                                                                                                        //
            this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);                                                 // 4145
          }                                                                                                            // 4146
        }                                                                                                              // 4147
                                                                                                                       //
        return _hide;                                                                                                  // 4113
      }()                                                                                                              // 4113
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the plugin.                                                                                          //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4111
      key: 'destroy',                                                                                                  // 4155
      value: function () {                                                                                             // 4156
        function destroy() {                                                                                           // 4156
          this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
          $(document.body).off('.zf.dropdownmenu');                                                                    // 4158
          Foundation.Nest.Burn(this.$element, 'dropdown');                                                             // 4159
          Foundation.unregisterPlugin(this);                                                                           // 4160
        }                                                                                                              // 4161
                                                                                                                       //
        return destroy;                                                                                                // 4156
      }()                                                                                                              // 4156
    }]);                                                                                                               // 4154
                                                                                                                       //
    return DropdownMenu;                                                                                               // 4164
  }();                                                                                                                 // 4165
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  DropdownMenu.defaults = {                                                                                            // 4172
    /**                                                                                                                //
     * Disallows hover events from opening submenus                                                                    //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    disableHover: false,                                                                                               // 4178
    /**                                                                                                                //
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.                              //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    autoclose: true,                                                                                                   // 4184
    /**                                                                                                                //
     * Amount of time to delay opening a submenu on hover event.                                                       //
     * @option                                                                                                         //
     * @example 50                                                                                                     //
     */                                                                                                                //
    hoverDelay: 50,                                                                                                    // 4190
    /**                                                                                                                //
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.                //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    clickOpen: false,                                                                                                  // 4196
    /**                                                                                                                //
     * Amount of time to delay closing a submenu on a mouseleave event.                                                //
     * @option                                                                                                         //
     * @example 500                                                                                                    //
     */                                                                                                                //
                                                                                                                       //
    closingTime: 500,                                                                                                  // 4203
    /**                                                                                                                //
     * Position of the menu relative to what direction the submenus should open. Handled by JS.                        //
     * @option                                                                                                         //
     * @example 'left'                                                                                                 //
     */                                                                                                                //
    alignment: 'left',                                                                                                 // 4209
    /**                                                                                                                //
     * Allow clicks on the body to close any open submenus.                                                            //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    closeOnClick: true,                                                                                                // 4215
    /**                                                                                                                //
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option                                                                                                         //
     * @example 'vertical'                                                                                             //
     */                                                                                                                //
    verticalClass: 'vertical',                                                                                         // 4221
    /**                                                                                                                //
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option                                                                                                         //
     * @example 'align-right'                                                                                          //
     */                                                                                                                //
    rightClass: 'align-right',                                                                                         // 4227
    /**                                                                                                                //
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.     //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    forceFollow: true                                                                                                  // 4233
  };                                                                                                                   // 4172
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(DropdownMenu, 'DropdownMenu');                                                                     // 4237
}(jQuery);                                                                                                             // 4238
'use strict';                                                                                                          // 4239
                                                                                                                       //
var _createClass = function () {                                                                                       // 4241
  function defineProperties(target, props) {                                                                           // 4241
    for (var i = 0; i < props.length; i++) {                                                                           // 4241
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 4241
  }return function (Constructor, protoProps, staticProps) {                                                            // 4241
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 4241
}();                                                                                                                   // 4241
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 4243
  if (!(instance instanceof Constructor)) {                                                                            // 4243
    throw new TypeError("Cannot call a class as a function");                                                          // 4243
  }                                                                                                                    // 4243
}                                                                                                                      // 4243
                                                                                                                       //
!function ($) {                                                                                                        // 4245
                                                                                                                       //
  /**                                                                                                                  //
   * Equalizer module.                                                                                                 //
   * @module foundation.equalizer                                                                                      //
   */                                                                                                                  //
                                                                                                                       //
  var Equalizer = function () {                                                                                        // 4252
    /**                                                                                                                //
     * Creates a new instance of Equalizer.                                                                            //
     * @class                                                                                                          //
     * @fires Equalizer#init                                                                                           //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Equalizer(element, options) {                                                                             // 4261
      _classCallCheck(this, Equalizer);                                                                                // 4262
                                                                                                                       //
      this.$element = element;                                                                                         // 4264
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);                                  // 4265
                                                                                                                       //
      this._init();                                                                                                    // 4267
                                                                                                                       //
      Foundation.registerPlugin(this, 'Equalizer');                                                                    // 4269
    }                                                                                                                  // 4270
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.                      //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Equalizer, [{                                                                                         // 4278
      key: '_init',                                                                                                    // 4279
      value: function () {                                                                                             // 4280
        function _init() {                                                                                             // 4280
          var eqId = this.$element.attr('data-equalizer') || '';                                                       // 4281
          var $watched = this.$element.find('[data-equalizer-watch="' + eqId + '"]');                                  // 4282
                                                                                                                       //
          this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');                   // 4284
          this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));                                  // 4285
                                                                                                                       //
          this.hasNested = this.$element.find('[data-equalizer]').length > 0;                                          // 4287
          this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;                    // 4288
          this.isOn = false;                                                                                           // 4289
          this._bindHandler = {                                                                                        // 4290
            onResizeMeBound: this._onResizeMe.bind(this),                                                              // 4291
            onPostEqualizedBound: this._onPostEqualized.bind(this)                                                     // 4292
          };                                                                                                           // 4290
                                                                                                                       //
          var imgs = this.$element.find('img');                                                                        // 4295
          var tooSmall;                                                                                                // 4296
          if (this.options.equalizeOn) {                                                                               // 4297
            tooSmall = this._checkMQ();                                                                                // 4298
            $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));                                           // 4299
          } else {                                                                                                     // 4300
            this._events();                                                                                            // 4301
          }                                                                                                            // 4302
          if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {                                // 4303
            if (imgs.length) {                                                                                         // 4304
              Foundation.onImagesLoaded(imgs, this._reflow.bind(this));                                                // 4305
            } else {                                                                                                   // 4306
              this._reflow();                                                                                          // 4307
            }                                                                                                          // 4308
          }                                                                                                            // 4309
        }                                                                                                              // 4310
                                                                                                                       //
        return _init;                                                                                                  // 4280
      }()                                                                                                              // 4280
                                                                                                                       //
      /**                                                                                                              //
       * Removes event listeners if the breakpoint is too small.                                                       //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4278
      key: '_pauseEvents',                                                                                             // 4318
      value: function () {                                                                                             // 4319
        function _pauseEvents() {                                                                                      // 4319
          this.isOn = false;                                                                                           // 4320
          this.$element.off({                                                                                          // 4321
            '.zf.equalizer': this._bindHandler.onPostEqualizedBound,                                                   // 4322
            'resizeme.zf.trigger': this._bindHandler.onResizeMeBound                                                   // 4323
          });                                                                                                          // 4321
        }                                                                                                              // 4325
                                                                                                                       //
        return _pauseEvents;                                                                                           // 4319
      }()                                                                                                              // 4319
                                                                                                                       //
      /**                                                                                                              //
       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound             //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4317
      key: '_onResizeMe',                                                                                              // 4333
      value: function () {                                                                                             // 4334
        function _onResizeMe(e) {                                                                                      // 4334
          this._reflow();                                                                                              // 4335
        }                                                                                                              // 4336
                                                                                                                       //
        return _onResizeMe;                                                                                            // 4334
      }()                                                                                                              // 4334
                                                                                                                       //
      /**                                                                                                              //
       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4332
      key: '_onPostEqualized',                                                                                         // 4344
      value: function () {                                                                                             // 4345
        function _onPostEqualized(e) {                                                                                 // 4345
          if (e.target !== this.$element[0]) {                                                                         // 4346
            this._reflow();                                                                                            // 4347
          }                                                                                                            // 4348
        }                                                                                                              // 4349
                                                                                                                       //
        return _onPostEqualized;                                                                                       // 4345
      }()                                                                                                              // 4345
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for Equalizer.                                                                             //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4343
      key: '_events',                                                                                                  // 4357
      value: function () {                                                                                             // 4358
        function _events() {                                                                                           // 4358
          var _this = this;                                                                                            // 4359
          this._pauseEvents();                                                                                         // 4360
          if (this.hasNested) {                                                                                        // 4361
            this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);                    // 4362
          } else {                                                                                                     // 4363
            this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);                                // 4364
          }                                                                                                            // 4365
          this.isOn = true;                                                                                            // 4366
        }                                                                                                              // 4367
                                                                                                                       //
        return _events;                                                                                                // 4358
      }()                                                                                                              // 4358
                                                                                                                       //
      /**                                                                                                              //
       * Checks the current breakpoint to the minimum required size.                                                   //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4356
      key: '_checkMQ',                                                                                                 // 4375
      value: function () {                                                                                             // 4376
        function _checkMQ() {                                                                                          // 4376
          var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);                                      // 4377
          if (tooSmall) {                                                                                              // 4378
            if (this.isOn) {                                                                                           // 4379
              this._pauseEvents();                                                                                     // 4380
              this.$watched.css('height', 'auto');                                                                     // 4381
            }                                                                                                          // 4382
          } else {                                                                                                     // 4383
            if (!this.isOn) {                                                                                          // 4384
              this._events();                                                                                          // 4385
            }                                                                                                          // 4386
          }                                                                                                            // 4387
          return tooSmall;                                                                                             // 4388
        }                                                                                                              // 4389
                                                                                                                       //
        return _checkMQ;                                                                                               // 4376
      }()                                                                                                              // 4376
                                                                                                                       //
      /**                                                                                                              //
       * A noop version for the plugin                                                                                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4374
      key: '_killswitch',                                                                                              // 4397
      value: function () {                                                                                             // 4398
        function _killswitch() {                                                                                       // 4398
          return;                                                                                                      // 4399
        }                                                                                                              // 4400
                                                                                                                       //
        return _killswitch;                                                                                            // 4398
      }()                                                                                                              // 4398
                                                                                                                       //
      /**                                                                                                              //
       * Calls necessary functions to update Equalizer upon DOM change                                                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4396
      key: '_reflow',                                                                                                  // 4408
      value: function () {                                                                                             // 4409
        function _reflow() {                                                                                           // 4409
          if (!this.options.equalizeOnStack) {                                                                         // 4410
            if (this._isStacked()) {                                                                                   // 4411
              this.$watched.css('height', 'auto');                                                                     // 4412
              return false;                                                                                            // 4413
            }                                                                                                          // 4414
          }                                                                                                            // 4415
          if (this.options.equalizeByRow) {                                                                            // 4416
            this.getHeightsByRow(this.applyHeightByRow.bind(this));                                                    // 4417
          } else {                                                                                                     // 4418
            this.getHeights(this.applyHeight.bind(this));                                                              // 4419
          }                                                                                                            // 4420
        }                                                                                                              // 4421
                                                                                                                       //
        return _reflow;                                                                                                // 4409
      }()                                                                                                              // 4409
                                                                                                                       //
      /**                                                                                                              //
       * Manually determines if the first 2 elements are *NOT* stacked.                                                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4407
      key: '_isStacked',                                                                                               // 4429
      value: function () {                                                                                             // 4430
        function _isStacked() {                                                                                        // 4430
          return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;        // 4431
        }                                                                                                              // 4432
                                                                                                                       //
        return _isStacked;                                                                                             // 4430
      }()                                                                                                              // 4430
                                                                                                                       //
      /**                                                                                                              //
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array         //
       * @param {Function} cb - A non-optional callback to return the heights array to.                                //
       * @returns {Array} heights - An array of heights of children within Equalizer container                         //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4428
      key: 'getHeights',                                                                                               // 4441
      value: function () {                                                                                             // 4442
        function getHeights(cb) {                                                                                      // 4442
          var heights = [];                                                                                            // 4443
          for (var i = 0, len = this.$watched.length; i < len; i++) {                                                  // 4444
            this.$watched[i].style.height = 'auto';                                                                    // 4445
            heights.push(this.$watched[i].offsetHeight);                                                               // 4446
          }                                                                                                            // 4447
          cb(heights);                                                                                                 // 4448
        }                                                                                                              // 4449
                                                                                                                       //
        return getHeights;                                                                                             // 4442
      }()                                                                                                              // 4442
                                                                                                                       //
      /**                                                                                                              //
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array         //
       * @param {Function} cb - A non-optional callback to return the heights array to.                                //
       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4440
      key: 'getHeightsByRow',                                                                                          // 4458
      value: function () {                                                                                             // 4459
        function getHeightsByRow(cb) {                                                                                 // 4459
          var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,                         // 4460
              groups = [],                                                                                             // 4460
              group = 0;                                                                                               // 4460
          //group by Row                                                                                               //
          groups[group] = [];                                                                                          // 4464
          for (var i = 0, len = this.$watched.length; i < len; i++) {                                                  // 4465
            this.$watched[i].style.height = 'auto';                                                                    // 4466
            //maybe could use this.$watched[i].offsetTop                                                               //
            var elOffsetTop = $(this.$watched[i]).offset().top;                                                        // 4468
            if (elOffsetTop != lastElTopOffset) {                                                                      // 4469
              group++;                                                                                                 // 4470
              groups[group] = [];                                                                                      // 4471
              lastElTopOffset = elOffsetTop;                                                                           // 4472
            }                                                                                                          // 4473
            groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);                                     // 4474
          }                                                                                                            // 4475
                                                                                                                       //
          for (var j = 0, ln = groups.length; j < ln; j++) {                                                           // 4477
            var heights = $(groups[j]).map(function () {                                                               // 4478
              return this[1];                                                                                          // 4479
            }).get();                                                                                                  // 4480
            var max = Math.max.apply(null, heights);                                                                   // 4481
            groups[j].push(max);                                                                                       // 4482
          }                                                                                                            // 4483
          cb(groups);                                                                                                  // 4484
        }                                                                                                              // 4485
                                                                                                                       //
        return getHeightsByRow;                                                                                        // 4459
      }()                                                                                                              // 4459
                                                                                                                       //
      /**                                                                                                              //
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest                     //
       * @param {array} heights - An array of heights of children within Equalizer container                           //
       * @fires Equalizer#preequalized                                                                                 //
       * @fires Equalizer#postequalized                                                                                //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4457
      key: 'applyHeight',                                                                                              // 4495
      value: function () {                                                                                             // 4496
        function applyHeight(heights) {                                                                                // 4496
          var max = Math.max.apply(null, heights);                                                                     // 4497
          /**                                                                                                          //
           * Fires before the heights are applied                                                                      //
           * @event Equalizer#preequalized                                                                             //
           */                                                                                                          //
          this.$element.trigger('preequalized.zf.equalizer');                                                          // 4502
                                                                                                                       //
          this.$watched.css('height', max);                                                                            // 4504
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the heights have been applied                                                                  //
           * @event Equalizer#postequalized                                                                            //
           */                                                                                                          //
          this.$element.trigger('postequalized.zf.equalizer');                                                         // 4510
        }                                                                                                              // 4511
                                                                                                                       //
        return applyHeight;                                                                                            // 4496
      }()                                                                                                              // 4496
                                                                                                                       //
      /**                                                                                                              //
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row              //
       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       * @fires Equalizer#preequalized                                                                                 //
       * @fires Equalizer#preequalizedRow                                                                              //
       * @fires Equalizer#postequalizedRow                                                                             //
       * @fires Equalizer#postequalized                                                                                //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4494
      key: 'applyHeightByRow',                                                                                         // 4523
      value: function () {                                                                                             // 4524
        function applyHeightByRow(groups) {                                                                            // 4524
          /**                                                                                                          //
           * Fires before the heights are applied                                                                      //
           */                                                                                                          //
          this.$element.trigger('preequalized.zf.equalizer');                                                          // 4528
          for (var i = 0, len = groups.length; i < len; i++) {                                                         // 4529
            var groupsILength = groups[i].length,                                                                      // 4530
                max = groups[i][groupsILength - 1];                                                                    // 4530
            if (groupsILength <= 2) {                                                                                  // 4532
              $(groups[i][0][0]).css({ 'height': 'auto' });                                                            // 4533
              continue;                                                                                                // 4534
            }                                                                                                          // 4535
            /**                                                                                                        //
              * Fires before the heights per row are applied                                                           //
              * @event Equalizer#preequalizedRow                                                                       //
              */                                                                                                       //
            this.$element.trigger('preequalizedrow.zf.equalizer');                                                     // 4540
            for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {                                                 // 4541
              $(groups[i][j][0]).css({ 'height': max });                                                               // 4542
            }                                                                                                          // 4543
            /**                                                                                                        //
              * Fires when the heights per row have been applied                                                       //
              * @event Equalizer#postequalizedRow                                                                      //
              */                                                                                                       //
            this.$element.trigger('postequalizedrow.zf.equalizer');                                                    // 4548
          }                                                                                                            // 4549
          /**                                                                                                          //
           * Fires when the heights have been applied                                                                  //
           */                                                                                                          //
          this.$element.trigger('postequalized.zf.equalizer');                                                         // 4553
        }                                                                                                              // 4554
                                                                                                                       //
        return applyHeightByRow;                                                                                       // 4524
      }()                                                                                                              // 4524
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of Equalizer.                                                                            //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4522
      key: 'destroy',                                                                                                  // 4562
      value: function () {                                                                                             // 4563
        function destroy() {                                                                                           // 4563
          this._pauseEvents();                                                                                         // 4564
          this.$watched.css('height', 'auto');                                                                         // 4565
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 4567
        }                                                                                                              // 4568
                                                                                                                       //
        return destroy;                                                                                                // 4563
      }()                                                                                                              // 4563
    }]);                                                                                                               // 4561
                                                                                                                       //
    return Equalizer;                                                                                                  // 4571
  }();                                                                                                                 // 4572
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  Equalizer.defaults = {                                                                                               // 4579
    /**                                                                                                                //
     * Enable height equalization when stacked on smaller screens.                                                     //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    equalizeOnStack: true,                                                                                             // 4585
    /**                                                                                                                //
     * Enable height equalization row by row.                                                                          //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    equalizeByRow: false,                                                                                              // 4591
    /**                                                                                                                //
     * String representing the minimum breakpoint size the plugin should equalize heights on.                          //
     * @option                                                                                                         //
     * @example 'medium'                                                                                               //
     */                                                                                                                //
    equalizeOn: ''                                                                                                     // 4597
  };                                                                                                                   // 4579
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Equalizer, 'Equalizer');                                                                           // 4601
}(jQuery);                                                                                                             // 4602
'use strict';                                                                                                          // 4603
                                                                                                                       //
var _createClass = function () {                                                                                       // 4605
  function defineProperties(target, props) {                                                                           // 4605
    for (var i = 0; i < props.length; i++) {                                                                           // 4605
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 4605
  }return function (Constructor, protoProps, staticProps) {                                                            // 4605
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 4605
}();                                                                                                                   // 4605
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 4607
  if (!(instance instanceof Constructor)) {                                                                            // 4607
    throw new TypeError("Cannot call a class as a function");                                                          // 4607
  }                                                                                                                    // 4607
}                                                                                                                      // 4607
                                                                                                                       //
!function ($) {                                                                                                        // 4609
                                                                                                                       //
  /**                                                                                                                  //
   * Interchange module.                                                                                               //
   * @module foundation.interchange                                                                                    //
   * @requires foundation.util.mediaQuery                                                                              //
   * @requires foundation.util.timerAndImageLoader                                                                     //
   */                                                                                                                  //
                                                                                                                       //
  var Interchange = function () {                                                                                      // 4618
    /**                                                                                                                //
     * Creates a new instance of Interchange.                                                                          //
     * @class                                                                                                          //
     * @fires Interchange#init                                                                                         //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Interchange(element, options) {                                                                           // 4627
      _classCallCheck(this, Interchange);                                                                              // 4628
                                                                                                                       //
      this.$element = element;                                                                                         // 4630
      this.options = $.extend({}, Interchange.defaults, options);                                                      // 4631
      this.rules = [];                                                                                                 // 4632
      this.currentPath = '';                                                                                           // 4633
                                                                                                                       //
      this._init();                                                                                                    // 4635
      this._events();                                                                                                  // 4636
                                                                                                                       //
      Foundation.registerPlugin(this, 'Interchange');                                                                  // 4638
    }                                                                                                                  // 4639
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.                  //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Interchange, [{                                                                                       // 4648
      key: '_init',                                                                                                    // 4649
      value: function () {                                                                                             // 4650
        function _init() {                                                                                             // 4650
          this._addBreakpoints();                                                                                      // 4651
          this._generateRules();                                                                                       // 4652
          this._reflow();                                                                                              // 4653
        }                                                                                                              // 4654
                                                                                                                       //
        return _init;                                                                                                  // 4650
      }()                                                                                                              // 4650
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for Interchange.                                                                           //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4648
      key: '_events',                                                                                                  // 4663
      value: function () {                                                                                             // 4664
        function _events() {                                                                                           // 4664
          $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));                // 4665
        }                                                                                                              // 4666
                                                                                                                       //
        return _events;                                                                                                // 4664
      }()                                                                                                              // 4664
                                                                                                                       //
      /**                                                                                                              //
       * Calls necessary functions to update Interchange upon DOM change                                               //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4662
      key: '_reflow',                                                                                                  // 4675
      value: function () {                                                                                             // 4676
        function _reflow() {                                                                                           // 4676
          var match;                                                                                                   // 4677
                                                                                                                       //
          // Iterate through each rule, but only save the last match                                                   //
          for (var i in meteorBabelHelpers.sanitizeForInObject(this.rules)) {                                          // 4680
            if (this.rules.hasOwnProperty(i)) {                                                                        // 4681
              var rule = this.rules[i];                                                                                // 4682
                                                                                                                       //
              if (window.matchMedia(rule.query).matches) {                                                             // 4684
                match = rule;                                                                                          // 4685
              }                                                                                                        // 4686
            }                                                                                                          // 4687
          }                                                                                                            // 4688
                                                                                                                       //
          if (match) {                                                                                                 // 4690
            this.replace(match.path);                                                                                  // 4691
          }                                                                                                            // 4692
        }                                                                                                              // 4693
                                                                                                                       //
        return _reflow;                                                                                                // 4676
      }()                                                                                                              // 4676
                                                                                                                       //
      /**                                                                                                              //
       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.                      //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4674
      key: '_addBreakpoints',                                                                                          // 4702
      value: function () {                                                                                             // 4703
        function _addBreakpoints() {                                                                                   // 4703
          for (var i in meteorBabelHelpers.sanitizeForInObject(Foundation.MediaQuery.queries)) {                       // 4704
            if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {                                                     // 4705
              var query = Foundation.MediaQuery.queries[i];                                                            // 4706
              Interchange.SPECIAL_QUERIES[query.name] = query.value;                                                   // 4707
            }                                                                                                          // 4708
          }                                                                                                            // 4709
        }                                                                                                              // 4710
                                                                                                                       //
        return _addBreakpoints;                                                                                        // 4703
      }()                                                                                                              // 4703
                                                                                                                       //
      /**                                                                                                              //
       * Checks the Interchange element for the provided media query + content pairings                                //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {Object} element - jQuery object that is an Interchange instance                                       //
       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4701
      key: '_generateRules',                                                                                           // 4721
      value: function () {                                                                                             // 4722
        function _generateRules(element) {                                                                             // 4722
          var rulesList = [];                                                                                          // 4723
          var rules;                                                                                                   // 4724
                                                                                                                       //
          if (this.options.rules) {                                                                                    // 4726
            rules = this.options.rules;                                                                                // 4727
          } else {                                                                                                     // 4728
            rules = this.$element.data('interchange').match(/\[.*?\]/g);                                               // 4729
          }                                                                                                            // 4730
                                                                                                                       //
          for (var i in meteorBabelHelpers.sanitizeForInObject(rules)) {                                               // 4732
            if (rules.hasOwnProperty(i)) {                                                                             // 4733
              var rule = rules[i].slice(1, -1).split(', ');                                                            // 4734
              var path = rule.slice(0, -1).join('');                                                                   // 4735
              var query = rule[rule.length - 1];                                                                       // 4736
                                                                                                                       //
              if (Interchange.SPECIAL_QUERIES[query]) {                                                                // 4738
                query = Interchange.SPECIAL_QUERIES[query];                                                            // 4739
              }                                                                                                        // 4740
                                                                                                                       //
              rulesList.push({                                                                                         // 4742
                path: path,                                                                                            // 4743
                query: query                                                                                           // 4744
              });                                                                                                      // 4742
            }                                                                                                          // 4746
          }                                                                                                            // 4747
                                                                                                                       //
          this.rules = rulesList;                                                                                      // 4749
        }                                                                                                              // 4750
                                                                                                                       //
        return _generateRules;                                                                                         // 4722
      }()                                                                                                              // 4722
                                                                                                                       //
      /**                                                                                                              //
       * Update the `src` property of an image, or change the HTML of a container, to the specified path.              //
       * @function                                                                                                     //
       * @param {String} path - Path to the image or HTML partial.                                                     //
       * @fires Interchange#replaced                                                                                   //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4720
      key: 'replace',                                                                                                  // 4760
      value: function () {                                                                                             // 4761
        function replace(path) {                                                                                       // 4761
          if (this.currentPath === path) return;                                                                       // 4762
                                                                                                                       //
          var _this = this,                                                                                            // 4764
              trigger = 'replaced.zf.interchange';                                                                     // 4764
                                                                                                                       //
          // Replacing images                                                                                          //
          if (this.$element[0].nodeName === 'IMG') {                                                                   // 4768
            this.$element.attr('src', path).load(function () {                                                         // 4769
              _this.currentPath = path;                                                                                // 4770
            }).trigger(trigger);                                                                                       // 4771
          }                                                                                                            // 4772
          // Replacing background images                                                                               //
          else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {                                            // 4768
              this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);                         // 4775
            }                                                                                                          // 4776
            // Replacing HTML                                                                                          //
            else {                                                                                                     // 4774
                $.get(path, function (response) {                                                                      // 4779
                  _this.$element.html(response).trigger(trigger);                                                      // 4780
                  $(response).foundation();                                                                            // 4781
                  _this.currentPath = path;                                                                            // 4782
                });                                                                                                    // 4783
              }                                                                                                        // 4784
                                                                                                                       //
          /**                                                                                                          //
           * Fires when content in an Interchange element is done being loaded.                                        //
           * @event Interchange#replaced                                                                               //
           */                                                                                                          //
          // this.$element.trigger('replaced.zf.interchange');                                                         //
        }                                                                                                              // 4791
                                                                                                                       //
        return replace;                                                                                                // 4761
      }()                                                                                                              // 4761
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of interchange.                                                                          //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4759
      key: 'destroy',                                                                                                  // 4799
      value: function () {                                                                                             // 4800
        function destroy() {                                                                                           // 4800
          //TODO this.                                                                                                 //
        }                                                                                                              // 4802
                                                                                                                       //
        return destroy;                                                                                                // 4800
      }()                                                                                                              // 4800
    }]);                                                                                                               // 4798
                                                                                                                       //
    return Interchange;                                                                                                // 4805
  }();                                                                                                                 // 4806
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  Interchange.defaults = {                                                                                             // 4813
    /**                                                                                                                //
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.                    //
     * @option                                                                                                         //
     */                                                                                                                //
    rules: null                                                                                                        // 4818
  };                                                                                                                   // 4813
                                                                                                                       //
  Interchange.SPECIAL_QUERIES = {                                                                                      // 4821
    'landscape': 'screen and (orientation: landscape)',                                                                // 4822
    'portrait': 'screen and (orientation: portrait)',                                                                  // 4823
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };                                                                                                                   // 4821
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Interchange, 'Interchange');                                                                       // 4828
}(jQuery);                                                                                                             // 4829
'use strict';                                                                                                          // 4830
                                                                                                                       //
var _createClass = function () {                                                                                       // 4832
  function defineProperties(target, props) {                                                                           // 4832
    for (var i = 0; i < props.length; i++) {                                                                           // 4832
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 4832
  }return function (Constructor, protoProps, staticProps) {                                                            // 4832
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 4832
}();                                                                                                                   // 4832
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 4834
  if (!(instance instanceof Constructor)) {                                                                            // 4834
    throw new TypeError("Cannot call a class as a function");                                                          // 4834
  }                                                                                                                    // 4834
}                                                                                                                      // 4834
                                                                                                                       //
!function ($) {                                                                                                        // 4836
                                                                                                                       //
  /**                                                                                                                  //
   * Magellan module.                                                                                                  //
   * @module foundation.magellan                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  var Magellan = function () {                                                                                         // 4843
    /**                                                                                                                //
     * Creates a new instance of Magellan.                                                                             //
     * @class                                                                                                          //
     * @fires Magellan#init                                                                                            //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Magellan(element, options) {                                                                              // 4852
      _classCallCheck(this, Magellan);                                                                                 // 4853
                                                                                                                       //
      this.$element = element;                                                                                         // 4855
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);                                   // 4856
                                                                                                                       //
      this._init();                                                                                                    // 4858
                                                                                                                       //
      Foundation.registerPlugin(this, 'Magellan');                                                                     // 4860
    }                                                                                                                  // 4861
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Magellan, [{                                                                                          // 4869
      key: '_init',                                                                                                    // 4870
      value: function () {                                                                                             // 4871
        function _init() {                                                                                             // 4871
          var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');                                       // 4872
          var _this = this;                                                                                            // 4873
          this.$targets = $('[data-magellan-target]');                                                                 // 4874
          this.$links = this.$element.find('a');                                                                       // 4875
          this.$element.attr({                                                                                         // 4876
            'data-resize': id,                                                                                         // 4877
            'data-scroll': id,                                                                                         // 4878
            'id': id                                                                                                   // 4879
          });                                                                                                          // 4876
          this.$active = $();                                                                                          // 4881
          this.scrollPos = parseInt(window.pageYOffset, 10);                                                           // 4882
                                                                                                                       //
          this._events();                                                                                              // 4884
        }                                                                                                              // 4885
                                                                                                                       //
        return _init;                                                                                                  // 4871
      }()                                                                                                              // 4871
                                                                                                                       //
      /**                                                                                                              //
       * Calculates an array of pixel values that are the demarcation lines between locations on the page.             //
       * Can be invoked if new elements are added or the size of a location changes.                                   //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4869
      key: 'calcPoints',                                                                                               // 4894
      value: function () {                                                                                             // 4895
        function calcPoints() {                                                                                        // 4895
          var _this = this,                                                                                            // 4896
              body = document.body,                                                                                    // 4896
              html = document.documentElement;                                                                         // 4896
                                                                                                                       //
          this.points = [];                                                                                            // 4900
          this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));                                // 4901
          this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));
                                                                                                                       //
          this.$targets.each(function () {                                                                             // 4904
            var $tar = $(this),                                                                                        // 4905
                pt = Math.round($tar.offset().top - _this.options.threshold);                                          // 4905
            $tar.targetPoint = pt;                                                                                     // 4907
            _this.points.push(pt);                                                                                     // 4908
          });                                                                                                          // 4909
        }                                                                                                              // 4910
                                                                                                                       //
        return calcPoints;                                                                                             // 4895
      }()                                                                                                              // 4895
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for Magellan.                                                                              //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4893
      key: '_events',                                                                                                  // 4918
      value: function () {                                                                                             // 4919
        function _events() {                                                                                           // 4919
          var _this = this,                                                                                            // 4920
              $body = $('html, body'),                                                                                 // 4920
              opts = {                                                                                                 // 4920
            duration: _this.options.animationDuration,                                                                 // 4923
            easing: _this.options.animationEasing                                                                      // 4924
          };                                                                                                           // 4922
          $(window).one('load', function () {                                                                          // 4926
            if (_this.options.deepLinking) {                                                                           // 4927
              if (location.hash) {                                                                                     // 4928
                _this.scrollToLoc(location.hash);                                                                      // 4929
              }                                                                                                        // 4930
            }                                                                                                          // 4931
            _this.calcPoints();                                                                                        // 4932
            _this._updateActive();                                                                                     // 4933
          });                                                                                                          // 4934
                                                                                                                       //
          this.$element.on({                                                                                           // 4936
            'resizeme.zf.trigger': this.reflow.bind(this),                                                             // 4937
            'scrollme.zf.trigger': this._updateActive.bind(this)                                                       // 4938
          }).on('click.zf.magellan', 'a[href^="#"]', function (e) {                                                    // 4936
            e.preventDefault();                                                                                        // 4940
            var arrival = this.getAttribute('href');                                                                   // 4941
            _this.scrollToLoc(arrival);                                                                                // 4942
          });                                                                                                          // 4943
        }                                                                                                              // 4944
                                                                                                                       //
        return _events;                                                                                                // 4919
      }()                                                                                                              // 4919
                                                                                                                       //
      /**                                                                                                              //
       * Function to scroll to a given location on the page.                                                           //
       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'                                //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4917
      key: 'scrollToLoc',                                                                                              // 4953
      value: function () {                                                                                             // 4954
        function scrollToLoc(loc) {                                                                                    // 4954
          var scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);       // 4955
                                                                                                                       //
          $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing);
        }                                                                                                              // 4958
                                                                                                                       //
        return scrollToLoc;                                                                                            // 4954
      }()                                                                                                              // 4954
                                                                                                                       //
      /**                                                                                                              //
       * Calls necessary functions to update Magellan upon DOM change                                                  //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4952
      key: 'reflow',                                                                                                   // 4966
      value: function () {                                                                                             // 4967
        function reflow() {                                                                                            // 4967
          this.calcPoints();                                                                                           // 4968
          this._updateActive();                                                                                        // 4969
        }                                                                                                              // 4970
                                                                                                                       //
        return reflow;                                                                                                 // 4967
      }()                                                                                                              // 4967
                                                                                                                       //
      /**                                                                                                              //
       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
       * @private                                                                                                      //
       * @function                                                                                                     //
       * @fires Magellan#update                                                                                        //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4965
      key: '_updateActive',                                                                                            // 4980
      value: function () {                                                                                             // 4981
        function _updateActive() /*evt, elem, scrollPos*/{                                                             // 4981
          var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),                                               // 4982
              curIdx;                                                                                                  // 4982
                                                                                                                       //
          if (winPos + this.winHeight === this.docHeight) {                                                            // 4985
            curIdx = this.points.length - 1;                                                                           // 4986
          } else if (winPos < this.points[0]) {                                                                        // 4987
            curIdx = 0;                                                                                                // 4988
          } else {                                                                                                     // 4989
            var isDown = this.scrollPos < winPos,                                                                      // 4990
                _this = this,                                                                                          // 4990
                curVisible = this.points.filter(function (p, i) {                                                      // 4990
              return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;
            });                                                                                                        // 4994
            curIdx = curVisible.length ? curVisible.length - 1 : 0;                                                    // 4995
          }                                                                                                            // 4996
                                                                                                                       //
          this.$active.removeClass(this.options.activeClass);                                                          // 4998
          this.$active = this.$links.eq(curIdx).addClass(this.options.activeClass);                                    // 4999
                                                                                                                       //
          if (this.options.deepLinking) {                                                                              // 5001
            var hash = this.$active[0].getAttribute('href');                                                           // 5002
            if (window.history.pushState) {                                                                            // 5003
              window.history.pushState(null, null, hash);                                                              // 5004
            } else {                                                                                                   // 5005
              window.location.hash = hash;                                                                             // 5006
            }                                                                                                          // 5007
          }                                                                                                            // 5008
                                                                                                                       //
          this.scrollPos = winPos;                                                                                     // 5010
          /**                                                                                                          //
           * Fires when magellan is finished updating to the new active element.                                       //
           * @event Magellan#update                                                                                    //
           */                                                                                                          //
          this.$element.trigger('update.zf.magellan', [this.$active]);                                                 // 5015
        }                                                                                                              // 5016
                                                                                                                       //
        return _updateActive;                                                                                          // 4981
      }()                                                                                                              // 4981
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of Magellan and resets the url of the window.                                            //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 4979
      key: 'destroy',                                                                                                  // 5024
      value: function () {                                                                                             // 5025
        function destroy() {                                                                                           // 5025
          this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);
                                                                                                                       //
          if (this.options.deepLinking) {                                                                              // 5028
            var hash = this.$active[0].getAttribute('href');                                                           // 5029
            window.location.hash.replace(hash, '');                                                                    // 5030
          }                                                                                                            // 5031
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 5033
        }                                                                                                              // 5034
                                                                                                                       //
        return destroy;                                                                                                // 5025
      }()                                                                                                              // 5025
    }]);                                                                                                               // 5023
                                                                                                                       //
    return Magellan;                                                                                                   // 5037
  }();                                                                                                                 // 5038
                                                                                                                       //
  /**                                                                                                                  //
   * Default settings for plugin                                                                                       //
   */                                                                                                                  //
                                                                                                                       //
  Magellan.defaults = {                                                                                                // 5045
    /**                                                                                                                //
     * Amount of time, in ms, the animated scrolling should take between locations.                                    //
     * @option                                                                                                         //
     * @example 500                                                                                                    //
     */                                                                                                                //
    animationDuration: 500,                                                                                            // 5051
    /**                                                                                                                //
     * Animation style to use when scrolling between locations.                                                        //
     * @option                                                                                                         //
     * @example 'ease-in-out'                                                                                          //
     */                                                                                                                //
    animationEasing: 'linear',                                                                                         // 5057
    /**                                                                                                                //
     * Number of pixels to use as a marker for location changes.                                                       //
     * @option                                                                                                         //
     * @example 50                                                                                                     //
     */                                                                                                                //
    threshold: 50,                                                                                                     // 5063
    /**                                                                                                                //
     * Class applied to the active locations link on the magellan container.                                           //
     * @option                                                                                                         //
     * @example 'active'                                                                                               //
     */                                                                                                                //
    activeClass: 'active',                                                                                             // 5069
    /**                                                                                                                //
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.               //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    deepLinking: false,                                                                                                // 5075
    /**                                                                                                                //
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.                      //
     * @option                                                                                                         //
     * @example 25                                                                                                     //
     */                                                                                                                //
    barOffset: 0                                                                                                       // 5081
  };                                                                                                                   // 5045
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Magellan, 'Magellan');                                                                             // 5085
}(jQuery);                                                                                                             // 5086
'use strict';                                                                                                          // 5087
                                                                                                                       //
var _createClass = function () {                                                                                       // 5089
  function defineProperties(target, props) {                                                                           // 5089
    for (var i = 0; i < props.length; i++) {                                                                           // 5089
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 5089
  }return function (Constructor, protoProps, staticProps) {                                                            // 5089
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 5089
}();                                                                                                                   // 5089
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 5091
  if (!(instance instanceof Constructor)) {                                                                            // 5091
    throw new TypeError("Cannot call a class as a function");                                                          // 5091
  }                                                                                                                    // 5091
}                                                                                                                      // 5091
                                                                                                                       //
!function ($) {                                                                                                        // 5093
                                                                                                                       //
  /**                                                                                                                  //
   * OffCanvas module.                                                                                                 //
   * @module foundation.offcanvas                                                                                      //
   * @requires foundation.util.mediaQuery                                                                              //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.motion                                                                                  //
   */                                                                                                                  //
                                                                                                                       //
  var OffCanvas = function () {                                                                                        // 5103
    /**                                                                                                                //
     * Creates a new instance of an off-canvas wrapper.                                                                //
     * @class                                                                                                          //
     * @fires OffCanvas#init                                                                                           //
     * @param {Object} element - jQuery object to initialize.                                                          //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function OffCanvas(element, options) {                                                                             // 5112
      _classCallCheck(this, OffCanvas);                                                                                // 5113
                                                                                                                       //
      this.$element = element;                                                                                         // 5115
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);                                  // 5116
      this.$lastTrigger = $();                                                                                         // 5117
      this.$triggers = $();                                                                                            // 5118
                                                                                                                       //
      this._init();                                                                                                    // 5120
      this._events();                                                                                                  // 5121
                                                                                                                       //
      Foundation.registerPlugin(this, 'OffCanvas');                                                                    // 5123
    }                                                                                                                  // 5124
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).                                      //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(OffCanvas, [{                                                                                         // 5133
      key: '_init',                                                                                                    // 5134
      value: function () {                                                                                             // 5135
        function _init() {                                                                                             // 5135
          var id = this.$element.attr('id');                                                                           // 5136
                                                                                                                       //
          this.$element.attr('aria-hidden', 'true');                                                                   // 5138
                                                                                                                       //
          // Find triggers that affect this element and add aria-expanded to them                                      //
          this.$triggers = $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);
                                                                                                                       //
          // Add a close trigger over the body if necessary                                                            //
          if (this.options.closeOnClick) {                                                                             // 5144
            if ($('.js-off-canvas-exit').length) {                                                                     // 5145
              this.$exiter = $('.js-off-canvas-exit');                                                                 // 5146
            } else {                                                                                                   // 5147
              var exiter = document.createElement('div');                                                              // 5148
              exiter.setAttribute('class', 'js-off-canvas-exit');                                                      // 5149
              $('[data-off-canvas-content]').append(exiter);                                                           // 5150
                                                                                                                       //
              this.$exiter = $(exiter);                                                                                // 5152
            }                                                                                                          // 5153
          }                                                                                                            // 5154
                                                                                                                       //
          this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);
                                                                                                                       //
          if (this.options.isRevealed) {                                                                               // 5158
            this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
            this._setMQChecker();                                                                                      // 5160
          }                                                                                                            // 5161
          if (!this.options.transitionTime) {                                                                          // 5162
            this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;
          }                                                                                                            // 5164
        }                                                                                                              // 5165
                                                                                                                       //
        return _init;                                                                                                  // 5135
      }()                                                                                                              // 5135
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers to the off-canvas wrapper and the exit overlay.                                           //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5133
      key: '_events',                                                                                                  // 5174
      value: function () {                                                                                             // 5175
        function _events() {                                                                                           // 5175
          this.$element.off('.zf.trigger .zf.offcanvas').on({                                                          // 5176
            'open.zf.trigger': this.open.bind(this),                                                                   // 5177
            'close.zf.trigger': this.close.bind(this),                                                                 // 5178
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 5179
            'keydown.zf.offcanvas': this._handleKeyboard.bind(this)                                                    // 5180
          });                                                                                                          // 5176
                                                                                                                       //
          if (this.options.closeOnClick && this.$exiter.length) {                                                      // 5183
            this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });                                          // 5184
          }                                                                                                            // 5185
        }                                                                                                              // 5186
                                                                                                                       //
        return _events;                                                                                                // 5175
      }()                                                                                                              // 5175
                                                                                                                       //
      /**                                                                                                              //
       * Applies event listener for elements that will reveal at certain breakpoints.                                  //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5173
      key: '_setMQChecker',                                                                                            // 5194
      value: function () {                                                                                             // 5195
        function _setMQChecker() {                                                                                     // 5195
          var _this = this;                                                                                            // 5196
                                                                                                                       //
          $(window).on('changed.zf.mediaquery', function () {                                                          // 5198
            if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {                                               // 5199
              _this.reveal(true);                                                                                      // 5200
            } else {                                                                                                   // 5201
              _this.reveal(false);                                                                                     // 5202
            }                                                                                                          // 5203
          }).one('load.zf.offcanvas', function () {                                                                    // 5204
            if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {                                               // 5205
              _this.reveal(true);                                                                                      // 5206
            }                                                                                                          // 5207
          });                                                                                                          // 5208
        }                                                                                                              // 5209
                                                                                                                       //
        return _setMQChecker;                                                                                          // 5195
      }()                                                                                                              // 5195
                                                                                                                       //
      /**                                                                                                              //
       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.                             //
       * @param {Boolean} isRevealed - true if element should be revealed.                                             //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5193
      key: 'reveal',                                                                                                   // 5218
      value: function () {                                                                                             // 5219
        function reveal(isRevealed) {                                                                                  // 5219
          var $closer = this.$element.find('[data-close]');                                                            // 5220
          if (isRevealed) {                                                                                            // 5221
            this.close();                                                                                              // 5222
            this.isRevealed = true;                                                                                    // 5223
            // if (!this.options.forceTop) {                                                                           //
            //   var scrollPos = parseInt(window.pageYOffset);                                                         //
            //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';                                //
            // }                                                                                                       //
            // if (this.options.isSticky) { this._stick(); }                                                           //
            this.$element.off('open.zf.trigger toggle.zf.trigger');                                                    // 5229
            if ($closer.length) {                                                                                      // 5230
              $closer.hide();                                                                                          // 5231
            }                                                                                                          // 5232
          } else {                                                                                                     // 5233
            this.isRevealed = false;                                                                                   // 5234
            // if (this.options.isSticky || !this.options.forceTop) {                                                  //
            //   this.$element[0].style.transform = '';                                                                //
            //   $(window).off('scroll.zf.offcanvas');                                                                 //
            // }                                                                                                       //
            this.$element.on({                                                                                         // 5239
              'open.zf.trigger': this.open.bind(this),                                                                 // 5240
              'toggle.zf.trigger': this.toggle.bind(this)                                                              // 5241
            });                                                                                                        // 5239
            if ($closer.length) {                                                                                      // 5243
              $closer.show();                                                                                          // 5244
            }                                                                                                          // 5245
          }                                                                                                            // 5246
        }                                                                                                              // 5247
                                                                                                                       //
        return reveal;                                                                                                 // 5219
      }()                                                                                                              // 5219
                                                                                                                       //
      /**                                                                                                              //
       * Opens the off-canvas menu.                                                                                    //
       * @function                                                                                                     //
       * @param {Object} event - Event object passed from listener.                                                    //
       * @param {jQuery} trigger - element that triggered the off-canvas to open.                                      //
       * @fires OffCanvas#opened                                                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5217
      key: 'open',                                                                                                     // 5258
      value: function () {                                                                                             // 5259
        function open(event, trigger) {                                                                                // 5259
          if (this.$element.hasClass('is-open') || this.isRevealed) {                                                  // 5260
            return;                                                                                                    // 5261
          }                                                                                                            // 5262
          var _this = this,                                                                                            // 5263
              $body = $(document.body);                                                                                // 5263
                                                                                                                       //
          if (this.options.forceTop) {                                                                                 // 5266
            $('body').scrollTop(0);                                                                                    // 5267
          }                                                                                                            // 5268
          // window.pageYOffset = 0;                                                                                   //
                                                                                                                       //
          // if (!this.options.forceTop) {                                                                             //
          //   var scrollPos = parseInt(window.pageYOffset);                                                           //
          //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';                                  //
          //   if (this.$exiter.length) {                                                                              //
          //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';                                 //
          //   }                                                                                                       //
          // }                                                                                                         //
          /**                                                                                                          //
           * Fires when the off-canvas menu opens.                                                                     //
           * @event OffCanvas#opened                                                                                   //
           */                                                                                                          //
          Foundation.Move(this.options.transitionTime, this.$element, function () {                                    // 5282
            $('[data-off-canvas-wrapper]').addClass('is-off-canvas-open is-open-' + _this.options.position);           // 5283
                                                                                                                       //
            _this.$element.addClass('is-open');                                                                        // 5285
                                                                                                                       //
            // if (_this.options.isSticky) {                                                                           //
            //   _this._stick();                                                                                       //
            // }                                                                                                       //
          });                                                                                                          // 5290
                                                                                                                       //
          this.$triggers.attr('aria-expanded', 'true');                                                                // 5292
          this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');                                   // 5293
                                                                                                                       //
          if (this.options.closeOnClick) {                                                                             // 5295
            this.$exiter.addClass('is-visible');                                                                       // 5296
          }                                                                                                            // 5297
                                                                                                                       //
          if (trigger) {                                                                                               // 5299
            this.$lastTrigger = trigger;                                                                               // 5300
          }                                                                                                            // 5301
                                                                                                                       //
          if (this.options.autoFocus) {                                                                                // 5303
            this.$element.one(Foundation.transitionend(this.$element), function () {                                   // 5304
              _this.$element.find('a, button').eq(0).focus();                                                          // 5305
            });                                                                                                        // 5306
          }                                                                                                            // 5307
                                                                                                                       //
          if (this.options.trapFocus) {                                                                                // 5309
            $('[data-off-canvas-content]').attr('tabindex', '-1');                                                     // 5310
            this._trapFocus();                                                                                         // 5311
          }                                                                                                            // 5312
        }                                                                                                              // 5313
                                                                                                                       //
        return open;                                                                                                   // 5259
      }()                                                                                                              // 5259
                                                                                                                       //
      /**                                                                                                              //
       * Traps focus within the offcanvas on open.                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5257
      key: '_trapFocus',                                                                                               // 5321
      value: function () {                                                                                             // 5322
        function _trapFocus() {                                                                                        // 5322
          var focusable = Foundation.Keyboard.findFocusable(this.$element),                                            // 5323
              first = focusable.eq(0),                                                                                 // 5323
              last = focusable.eq(-1);                                                                                 // 5323
                                                                                                                       //
          focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {                                     // 5327
            if (e.which === 9 || e.keycode === 9) {                                                                    // 5328
              if (e.target === last[0] && !e.shiftKey) {                                                               // 5329
                e.preventDefault();                                                                                    // 5330
                first.focus();                                                                                         // 5331
              }                                                                                                        // 5332
              if (e.target === first[0] && e.shiftKey) {                                                               // 5333
                e.preventDefault();                                                                                    // 5334
                last.focus();                                                                                          // 5335
              }                                                                                                        // 5336
            }                                                                                                          // 5337
          });                                                                                                          // 5338
        }                                                                                                              // 5339
                                                                                                                       //
        return _trapFocus;                                                                                             // 5322
      }()                                                                                                              // 5322
                                                                                                                       //
      /**                                                                                                              //
       * Allows the offcanvas to appear sticky utilizing translate properties.                                         //
       * @private                                                                                                      //
       */                                                                                                              //
      // OffCanvas.prototype._stick = function() {                                                                     //
      //   var elStyle = this.$element[0].style;                                                                       //
      //                                                                                                               //
      //   if (this.options.closeOnClick) {                                                                            //
      //     var exitStyle = this.$exiter[0].style;                                                                    //
      //   }                                                                                                           //
      //                                                                                                               //
      //   $(window).on('scroll.zf.offcanvas', function(e) {                                                           //
      //     console.log(e);                                                                                           //
      //     var pageY = window.pageYOffset;                                                                           //
      //     elStyle.transform = 'translate(0,' + pageY + 'px)';                                                       //
      //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }                    //
      //   });                                                                                                         //
      //   // this.$element.trigger('stuck.zf.offcanvas');                                                             //
      // };                                                                                                            //
      /**                                                                                                              //
       * Closes the off-canvas menu.                                                                                   //
       * @function                                                                                                     //
       * @param {Function} cb - optional cb to fire after closure.                                                     //
       * @fires OffCanvas#closed                                                                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5320
      key: 'close',                                                                                                    // 5368
      value: function () {                                                                                             // 5369
        function close(cb) {                                                                                           // 5369
          if (!this.$element.hasClass('is-open') || this.isRevealed) {                                                 // 5370
            return;                                                                                                    // 5371
          }                                                                                                            // 5372
                                                                                                                       //
          var _this = this;                                                                                            // 5374
                                                                                                                       //
          //  Foundation.Move(this.options.transitionTime, this.$element, function() {                                 //
          $('[data-off-canvas-wrapper]').removeClass('is-off-canvas-open is-open-' + _this.options.position);          // 5377
          _this.$element.removeClass('is-open');                                                                       // 5378
          // Foundation._reflow();                                                                                     //
          // });                                                                                                       //
          this.$element.attr('aria-hidden', 'true')                                                                    // 5381
          /**                                                                                                          //
           * Fires when the off-canvas menu opens.                                                                     //
           * @event OffCanvas#closed                                                                                   //
           */                                                                                                          //
          .trigger('closed.zf.offcanvas');                                                                             // 5381
          // if (_this.options.isSticky || !_this.options.forceTop) {                                                  //
          //   setTimeout(function() {                                                                                 //
          //     _this.$element[0].style.transform = '';                                                               //
          //     $(window).off('scroll.zf.offcanvas');                                                                 //
          //   }, this.options.transitionTime);                                                                        //
          // }                                                                                                         //
          if (this.options.closeOnClick) {                                                                             // 5393
            this.$exiter.removeClass('is-visible');                                                                    // 5394
          }                                                                                                            // 5395
                                                                                                                       //
          this.$triggers.attr('aria-expanded', 'false');                                                               // 5397
          if (this.options.trapFocus) {                                                                                // 5398
            $('[data-off-canvas-content]').removeAttr('tabindex');                                                     // 5399
          }                                                                                                            // 5400
        }                                                                                                              // 5401
                                                                                                                       //
        return close;                                                                                                  // 5369
      }()                                                                                                              // 5369
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the off-canvas menu open or closed.                                                                   //
       * @function                                                                                                     //
       * @param {Object} event - Event object passed from listener.                                                    //
       * @param {jQuery} trigger - element that triggered the off-canvas to open.                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5367
      key: 'toggle',                                                                                                   // 5411
      value: function () {                                                                                             // 5412
        function toggle(event, trigger) {                                                                              // 5412
          if (this.$element.hasClass('is-open')) {                                                                     // 5413
            this.close(event, trigger);                                                                                // 5414
          } else {                                                                                                     // 5415
            this.open(event, trigger);                                                                                 // 5416
          }                                                                                                            // 5417
        }                                                                                                              // 5418
                                                                                                                       //
        return toggle;                                                                                                 // 5412
      }()                                                                                                              // 5412
                                                                                                                       //
      /**                                                                                                              //
       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5410
      key: '_handleKeyboard',                                                                                          // 5427
      value: function () {                                                                                             // 5428
        function _handleKeyboard(event) {                                                                              // 5428
          if (event.which !== 27) return;                                                                              // 5429
                                                                                                                       //
          event.stopPropagation();                                                                                     // 5431
          event.preventDefault();                                                                                      // 5432
          this.close();                                                                                                // 5433
          this.$lastTrigger.focus();                                                                                   // 5434
        }                                                                                                              // 5435
                                                                                                                       //
        return _handleKeyboard;                                                                                        // 5428
      }()                                                                                                              // 5428
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the offcanvas plugin.                                                                                //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 5426
      key: 'destroy',                                                                                                  // 5443
      value: function () {                                                                                             // 5444
        function destroy() {                                                                                           // 5444
          this.close();                                                                                                // 5445
          this.$element.off('.zf.trigger .zf.offcanvas');                                                              // 5446
          this.$exiter.off('.zf.offcanvas');                                                                           // 5447
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 5449
        }                                                                                                              // 5450
                                                                                                                       //
        return destroy;                                                                                                // 5444
      }()                                                                                                              // 5444
    }]);                                                                                                               // 5442
                                                                                                                       //
    return OffCanvas;                                                                                                  // 5453
  }();                                                                                                                 // 5454
                                                                                                                       //
  OffCanvas.defaults = {                                                                                               // 5456
    /**                                                                                                                //
     * Allow the user to click outside of the menu to close it.                                                        //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    closeOnClick: true,                                                                                                // 5462
                                                                                                                       //
    /**                                                                                                                //
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.           //
     * @option                                                                                                         //
     * @example 500                                                                                                    //
     */                                                                                                                //
    transitionTime: 0,                                                                                                 // 5469
                                                                                                                       //
    /**                                                                                                                //
     * Direction the offcanvas opens from. Determines class applied to body.                                           //
     * @option                                                                                                         //
     * @example left                                                                                                   //
     */                                                                                                                //
    position: 'left',                                                                                                  // 5476
                                                                                                                       //
    /**                                                                                                                //
     * Force the page to scroll to top on open.                                                                        //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    forceTop: true,                                                                                                    // 5483
                                                                                                                       //
    /**                                                                                                                //
     * Allow the offcanvas to remain open for certain breakpoints.                                                     //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    isRevealed: false,                                                                                                 // 5490
                                                                                                                       //
    /**                                                                                                                //
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option                                                                                                         //
     * @example reveal-for-large                                                                                       //
     */                                                                                                                //
    revealOn: null,                                                                                                    // 5497
                                                                                                                       //
    /**                                                                                                                //
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.                         //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    autoFocus: true,                                                                                                   // 5504
                                                                                                                       //
    /**                                                                                                                //
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option                                                                                                         //
     * TODO improve the regex testing for this.                                                                        //
     * @example reveal-for-large                                                                                       //
     */                                                                                                                //
    revealClass: 'reveal-for-',                                                                                        // 5512
                                                                                                                       //
    /**                                                                                                                //
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    trapFocus: false                                                                                                   // 5519
  };                                                                                                                   // 5456
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(OffCanvas, 'OffCanvas');                                                                           // 5523
}(jQuery);                                                                                                             // 5524
'use strict';                                                                                                          // 5525
                                                                                                                       //
var _createClass = function () {                                                                                       // 5527
  function defineProperties(target, props) {                                                                           // 5527
    for (var i = 0; i < props.length; i++) {                                                                           // 5527
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 5527
  }return function (Constructor, protoProps, staticProps) {                                                            // 5527
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 5527
}();                                                                                                                   // 5527
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 5529
  if (!(instance instanceof Constructor)) {                                                                            // 5529
    throw new TypeError("Cannot call a class as a function");                                                          // 5529
  }                                                                                                                    // 5529
}                                                                                                                      // 5529
                                                                                                                       //
!function ($) {                                                                                                        // 5531
                                                                                                                       //
  /**                                                                                                                  //
   * Orbit module.                                                                                                     //
   * @module foundation.orbit                                                                                          //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.timerAndImageLoader                                                                     //
   * @requires foundation.util.touch                                                                                   //
   */                                                                                                                  //
                                                                                                                       //
  var Orbit = function () {                                                                                            // 5542
    /**                                                                                                                //
    * Creates a new instance of an orbit carousel.                                                                     //
    * @class                                                                                                           //
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.                                          //
    * @param {Object} options - Overrides to the default plugin settings.                                              //
    */                                                                                                                 //
                                                                                                                       //
    function Orbit(element, options) {                                                                                 // 5550
      _classCallCheck(this, Orbit);                                                                                    // 5551
                                                                                                                       //
      this.$element = element;                                                                                         // 5553
      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);                                      // 5554
                                                                                                                       //
      this._init();                                                                                                    // 5556
                                                                                                                       //
      Foundation.registerPlugin(this, 'Orbit');                                                                        // 5558
      Foundation.Keyboard.register('Orbit', {                                                                          // 5559
        'ltr': {                                                                                                       // 5560
          'ARROW_RIGHT': 'next',                                                                                       // 5561
          'ARROW_LEFT': 'previous'                                                                                     // 5562
        },                                                                                                             // 5560
        'rtl': {                                                                                                       // 5564
          'ARROW_LEFT': 'next',                                                                                        // 5565
          'ARROW_RIGHT': 'previous'                                                                                    // 5566
        }                                                                                                              // 5564
      });                                                                                                              // 5559
    }                                                                                                                  // 5569
                                                                                                                       //
    /**                                                                                                                //
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.           //
    * @function                                                                                                        //
    * @private                                                                                                         //
    */                                                                                                                 //
                                                                                                                       //
    _createClass(Orbit, [{                                                                                             // 5578
      key: '_init',                                                                                                    // 5579
      value: function () {                                                                                             // 5580
        function _init() {                                                                                             // 5580
          this.$wrapper = this.$element.find('.' + this.options.containerClass);                                       // 5581
          this.$slides = this.$element.find('.' + this.options.slideClass);                                            // 5582
          var $images = this.$element.find('img'),                                                                     // 5583
              initActive = this.$slides.filter('.is-active');                                                          // 5583
                                                                                                                       //
          if (!initActive.length) {                                                                                    // 5586
            this.$slides.eq(0).addClass('is-active');                                                                  // 5587
          }                                                                                                            // 5588
                                                                                                                       //
          if (!this.options.useMUI) {                                                                                  // 5590
            this.$slides.addClass('no-motionui');                                                                      // 5591
          }                                                                                                            // 5592
                                                                                                                       //
          if ($images.length) {                                                                                        // 5594
            Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));                                      // 5595
          } else {                                                                                                     // 5596
            this._prepareForOrbit(); //hehe                                                                            // 5597
          }                                                                                                            // 5598
                                                                                                                       //
          if (this.options.bullets) {                                                                                  // 5600
            this._loadBullets();                                                                                       // 5601
          }                                                                                                            // 5602
                                                                                                                       //
          this._events();                                                                                              // 5604
                                                                                                                       //
          if (this.options.autoPlay && this.$slides.length > 1) {                                                      // 5606
            this.geoSync();                                                                                            // 5607
          }                                                                                                            // 5608
                                                                                                                       //
          if (this.options.accessible) {                                                                               // 5610
            // allow wrapper to be focusable to enable arrow navigation                                                //
            this.$wrapper.attr('tabindex', 0);                                                                         // 5612
          }                                                                                                            // 5613
        }                                                                                                              // 5614
                                                                                                                       //
        return _init;                                                                                                  // 5580
      }()                                                                                                              // 5580
                                                                                                                       //
      /**                                                                                                              //
      * Creates a jQuery collection of bullets, if they are being used.                                                //
      * @function                                                                                                      //
      * @private                                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5578
      key: '_loadBullets',                                                                                             // 5623
      value: function () {                                                                                             // 5624
        function _loadBullets() {                                                                                      // 5624
          this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');                          // 5625
        }                                                                                                              // 5626
                                                                                                                       //
        return _loadBullets;                                                                                           // 5624
      }()                                                                                                              // 5624
                                                                                                                       //
      /**                                                                                                              //
      * Sets a `timer` object on the orbit, and starts the counter for the next slide.                                 //
      * @function                                                                                                      //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5622
      key: 'geoSync',                                                                                                  // 5634
      value: function () {                                                                                             // 5635
        function geoSync() {                                                                                           // 5635
          var _this = this;                                                                                            // 5636
          this.timer = new Foundation.Timer(this.$element, {                                                           // 5637
            duration: this.options.timerDelay,                                                                         // 5638
            infinite: false                                                                                            // 5639
          }, function () {                                                                                             // 5637
            _this.changeSlide(true);                                                                                   // 5641
          });                                                                                                          // 5642
          this.timer.start();                                                                                          // 5643
        }                                                                                                              // 5644
                                                                                                                       //
        return geoSync;                                                                                                // 5635
      }()                                                                                                              // 5635
                                                                                                                       //
      /**                                                                                                              //
      * Sets wrapper and slide heights for the orbit.                                                                  //
      * @function                                                                                                      //
      * @private                                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5633
      key: '_prepareForOrbit',                                                                                         // 5653
      value: function () {                                                                                             // 5654
        function _prepareForOrbit() {                                                                                  // 5654
          var _this = this;                                                                                            // 5655
          this._setWrapperHeight(function (max) {                                                                      // 5656
            _this._setSlideHeight(max);                                                                                // 5657
          });                                                                                                          // 5658
        }                                                                                                              // 5659
                                                                                                                       //
        return _prepareForOrbit;                                                                                       // 5654
      }()                                                                                                              // 5654
                                                                                                                       //
      /**                                                                                                              //
      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.         //
      * @function                                                                                                      //
      * @private                                                                                                       //
      * @param {Function} cb - a callback function to fire when complete.                                              //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5652
      key: '_setWrapperHeight',                                                                                        // 5669
      value: function () {                                                                                             // 5670
        function _setWrapperHeight(cb) {                                                                               // 5670
          //rewrite this to `for` loop                                                                                 //
          var max = 0,                                                                                                 // 5672
              temp,                                                                                                    // 5672
              counter = 0;                                                                                             // 5672
                                                                                                                       //
          this.$slides.each(function () {                                                                              // 5676
            temp = this.getBoundingClientRect().height;                                                                // 5677
            $(this).attr('data-slide', counter);                                                                       // 5678
                                                                                                                       //
            if (counter) {                                                                                             // 5680
              //if not the first slide, set css position and display property                                          //
              $(this).css({ 'position': 'relative', 'display': 'none' });                                              // 5682
            }                                                                                                          // 5683
            max = temp > max ? temp : max;                                                                             // 5684
            counter++;                                                                                                 // 5685
          });                                                                                                          // 5686
                                                                                                                       //
          if (counter === this.$slides.length) {                                                                       // 5688
            this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.                      // 5689
            cb(max); //fire callback with max height dimension.                                                        // 5690
          }                                                                                                            // 5691
        }                                                                                                              // 5692
                                                                                                                       //
        return _setWrapperHeight;                                                                                      // 5670
      }()                                                                                                              // 5670
                                                                                                                       //
      /**                                                                                                              //
      * Sets the max-height of each slide.                                                                             //
      * @function                                                                                                      //
      * @private                                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5668
      key: '_setSlideHeight',                                                                                          // 5701
      value: function () {                                                                                             // 5702
        function _setSlideHeight(height) {                                                                             // 5702
          this.$slides.each(function () {                                                                              // 5703
            $(this).css('max-height', height);                                                                         // 5704
          });                                                                                                          // 5705
        }                                                                                                              // 5706
                                                                                                                       //
        return _setSlideHeight;                                                                                        // 5702
      }()                                                                                                              // 5702
                                                                                                                       //
      /**                                                                                                              //
      * Adds event listeners to basically everything within the element.                                               //
      * @function                                                                                                      //
      * @private                                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5700
      key: '_events',                                                                                                  // 5715
      value: function () {                                                                                             // 5716
        function _events() {                                                                                           // 5716
          var _this = this;                                                                                            // 5717
                                                                                                                       //
          //***************************************                                                                    //
          //**Now using custom event - thanks to:**                                                                    //
          //**      Yohai Ararat of Toronto      **                                                                    //
          //***************************************                                                                    //
          if (this.$slides.length > 1) {                                                                               // 5723
                                                                                                                       //
            if (this.options.swipe) {                                                                                  // 5725
              this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {       // 5726
                e.preventDefault();                                                                                    // 5727
                _this.changeSlide(true);                                                                               // 5728
              }).on('swiperight.zf.orbit', function (e) {                                                              // 5729
                e.preventDefault();                                                                                    // 5730
                _this.changeSlide(false);                                                                              // 5731
              });                                                                                                      // 5732
            }                                                                                                          // 5733
            //***************************************                                                                  //
                                                                                                                       //
            if (this.options.autoPlay) {                                                                               // 5736
              this.$slides.on('click.zf.orbit', function () {                                                          // 5737
                _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);                     // 5738
                _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();                                   // 5739
              });                                                                                                      // 5740
                                                                                                                       //
              if (this.options.pauseOnHover) {                                                                         // 5742
                this.$element.on('mouseenter.zf.orbit', function () {                                                  // 5743
                  _this.timer.pause();                                                                                 // 5744
                }).on('mouseleave.zf.orbit', function () {                                                             // 5745
                  if (!_this.$element.data('clickedOn')) {                                                             // 5746
                    _this.timer.start();                                                                               // 5747
                  }                                                                                                    // 5748
                });                                                                                                    // 5749
              }                                                                                                        // 5750
            }                                                                                                          // 5751
                                                                                                                       //
            if (this.options.navButtons) {                                                                             // 5753
              var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);       // 5754
              $controls.attr('tabindex', 0)                                                                            // 5755
              //also need to handle enter/return and spacebar key presses                                              //
              .on('click.zf.orbit touchend.zf.orbit', function (e) {                                                   // 5755
                e.preventDefault();                                                                                    // 5758
                _this.changeSlide($(this).hasClass(_this.options.nextClass));                                          // 5759
              });                                                                                                      // 5760
            }                                                                                                          // 5761
                                                                                                                       //
            if (this.options.bullets) {                                                                                // 5763
              this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {                                       // 5764
                if (/is-active/g.test(this.className)) {                                                               // 5765
                  return false;                                                                                        // 5766
                } //if this is active, kick out of function.                                                           // 5767
                var idx = $(this).data('slide'),                                                                       // 5768
                    ltr = idx > _this.$slides.filter('.is-active').data('slide'),                                      // 5768
                    $slide = _this.$slides.eq(idx);                                                                    // 5768
                                                                                                                       //
                _this.changeSlide(ltr, $slide, idx);                                                                   // 5772
              });                                                                                                      // 5773
            }                                                                                                          // 5774
                                                                                                                       //
            this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {                                     // 5776
              // handle keyboard event with keyboard util                                                              //
              Foundation.Keyboard.handleKey(e, 'Orbit', {                                                              // 5778
                next: function () {                                                                                    // 5779
                  function next() {                                                                                    // 5779
                    _this.changeSlide(true);                                                                           // 5780
                  }                                                                                                    // 5781
                                                                                                                       //
                  return next;                                                                                         // 5779
                }(),                                                                                                   // 5779
                previous: function () {                                                                                // 5782
                  function previous() {                                                                                // 5782
                    _this.changeSlide(false);                                                                          // 5783
                  }                                                                                                    // 5784
                                                                                                                       //
                  return previous;                                                                                     // 5782
                }(),                                                                                                   // 5782
                handled: function () {                                                                                 // 5785
                  function handled() {                                                                                 // 5785
                    // if bullet is focused, make sure focus moves                                                     //
                    if ($(e.target).is(_this.$bullets)) {                                                              // 5787
                      _this.$bullets.filter('.is-active').focus();                                                     // 5788
                    }                                                                                                  // 5789
                  }                                                                                                    // 5790
                                                                                                                       //
                  return handled;                                                                                      // 5785
                }()                                                                                                    // 5785
              });                                                                                                      // 5778
            });                                                                                                        // 5792
          }                                                                                                            // 5793
        }                                                                                                              // 5794
                                                                                                                       //
        return _events;                                                                                                // 5716
      }()                                                                                                              // 5716
                                                                                                                       //
      /**                                                                                                              //
      * Changes the current slide to a new one.                                                                        //
      * @function                                                                                                      //
      * @param {Boolean} isLTR - flag if the slide should move left to right.                                          //
      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.                //
      * @param {Number} idx - the index of the new slide in its collection, if one chosen.                             //
      * @fires Orbit#slidechange                                                                                       //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5714
      key: 'changeSlide',                                                                                              // 5806
      value: function () {                                                                                             // 5807
        function changeSlide(isLTR, chosenSlide, idx) {                                                                // 5807
          var $curSlide = this.$slides.filter('.is-active').eq(0);                                                     // 5808
                                                                                                                       //
          if (/mui/g.test($curSlide[0].className)) {                                                                   // 5810
            return false;                                                                                              // 5811
          } //if the slide is currently animating, kick out of the function                                            // 5812
                                                                                                                       //
          var $firstSlide = this.$slides.first(),                                                                      // 5814
              $lastSlide = this.$slides.last(),                                                                        // 5814
              dirIn = isLTR ? 'Right' : 'Left',                                                                        // 5814
              dirOut = isLTR ? 'Left' : 'Right',                                                                       // 5814
              _this = this,                                                                                            // 5814
              $newSlide;                                                                                               // 5814
                                                                                                                       //
          if (!chosenSlide) {                                                                                          // 5821
            //most of the time, this will be auto played or clicked from the navButtons.                               //
            $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
            this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right
            this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left
          } else {                                                                                                     // 5826
              $newSlide = chosenSlide;                                                                                 // 5827
            }                                                                                                          // 5828
                                                                                                                       //
          if ($newSlide.length) {                                                                                      // 5830
            if (this.options.bullets) {                                                                                // 5831
              idx = idx || this.$slides.index($newSlide); //grab index to update bullets                               // 5832
              this._updateBullets(idx);                                                                                // 5833
            }                                                                                                          // 5834
                                                                                                                       //
            if (this.options.useMUI) {                                                                                 // 5836
              Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {
                $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');             // 5838
              });                                                                                                      // 5839
                                                                                                                       //
              Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {
                $curSlide.removeAttr('aria-live');                                                                     // 5842
                if (_this.options.autoPlay && !_this.timer.isPaused) {                                                 // 5843
                  _this.timer.restart();                                                                               // 5844
                }                                                                                                      // 5845
                //do stuff?                                                                                            //
              });                                                                                                      // 5847
            } else {                                                                                                   // 5848
                $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();                               // 5849
                $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();                              // 5850
                if (this.options.autoPlay && !this.timer.isPaused) {                                                   // 5851
                  this.timer.restart();                                                                                // 5852
                }                                                                                                      // 5853
              }                                                                                                        // 5854
            /**                                                                                                        //
            * Triggers when the slide has finished animating in.                                                       //
            * @event Orbit#slidechange                                                                                 //
            */                                                                                                         //
            this.$element.trigger('slidechange.zf.orbit', [$newSlide]);                                                // 5859
          }                                                                                                            // 5860
        }                                                                                                              // 5861
                                                                                                                       //
        return changeSlide;                                                                                            // 5807
      }()                                                                                                              // 5807
                                                                                                                       //
      /**                                                                                                              //
      * Updates the active state of the bullets, if displayed.                                                         //
      * @function                                                                                                      //
      * @private                                                                                                       //
      * @param {Number} idx - the index of the current slide.                                                          //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5805
      key: '_updateBullets',                                                                                           // 5871
      value: function () {                                                                                             // 5872
        function _updateBullets(idx) {                                                                                 // 5872
          var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),
              span = $oldBullet.find('span:last').detach(),                                                            // 5873
              $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);                                   // 5873
        }                                                                                                              // 5876
                                                                                                                       //
        return _updateBullets;                                                                                         // 5872
      }()                                                                                                              // 5872
                                                                                                                       //
      /**                                                                                                              //
      * Destroys the carousel and hides the element.                                                                   //
      * @function                                                                                                      //
      */                                                                                                               //
                                                                                                                       //
    }, {                                                                                                               // 5870
      key: 'destroy',                                                                                                  // 5884
      value: function () {                                                                                             // 5885
        function destroy() {                                                                                           // 5885
          this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();                                      // 5886
          Foundation.unregisterPlugin(this);                                                                           // 5887
        }                                                                                                              // 5888
                                                                                                                       //
        return destroy;                                                                                                // 5885
      }()                                                                                                              // 5885
    }]);                                                                                                               // 5883
                                                                                                                       //
    return Orbit;                                                                                                      // 5891
  }();                                                                                                                 // 5892
                                                                                                                       //
  Orbit.defaults = {                                                                                                   // 5894
    /**                                                                                                                //
    * Tells the JS to look for and loadBullets.                                                                        //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    bullets: true,                                                                                                     // 5900
    /**                                                                                                                //
    * Tells the JS to apply event listeners to nav buttons                                                             //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    navButtons: true,                                                                                                  // 5906
    /**                                                                                                                //
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
    * @example 'slide-in-right'                                                                                        //
    */                                                                                                                 //
    animInFromRight: 'slide-in-right',                                                                                 // 5912
    /**                                                                                                                //
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
    * @example 'slide-out-right'                                                                                       //
    */                                                                                                                 //
    animOutToRight: 'slide-out-right',                                                                                 // 5918
    /**                                                                                                                //
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
    * @example 'slide-in-left'                                                                                         //
    *                                                                                                                  //
    */                                                                                                                 //
    animInFromLeft: 'slide-in-left',                                                                                   // 5925
    /**                                                                                                                //
    * motion-ui animation class to apply                                                                               //
    * @option                                                                                                          //
    * @example 'slide-out-left'                                                                                        //
    */                                                                                                                 //
    animOutToLeft: 'slide-out-left',                                                                                   // 5931
    /**                                                                                                                //
    * Allows Orbit to automatically animate on page load.                                                              //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    autoPlay: true,                                                                                                    // 5937
    /**                                                                                                                //
    * Amount of time, in ms, between slide transitions                                                                 //
    * @option                                                                                                          //
    * @example 5000                                                                                                    //
    */                                                                                                                 //
    timerDelay: 5000,                                                                                                  // 5943
    /**                                                                                                                //
    * Allows Orbit to infinitely loop through the slides                                                               //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    infiniteWrap: true,                                                                                                // 5949
    /**                                                                                                                //
    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library                  //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    swipe: true,                                                                                                       // 5955
    /**                                                                                                                //
    * Allows the timing function to pause animation on hover.                                                          //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    pauseOnHover: true,                                                                                                // 5961
    /**                                                                                                                //
    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys                            //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    accessible: true,                                                                                                  // 5967
    /**                                                                                                                //
    * Class applied to the container of Orbit                                                                          //
    * @option                                                                                                          //
    * @example 'orbit-container'                                                                                       //
    */                                                                                                                 //
    containerClass: 'orbit-container',                                                                                 // 5973
    /**                                                                                                                //
    * Class applied to individual slides.                                                                              //
    * @option                                                                                                          //
    * @example 'orbit-slide'                                                                                           //
    */                                                                                                                 //
    slideClass: 'orbit-slide',                                                                                         // 5979
    /**                                                                                                                //
    * Class applied to the bullet container. You're welcome.                                                           //
    * @option                                                                                                          //
    * @example 'orbit-bullets'                                                                                         //
    */                                                                                                                 //
    boxOfBullets: 'orbit-bullets',                                                                                     // 5985
    /**                                                                                                                //
    * Class applied to the `next` navigation button.                                                                   //
    * @option                                                                                                          //
    * @example 'orbit-next'                                                                                            //
    */                                                                                                                 //
    nextClass: 'orbit-next',                                                                                           // 5991
    /**                                                                                                                //
    * Class applied to the `previous` navigation button.                                                               //
    * @option                                                                                                          //
    * @example 'orbit-previous'                                                                                        //
    */                                                                                                                 //
    prevClass: 'orbit-previous',                                                                                       // 5997
    /**                                                                                                                //
    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.             //
    * @option                                                                                                          //
    * @example true                                                                                                    //
    */                                                                                                                 //
    useMUI: true                                                                                                       // 6003
  };                                                                                                                   // 5894
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Orbit, 'Orbit');                                                                                   // 6007
}(jQuery);                                                                                                             // 6008
'use strict';                                                                                                          // 6009
                                                                                                                       //
var _createClass = function () {                                                                                       // 6011
  function defineProperties(target, props) {                                                                           // 6011
    for (var i = 0; i < props.length; i++) {                                                                           // 6011
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 6011
  }return function (Constructor, protoProps, staticProps) {                                                            // 6011
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 6011
}();                                                                                                                   // 6011
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 6013
  if (!(instance instanceof Constructor)) {                                                                            // 6013
    throw new TypeError("Cannot call a class as a function");                                                          // 6013
  }                                                                                                                    // 6013
}                                                                                                                      // 6013
                                                                                                                       //
!function ($) {                                                                                                        // 6015
                                                                                                                       //
  /**                                                                                                                  //
   * ResponsiveMenu module.                                                                                            //
   * @module foundation.responsiveMenu                                                                                 //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.mediaQuery                                                                              //
   * @requires foundation.util.accordionMenu                                                                           //
   * @requires foundation.util.drilldown                                                                               //
   * @requires foundation.util.dropdown-menu                                                                           //
   */                                                                                                                  //
                                                                                                                       //
  var ResponsiveMenu = function () {                                                                                   // 6027
    /**                                                                                                                //
     * Creates a new instance of a responsive menu.                                                                    //
     * @class                                                                                                          //
     * @fires ResponsiveMenu#init                                                                                      //
     * @param {jQuery} element - jQuery object to make into a dropdown menu.                                           //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function ResponsiveMenu(element, options) {                                                                        // 6036
      _classCallCheck(this, ResponsiveMenu);                                                                           // 6037
                                                                                                                       //
      this.$element = $(element);                                                                                      // 6039
      this.rules = this.$element.data('responsive-menu');                                                              // 6040
      this.currentMq = null;                                                                                           // 6041
      this.currentPlugin = null;                                                                                       // 6042
                                                                                                                       //
      this._init();                                                                                                    // 6044
      this._events();                                                                                                  // 6045
                                                                                                                       //
      Foundation.registerPlugin(this, 'ResponsiveMenu');                                                               // 6047
    }                                                                                                                  // 6048
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.            //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(ResponsiveMenu, [{                                                                                    // 6057
      key: '_init',                                                                                                    // 6058
      value: function () {                                                                                             // 6059
        function _init() {                                                                                             // 6059
          // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
          if (typeof this.rules === 'string') {                                                                        // 6061
            var rulesTree = {};                                                                                        // 6062
                                                                                                                       //
            // Parse rules from "classes" pulled from data attribute                                                   //
            var rules = this.rules.split(' ');                                                                         // 6065
                                                                                                                       //
            // Iterate through every rule found                                                                        //
            for (var i = 0; i < rules.length; i++) {                                                                   // 6068
              var rule = rules[i].split('-');                                                                          // 6069
              var ruleSize = rule.length > 1 ? rule[0] : 'small';                                                      // 6070
              var rulePlugin = rule.length > 1 ? rule[1] : rule[0];                                                    // 6071
                                                                                                                       //
              if (MenuPlugins[rulePlugin] !== null) {                                                                  // 6073
                rulesTree[ruleSize] = MenuPlugins[rulePlugin];                                                         // 6074
              }                                                                                                        // 6075
            }                                                                                                          // 6076
                                                                                                                       //
            this.rules = rulesTree;                                                                                    // 6078
          }                                                                                                            // 6079
                                                                                                                       //
          if (!$.isEmptyObject(this.rules)) {                                                                          // 6081
            this._checkMediaQueries();                                                                                 // 6082
          }                                                                                                            // 6083
        }                                                                                                              // 6084
                                                                                                                       //
        return _init;                                                                                                  // 6059
      }()                                                                                                              // 6059
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for the Menu.                                                                              //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6057
      key: '_events',                                                                                                  // 6093
      value: function () {                                                                                             // 6094
        function _events() {                                                                                           // 6094
          var _this = this;                                                                                            // 6095
                                                                                                                       //
          $(window).on('changed.zf.mediaquery', function () {                                                          // 6097
            _this._checkMediaQueries();                                                                                // 6098
          });                                                                                                          // 6099
          // $(window).on('resize.zf.ResponsiveMenu', function() {                                                     //
          //   _this._checkMediaQueries();                                                                             //
          // });                                                                                                       //
        }                                                                                                              // 6103
                                                                                                                       //
        return _events;                                                                                                // 6094
      }()                                                                                                              // 6094
                                                                                                                       //
      /**                                                                                                              //
       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6092
      key: '_checkMediaQueries',                                                                                       // 6112
      value: function () {                                                                                             // 6113
        function _checkMediaQueries() {                                                                                // 6113
          var matchedMq,                                                                                               // 6114
              _this = this;                                                                                            // 6114
          // Iterate through each rule and find the last matching rule                                                 //
          $.each(this.rules, function (key) {                                                                          // 6117
            if (Foundation.MediaQuery.atLeast(key)) {                                                                  // 6118
              matchedMq = key;                                                                                         // 6119
            }                                                                                                          // 6120
          });                                                                                                          // 6121
                                                                                                                       //
          // No match? No dice                                                                                         //
          if (!matchedMq) return;                                                                                      // 6124
                                                                                                                       //
          // Plugin already initialized? We good                                                                       //
          if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;                                      // 6127
                                                                                                                       //
          // Remove existing plugin-specific CSS classes                                                               //
          $.each(MenuPlugins, function (key, value) {                                                                  // 6130
            _this.$element.removeClass(value.cssClass);                                                                // 6131
          });                                                                                                          // 6132
                                                                                                                       //
          // Add the CSS class for the new plugin                                                                      //
          this.$element.addClass(this.rules[matchedMq].cssClass);                                                      // 6135
                                                                                                                       //
          // Create an instance of the new plugin                                                                      //
          if (this.currentPlugin) this.currentPlugin.destroy();                                                        // 6138
          this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});                                    // 6139
        }                                                                                                              // 6140
                                                                                                                       //
        return _checkMediaQueries;                                                                                     // 6113
      }()                                                                                                              // 6113
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6111
      key: 'destroy',                                                                                                  // 6148
      value: function () {                                                                                             // 6149
        function destroy() {                                                                                           // 6149
          this.currentPlugin.destroy();                                                                                // 6150
          $(window).off('.zf.ResponsiveMenu');                                                                         // 6151
          Foundation.unregisterPlugin(this);                                                                           // 6152
        }                                                                                                              // 6153
                                                                                                                       //
        return destroy;                                                                                                // 6149
      }()                                                                                                              // 6149
    }]);                                                                                                               // 6147
                                                                                                                       //
    return ResponsiveMenu;                                                                                             // 6156
  }();                                                                                                                 // 6157
                                                                                                                       //
  ResponsiveMenu.defaults = {};                                                                                        // 6159
                                                                                                                       //
  // The plugin matches the plugin classes with these plugin instances.                                                //
  var MenuPlugins = {                                                                                                  // 6162
    dropdown: {                                                                                                        // 6163
      cssClass: 'dropdown',                                                                                            // 6164
      plugin: Foundation._plugins['dropdown-menu'] || null                                                             // 6165
    },                                                                                                                 // 6163
    drilldown: {                                                                                                       // 6167
      cssClass: 'drilldown',                                                                                           // 6168
      plugin: Foundation._plugins['drilldown'] || null                                                                 // 6169
    },                                                                                                                 // 6167
    accordion: {                                                                                                       // 6171
      cssClass: 'accordion-menu',                                                                                      // 6172
      plugin: Foundation._plugins['accordion-menu'] || null                                                            // 6173
    }                                                                                                                  // 6171
  };                                                                                                                   // 6162
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');                                                                 // 6178
}(jQuery);                                                                                                             // 6179
'use strict';                                                                                                          // 6180
                                                                                                                       //
var _createClass = function () {                                                                                       // 6182
  function defineProperties(target, props) {                                                                           // 6182
    for (var i = 0; i < props.length; i++) {                                                                           // 6182
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 6182
  }return function (Constructor, protoProps, staticProps) {                                                            // 6182
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 6182
}();                                                                                                                   // 6182
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 6184
  if (!(instance instanceof Constructor)) {                                                                            // 6184
    throw new TypeError("Cannot call a class as a function");                                                          // 6184
  }                                                                                                                    // 6184
}                                                                                                                      // 6184
                                                                                                                       //
!function ($) {                                                                                                        // 6186
                                                                                                                       //
  /**                                                                                                                  //
   * ResponsiveToggle module.                                                                                          //
   * @module foundation.responsiveToggle                                                                               //
   * @requires foundation.util.mediaQuery                                                                              //
   */                                                                                                                  //
                                                                                                                       //
  var ResponsiveToggle = function () {                                                                                 // 6194
    /**                                                                                                                //
     * Creates a new instance of Tab Bar.                                                                              //
     * @class                                                                                                          //
     * @fires ResponsiveToggle#init                                                                                    //
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.                                     //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function ResponsiveToggle(element, options) {                                                                      // 6203
      _classCallCheck(this, ResponsiveToggle);                                                                         // 6204
                                                                                                                       //
      this.$element = $(element);                                                                                      // 6206
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);                           // 6207
                                                                                                                       //
      this._init();                                                                                                    // 6209
      this._events();                                                                                                  // 6210
                                                                                                                       //
      Foundation.registerPlugin(this, 'ResponsiveToggle');                                                             // 6212
    }                                                                                                                  // 6213
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the tab bar by finding the target element, toggling element, and running update().                  //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(ResponsiveToggle, [{                                                                                  // 6222
      key: '_init',                                                                                                    // 6223
      value: function () {                                                                                             // 6224
        function _init() {                                                                                             // 6224
          var targetID = this.$element.data('responsive-toggle');                                                      // 6225
          if (!targetID) {                                                                                             // 6226
            console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');                         // 6227
          }                                                                                                            // 6228
                                                                                                                       //
          this.$targetMenu = $('#' + targetID);                                                                        // 6230
          this.$toggler = this.$element.find('[data-toggle]');                                                         // 6231
                                                                                                                       //
          this._update();                                                                                              // 6233
        }                                                                                                              // 6234
                                                                                                                       //
        return _init;                                                                                                  // 6224
      }()                                                                                                              // 6224
                                                                                                                       //
      /**                                                                                                              //
       * Adds necessary event handlers for the tab bar to work.                                                        //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6222
      key: '_events',                                                                                                  // 6243
      value: function () {                                                                                             // 6244
        function _events() {                                                                                           // 6244
          var _this = this;                                                                                            // 6245
                                                                                                                       //
          this._updateMqHandler = this._update.bind(this);                                                             // 6247
                                                                                                                       //
          $(window).on('changed.zf.mediaquery', this._updateMqHandler);                                                // 6249
                                                                                                                       //
          this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));                                   // 6251
        }                                                                                                              // 6252
                                                                                                                       //
        return _events;                                                                                                // 6244
      }()                                                                                                              // 6244
                                                                                                                       //
      /**                                                                                                              //
       * Checks the current media query to determine if the tab bar should be visible or hidden.                       //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6242
      key: '_update',                                                                                                  // 6261
      value: function () {                                                                                             // 6262
        function _update() {                                                                                           // 6262
          // Mobile                                                                                                    //
          if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {                                                  // 6264
            this.$element.show();                                                                                      // 6265
            this.$targetMenu.hide();                                                                                   // 6266
          }                                                                                                            // 6267
                                                                                                                       //
          // Desktop                                                                                                   //
          else {                                                                                                       // 6264
              this.$element.hide();                                                                                    // 6271
              this.$targetMenu.show();                                                                                 // 6272
            }                                                                                                          // 6273
        }                                                                                                              // 6274
                                                                                                                       //
        return _update;                                                                                                // 6262
      }()                                                                                                              // 6262
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
       * @function                                                                                                     //
       * @fires ResponsiveToggle#toggled                                                                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6260
      key: 'toggleMenu',                                                                                               // 6283
      value: function () {                                                                                             // 6284
        function toggleMenu() {                                                                                        // 6284
          if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {                                                  // 6285
            this.$targetMenu.toggle(0);                                                                                // 6286
                                                                                                                       //
            /**                                                                                                        //
             * Fires when the element attached to the tab bar toggles.                                                 //
             * @event ResponsiveToggle#toggled                                                                         //
             */                                                                                                        //
            this.$element.trigger('toggled.zf.responsiveToggle');                                                      // 6292
          }                                                                                                            // 6293
        }                                                                                                              // 6294
                                                                                                                       //
        return toggleMenu;                                                                                             // 6284
      }()                                                                                                              // 6284
    }, {                                                                                                               // 6282
      key: 'destroy',                                                                                                  // 6296
      value: function () {                                                                                             // 6297
        function destroy() {                                                                                           // 6297
          this.$element.off('.zf.responsiveToggle');                                                                   // 6298
          this.$toggler.off('.zf.responsiveToggle');                                                                   // 6299
                                                                                                                       //
          $(window).off('changed.zf.mediaquery', this._updateMqHandler);                                               // 6301
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 6303
        }                                                                                                              // 6304
                                                                                                                       //
        return destroy;                                                                                                // 6297
      }()                                                                                                              // 6297
    }]);                                                                                                               // 6295
                                                                                                                       //
    return ResponsiveToggle;                                                                                           // 6307
  }();                                                                                                                 // 6308
                                                                                                                       //
  ResponsiveToggle.defaults = {                                                                                        // 6310
    /**                                                                                                                //
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.                                 //
     * @option                                                                                                         //
     * @example 'medium'                                                                                               //
     */                                                                                                                //
    hideFor: 'medium'                                                                                                  // 6316
  };                                                                                                                   // 6310
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');                                                             // 6320
}(jQuery);                                                                                                             // 6321
'use strict';                                                                                                          // 6322
                                                                                                                       //
var _createClass = function () {                                                                                       // 6324
  function defineProperties(target, props) {                                                                           // 6324
    for (var i = 0; i < props.length; i++) {                                                                           // 6324
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 6324
  }return function (Constructor, protoProps, staticProps) {                                                            // 6324
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 6324
}();                                                                                                                   // 6324
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 6326
  if (!(instance instanceof Constructor)) {                                                                            // 6326
    throw new TypeError("Cannot call a class as a function");                                                          // 6326
  }                                                                                                                    // 6326
}                                                                                                                      // 6326
                                                                                                                       //
!function ($) {                                                                                                        // 6328
                                                                                                                       //
  /**                                                                                                                  //
   * Reveal module.                                                                                                    //
   * @module foundation.reveal                                                                                         //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.box                                                                                     //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.mediaQuery                                                                              //
   * @requires foundation.util.motion if using animations                                                              //
   */                                                                                                                  //
                                                                                                                       //
  var Reveal = function () {                                                                                           // 6340
    /**                                                                                                                //
     * Creates a new instance of Reveal.                                                                               //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to use for the modal.                                                   //
     * @param {Object} options - optional parameters.                                                                  //
     */                                                                                                                //
                                                                                                                       //
    function Reveal(element, options) {                                                                                // 6348
      _classCallCheck(this, Reveal);                                                                                   // 6349
                                                                                                                       //
      this.$element = element;                                                                                         // 6351
      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);                                     // 6352
      this._init();                                                                                                    // 6353
                                                                                                                       //
      Foundation.registerPlugin(this, 'Reveal');                                                                       // 6355
      Foundation.Keyboard.register('Reveal', {                                                                         // 6356
        'ENTER': 'open',                                                                                               // 6357
        'SPACE': 'open',                                                                                               // 6358
        'ESCAPE': 'close',                                                                                             // 6359
        'TAB': 'tab_forward',                                                                                          // 6360
        'SHIFT_TAB': 'tab_backward'                                                                                    // 6361
      });                                                                                                              // 6356
    }                                                                                                                  // 6363
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the modal by adding the overlay and close buttons, (if selected).                                   //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Reveal, [{                                                                                            // 6371
      key: '_init',                                                                                                    // 6372
      value: function () {                                                                                             // 6373
        function _init() {                                                                                             // 6373
          this.id = this.$element.attr('id');                                                                          // 6374
          this.isActive = false;                                                                                       // 6375
          this.cached = { mq: Foundation.MediaQuery.current };                                                         // 6376
          this.isMobile = mobileSniff();                                                                               // 6377
                                                                                                                       //
          this.$anchor = $('[data-open="' + this.id + '"]').length ? $('[data-open="' + this.id + '"]') : $('[data-toggle="' + this.id + '"]');
          this.$anchor.attr({                                                                                          // 6380
            'aria-controls': this.id,                                                                                  // 6381
            'aria-haspopup': true,                                                                                     // 6382
            'tabindex': 0                                                                                              // 6383
          });                                                                                                          // 6380
                                                                                                                       //
          if (this.options.fullScreen || this.$element.hasClass('full')) {                                             // 6386
            this.options.fullScreen = true;                                                                            // 6387
            this.options.overlay = false;                                                                              // 6388
          }                                                                                                            // 6389
          if (this.options.overlay && !this.$overlay) {                                                                // 6390
            this.$overlay = this._makeOverlay(this.id);                                                                // 6391
          }                                                                                                            // 6392
                                                                                                                       //
          this.$element.attr({                                                                                         // 6394
            'role': 'dialog',                                                                                          // 6395
            'aria-hidden': true,                                                                                       // 6396
            'data-yeti-box': this.id,                                                                                  // 6397
            'data-resize': this.id                                                                                     // 6398
          });                                                                                                          // 6394
                                                                                                                       //
          if (this.$overlay) {                                                                                         // 6401
            this.$element.detach().appendTo(this.$overlay);                                                            // 6402
          } else {                                                                                                     // 6403
            this.$element.detach().appendTo($('body'));                                                                // 6404
            this.$element.addClass('without-overlay');                                                                 // 6405
          }                                                                                                            // 6406
          this._events();                                                                                              // 6407
          if (this.options.deepLink && window.location.hash === '#' + this.id) {                                       // 6408
            $(window).one('load.zf.reveal', this.open.bind(this));                                                     // 6409
          }                                                                                                            // 6410
        }                                                                                                              // 6411
                                                                                                                       //
        return _init;                                                                                                  // 6373
      }()                                                                                                              // 6373
                                                                                                                       //
      /**                                                                                                              //
       * Creates an overlay div to display behind the modal.                                                           //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6371
      key: '_makeOverlay',                                                                                             // 6419
      value: function () {                                                                                             // 6420
        function _makeOverlay(id) {                                                                                    // 6420
          var $overlay = $('<div></div>').addClass('reveal-overlay').appendTo('body');                                 // 6421
          return $overlay;                                                                                             // 6422
        }                                                                                                              // 6423
                                                                                                                       //
        return _makeOverlay;                                                                                           // 6420
      }()                                                                                                              // 6420
                                                                                                                       //
      /**                                                                                                              //
       * Updates position of modal                                                                                     //
       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter                           //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6418
      key: '_updatePosition',                                                                                          // 6432
      value: function () {                                                                                             // 6433
        function _updatePosition() {                                                                                   // 6433
          var width = this.$element.outerWidth();                                                                      // 6434
          var outerWidth = $(window).width();                                                                          // 6435
          var height = this.$element.outerHeight();                                                                    // 6436
          var outerHeight = $(window).height();                                                                        // 6437
          var left, top;                                                                                               // 6438
          if (this.options.hOffset === 'auto') {                                                                       // 6439
            left = parseInt((outerWidth - width) / 2, 10);                                                             // 6440
          } else {                                                                                                     // 6441
            left = parseInt(this.options.hOffset, 10);                                                                 // 6442
          }                                                                                                            // 6443
          if (this.options.vOffset === 'auto') {                                                                       // 6444
            if (height > outerHeight) {                                                                                // 6445
              top = parseInt(Math.min(100, outerHeight / 10), 10);                                                     // 6446
            } else {                                                                                                   // 6447
              top = parseInt((outerHeight - height) / 4, 10);                                                          // 6448
            }                                                                                                          // 6449
          } else {                                                                                                     // 6450
            top = parseInt(this.options.vOffset, 10);                                                                  // 6451
          }                                                                                                            // 6452
          this.$element.css({ top: top + 'px' });                                                                      // 6453
          // only worry about left if we don't have an overlay or we havea  horizontal offset,                         //
          // otherwise we're perfectly in the middle                                                                   //
          if (!this.$overlay || this.options.hOffset !== 'auto') {                                                     // 6456
            this.$element.css({ left: left + 'px' });                                                                  // 6457
            this.$element.css({ margin: '0px' });                                                                      // 6458
          }                                                                                                            // 6459
        }                                                                                                              // 6460
                                                                                                                       //
        return _updatePosition;                                                                                        // 6433
      }()                                                                                                              // 6433
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for the modal.                                                                            //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6431
      key: '_events',                                                                                                  // 6468
      value: function () {                                                                                             // 6469
        function _events() {                                                                                           // 6469
          var _this2 = this;                                                                                           // 6470
                                                                                                                       //
          var _this = this;                                                                                            // 6472
                                                                                                                       //
          this.$element.on({                                                                                           // 6474
            'open.zf.trigger': this.open.bind(this),                                                                   // 6475
            'close.zf.trigger': function () {                                                                          // 6476
              function closeZfTrigger(event, $element) {                                                               // 6476
                if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {
                  // only close reveal when it's explicitly called                                                     //
                  return _this2.close.apply(_this2);                                                                   // 6479
                }                                                                                                      // 6480
              }                                                                                                        // 6481
                                                                                                                       //
              return closeZfTrigger;                                                                                   // 6476
            }(),                                                                                                       // 6476
            'toggle.zf.trigger': this.toggle.bind(this),                                                               // 6482
            'resizeme.zf.trigger': function () {                                                                       // 6483
              function resizemeZfTrigger() {                                                                           // 6483
                _this._updatePosition();                                                                               // 6484
              }                                                                                                        // 6485
                                                                                                                       //
              return resizemeZfTrigger;                                                                                // 6483
            }()                                                                                                        // 6483
          });                                                                                                          // 6474
                                                                                                                       //
          if (this.$anchor.length) {                                                                                   // 6488
            this.$anchor.on('keydown.zf.reveal', function (e) {                                                        // 6489
              if (e.which === 13 || e.which === 32) {                                                                  // 6490
                e.stopPropagation();                                                                                   // 6491
                e.preventDefault();                                                                                    // 6492
                _this.open();                                                                                          // 6493
              }                                                                                                        // 6494
            });                                                                                                        // 6495
          }                                                                                                            // 6496
                                                                                                                       //
          if (this.options.closeOnClick && this.options.overlay) {                                                     // 6498
            this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {                                       // 6499
              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {                         // 6500
                return;                                                                                                // 6501
              }                                                                                                        // 6502
              _this.close();                                                                                           // 6503
            });                                                                                                        // 6504
          }                                                                                                            // 6505
          if (this.options.deepLink) {                                                                                 // 6506
            $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));                               // 6507
          }                                                                                                            // 6508
        }                                                                                                              // 6509
                                                                                                                       //
        return _events;                                                                                                // 6469
      }()                                                                                                              // 6469
                                                                                                                       //
      /**                                                                                                              //
       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6467
      key: '_handleState',                                                                                             // 6517
      value: function () {                                                                                             // 6518
        function _handleState(e) {                                                                                     // 6518
          if (window.location.hash === '#' + this.id && !this.isActive) {                                              // 6519
            this.open();                                                                                               // 6520
          } else {                                                                                                     // 6521
            this.close();                                                                                              // 6522
          }                                                                                                            // 6523
        }                                                                                                              // 6524
                                                                                                                       //
        return _handleState;                                                                                           // 6518
      }()                                                                                                              // 6518
                                                                                                                       //
      /**                                                                                                              //
       * Opens the modal controlled by `this.$anchor`, and closes all others by default.                               //
       * @function                                                                                                     //
       * @fires Reveal#closeme                                                                                         //
       * @fires Reveal#open                                                                                            //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6516
      key: 'open',                                                                                                     // 6534
      value: function () {                                                                                             // 6535
        function open() {                                                                                              // 6535
          var _this3 = this;                                                                                           // 6536
                                                                                                                       //
          if (this.options.deepLink) {                                                                                 // 6538
            var hash = '#' + this.id;                                                                                  // 6539
                                                                                                                       //
            if (window.history.pushState) {                                                                            // 6541
              window.history.pushState(null, null, hash);                                                              // 6542
            } else {                                                                                                   // 6543
              window.location.hash = hash;                                                                             // 6544
            }                                                                                                          // 6545
          }                                                                                                            // 6546
                                                                                                                       //
          this.isActive = true;                                                                                        // 6548
                                                                                                                       //
          // Make elements invisible, but remove display: none so we can get size and positioning                      //
          this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);                                           // 6551
          if (this.options.overlay) {                                                                                  // 6552
            this.$overlay.css({ 'visibility': 'hidden' }).show();                                                      // 6553
          }                                                                                                            // 6554
                                                                                                                       //
          this._updatePosition();                                                                                      // 6556
                                                                                                                       //
          this.$element.hide().css({ 'visibility': '' });                                                              // 6558
                                                                                                                       //
          if (this.$overlay) {                                                                                         // 6560
            this.$overlay.css({ 'visibility': '' }).hide();                                                            // 6561
            if (this.$element.hasClass('fast')) {                                                                      // 6562
              this.$overlay.addClass('fast');                                                                          // 6563
            } else if (this.$element.hasClass('slow')) {                                                               // 6564
              this.$overlay.addClass('slow');                                                                          // 6565
            }                                                                                                          // 6566
          }                                                                                                            // 6567
                                                                                                                       //
          if (!this.options.multipleOpened) {                                                                          // 6569
            /**                                                                                                        //
             * Fires immediately before the modal opens.                                                               //
             * Closes any other modals that are currently open                                                         //
             * @event Reveal#closeme                                                                                   //
             */                                                                                                        //
            this.$element.trigger('closeme.zf.reveal', this.id);                                                       // 6575
          }                                                                                                            // 6576
          // Motion UI method of reveal                                                                                //
          if (this.options.animationIn) {                                                                              // 6578
            var _this;                                                                                                 // 6579
                                                                                                                       //
            (function () {                                                                                             // 6581
              var afterAnimationFocus = function () {                                                                  // 6582
                function afterAnimationFocus() {                                                                       // 6582
                  _this.$element.attr({                                                                                // 6583
                    'aria-hidden': false,                                                                              // 6584
                    'tabindex': -1                                                                                     // 6585
                  }).focus();                                                                                          // 6583
                  console.log('focus');                                                                                // 6587
                }                                                                                                      // 6588
                                                                                                                       //
                return afterAnimationFocus;                                                                            // 6582
              }();                                                                                                     // 6582
                                                                                                                       //
              _this = _this3;                                                                                          // 6590
                                                                                                                       //
              if (_this3.options.overlay) {                                                                            // 6592
                Foundation.Motion.animateIn(_this3.$overlay, 'fade-in');                                               // 6593
              }                                                                                                        // 6594
              Foundation.Motion.animateIn(_this3.$element, _this3.options.animationIn, function () {                   // 6595
                _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);                         // 6596
                afterAnimationFocus();                                                                                 // 6597
              });                                                                                                      // 6598
            })();                                                                                                      // 6599
          }                                                                                                            // 6600
          // jQuery method of reveal                                                                                   //
          else {                                                                                                       // 6578
              if (this.options.overlay) {                                                                              // 6603
                this.$overlay.show(0);                                                                                 // 6604
              }                                                                                                        // 6605
              this.$element.show(this.options.showDelay);                                                              // 6606
            }                                                                                                          // 6607
                                                                                                                       //
          // handle accessibility                                                                                      //
          this.$element.attr({                                                                                         // 6610
            'aria-hidden': false,                                                                                      // 6611
            'tabindex': -1                                                                                             // 6612
          }).focus();                                                                                                  // 6610
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the modal has successfully opened.                                                             //
           * @event Reveal#open                                                                                        //
           */                                                                                                          //
          this.$element.trigger('open.zf.reveal');                                                                     // 6619
                                                                                                                       //
          if (this.isMobile) {                                                                                         // 6621
            this.originalScrollPos = window.pageYOffset;                                                               // 6622
            $('html, body').addClass('is-reveal-open');                                                                // 6623
          } else {                                                                                                     // 6624
            $('body').addClass('is-reveal-open');                                                                      // 6625
          }                                                                                                            // 6626
                                                                                                                       //
          setTimeout(function () {                                                                                     // 6628
            _this3._extraHandlers();                                                                                   // 6629
          }, 0);                                                                                                       // 6630
        }                                                                                                              // 6631
                                                                                                                       //
        return open;                                                                                                   // 6535
      }()                                                                                                              // 6535
                                                                                                                       //
      /**                                                                                                              //
       * Adds extra event handlers for the body and window if necessary.                                               //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6533
      key: '_extraHandlers',                                                                                           // 6639
      value: function () {                                                                                             // 6640
        function _extraHandlers() {                                                                                    // 6640
          var _this = this;                                                                                            // 6641
          this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);                                   // 6642
                                                                                                                       //
          if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {                        // 6644
            $('body').on('click.zf.reveal', function (e) {                                                             // 6645
              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {                         // 6646
                return;                                                                                                // 6647
              }                                                                                                        // 6648
              _this.close();                                                                                           // 6649
            });                                                                                                        // 6650
          }                                                                                                            // 6651
                                                                                                                       //
          if (this.options.closeOnEsc) {                                                                               // 6653
            $(window).on('keydown.zf.reveal', function (e) {                                                           // 6654
              Foundation.Keyboard.handleKey(e, 'Reveal', {                                                             // 6655
                close: function () {                                                                                   // 6656
                  function close() {                                                                                   // 6656
                    if (_this.options.closeOnEsc) {                                                                    // 6657
                      _this.close();                                                                                   // 6658
                      _this.$anchor.focus();                                                                           // 6659
                    }                                                                                                  // 6660
                  }                                                                                                    // 6661
                                                                                                                       //
                  return close;                                                                                        // 6656
                }()                                                                                                    // 6656
              });                                                                                                      // 6655
            });                                                                                                        // 6663
          }                                                                                                            // 6664
                                                                                                                       //
          // lock focus within modal while tabbing                                                                     //
          this.$element.on('keydown.zf.reveal', function (e) {                                                         // 6667
            var $target = $(this);                                                                                     // 6668
            // handle keyboard event with keyboard util                                                                //
            Foundation.Keyboard.handleKey(e, 'Reveal', {                                                               // 6670
              tab_forward: function () {                                                                               // 6671
                function tab_forward() {                                                                               // 6671
                  if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) {                              // 6672
                    // left modal downwards, setting focus to first element                                            //
                    _this.focusableElements.eq(0).focus();                                                             // 6674
                    return true;                                                                                       // 6675
                  }                                                                                                    // 6676
                  if (_this.focusableElements.length === 0) {                                                          // 6677
                    // no focusable elements inside the modal at all, prevent tabbing in general                       //
                    return true;                                                                                       // 6679
                  }                                                                                                    // 6680
                }                                                                                                      // 6681
                                                                                                                       //
                return tab_forward;                                                                                    // 6671
              }(),                                                                                                     // 6671
              tab_backward: function () {                                                                              // 6682
                function tab_backward() {                                                                              // 6682
                  if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) {
                    // left modal upwards, setting focus to last element                                               //
                    _this.focusableElements.eq(-1).focus();                                                            // 6685
                    return true;                                                                                       // 6686
                  }                                                                                                    // 6687
                  if (_this.focusableElements.length === 0) {                                                          // 6688
                    // no focusable elements inside the modal at all, prevent tabbing in general                       //
                    return true;                                                                                       // 6690
                  }                                                                                                    // 6691
                }                                                                                                      // 6692
                                                                                                                       //
                return tab_backward;                                                                                   // 6682
              }(),                                                                                                     // 6682
              open: function () {                                                                                      // 6693
                function open() {                                                                                      // 6693
                  if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {                         // 6694
                    setTimeout(function () {                                                                           // 6695
                      // set focus back to anchor if close button has been activated                                   //
                      _this.$anchor.focus();                                                                           // 6697
                    }, 1);                                                                                             // 6698
                  } else if ($target.is(_this.focusableElements)) {                                                    // 6699
                    // dont't trigger if acual element has focus (i.e. inputs, links, ...)                             //
                    _this.open();                                                                                      // 6701
                  }                                                                                                    // 6702
                }                                                                                                      // 6703
                                                                                                                       //
                return open;                                                                                           // 6693
              }(),                                                                                                     // 6693
              close: function () {                                                                                     // 6704
                function close() {                                                                                     // 6704
                  if (_this.options.closeOnEsc) {                                                                      // 6705
                    _this.close();                                                                                     // 6706
                    _this.$anchor.focus();                                                                             // 6707
                  }                                                                                                    // 6708
                }                                                                                                      // 6709
                                                                                                                       //
                return close;                                                                                          // 6704
              }(),                                                                                                     // 6704
              handled: function () {                                                                                   // 6710
                function handled(preventDefault) {                                                                     // 6710
                  if (preventDefault) {                                                                                // 6711
                    e.preventDefault();                                                                                // 6712
                  }                                                                                                    // 6713
                }                                                                                                      // 6714
                                                                                                                       //
                return handled;                                                                                        // 6710
              }()                                                                                                      // 6710
            });                                                                                                        // 6670
          });                                                                                                          // 6716
        }                                                                                                              // 6717
                                                                                                                       //
        return _extraHandlers;                                                                                         // 6640
      }()                                                                                                              // 6640
                                                                                                                       //
      /**                                                                                                              //
       * Closes the modal.                                                                                             //
       * @function                                                                                                     //
       * @fires Reveal#closed                                                                                          //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6638
      key: 'close',                                                                                                    // 6726
      value: function () {                                                                                             // 6727
        function close() {                                                                                             // 6727
          if (!this.isActive || !this.$element.is(':visible')) {                                                       // 6728
            return false;                                                                                              // 6729
          }                                                                                                            // 6730
          var _this = this;                                                                                            // 6731
                                                                                                                       //
          // Motion UI method of hiding                                                                                //
          if (this.options.animationOut) {                                                                             // 6734
            if (this.options.overlay) {                                                                                // 6735
              Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);                                       // 6736
            } else {                                                                                                   // 6737
              finishUp();                                                                                              // 6738
            }                                                                                                          // 6739
                                                                                                                       //
            Foundation.Motion.animateOut(this.$element, this.options.animationOut);                                    // 6741
          }                                                                                                            // 6742
          // jQuery method of hiding                                                                                   //
          else {                                                                                                       // 6734
              if (this.options.overlay) {                                                                              // 6745
                this.$overlay.hide(0, finishUp);                                                                       // 6746
              } else {                                                                                                 // 6747
                finishUp();                                                                                            // 6748
              }                                                                                                        // 6749
                                                                                                                       //
              this.$element.hide(this.options.hideDelay);                                                              // 6751
            }                                                                                                          // 6752
                                                                                                                       //
          // Conditionals to remove extra event listeners added on open                                                //
          if (this.options.closeOnEsc) {                                                                               // 6755
            $(window).off('keydown.zf.reveal');                                                                        // 6756
          }                                                                                                            // 6757
                                                                                                                       //
          if (!this.options.overlay && this.options.closeOnClick) {                                                    // 6759
            $('body').off('click.zf.reveal');                                                                          // 6760
          }                                                                                                            // 6761
                                                                                                                       //
          this.$element.off('keydown.zf.reveal');                                                                      // 6763
                                                                                                                       //
          function finishUp() {                                                                                        // 6765
            if (_this.isMobile) {                                                                                      // 6766
              $('html, body').removeClass('is-reveal-open');                                                           // 6767
              if (_this.originalScrollPos) {                                                                           // 6768
                $('body').scrollTop(_this.originalScrollPos);                                                          // 6769
                _this.originalScrollPos = null;                                                                        // 6770
              }                                                                                                        // 6771
            } else {                                                                                                   // 6772
              $('body').removeClass('is-reveal-open');                                                                 // 6773
            }                                                                                                          // 6774
                                                                                                                       //
            _this.$element.attr('aria-hidden', true);                                                                  // 6776
                                                                                                                       //
            /**                                                                                                        //
            * Fires when the modal is done closing.                                                                    //
            * @event Reveal#closed                                                                                     //
            */                                                                                                         //
            _this.$element.trigger('closed.zf.reveal');                                                                // 6782
          }                                                                                                            // 6783
                                                                                                                       //
          /**                                                                                                          //
          * Resets the modal content                                                                                   //
          * This prevents a running video to keep going in the background                                              //
          */                                                                                                           //
          if (this.options.resetOnClose) {                                                                             // 6789
            this.$element.html(this.$element.html());                                                                  // 6790
          }                                                                                                            // 6791
                                                                                                                       //
          this.isActive = false;                                                                                       // 6793
          if (_this.options.deepLink) {                                                                                // 6794
            if (window.history.replaceState) {                                                                         // 6795
              window.history.replaceState("", document.title, window.location.pathname);                               // 6796
            } else {                                                                                                   // 6797
              window.location.hash = '';                                                                               // 6798
            }                                                                                                          // 6799
          }                                                                                                            // 6800
        }                                                                                                              // 6801
                                                                                                                       //
        return close;                                                                                                  // 6727
      }()                                                                                                              // 6727
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the open/closed state of a modal.                                                                     //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 6725
      key: 'toggle',                                                                                                   // 6809
      value: function () {                                                                                             // 6810
        function toggle() {                                                                                            // 6810
          if (this.isActive) {                                                                                         // 6811
            this.close();                                                                                              // 6812
          } else {                                                                                                     // 6813
            this.open();                                                                                               // 6814
          }                                                                                                            // 6815
        }                                                                                                              // 6816
                                                                                                                       //
        return toggle;                                                                                                 // 6810
      }()                                                                                                              // 6810
    }, {                                                                                                               // 6808
      key: 'destroy',                                                                                                  // 6818
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of a modal.                                                                              //
       * @function                                                                                                     //
       */                                                                                                              //
      value: function () {                                                                                             // 6825
        function destroy() {                                                                                           // 6825
          if (this.options.overlay) {                                                                                  // 6826
            this.$element.appendTo($('body')); // move $element outside of $overlay to prevent error unregisterPlugin()
            this.$overlay.hide().off().remove();                                                                       // 6828
          }                                                                                                            // 6829
          this.$element.hide().off();                                                                                  // 6830
          this.$anchor.off('.zf');                                                                                     // 6831
          $(window).off('.zf.reveal:' + this.id);                                                                      // 6832
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 6834
        }                                                                                                              // 6835
                                                                                                                       //
        return destroy;                                                                                                // 6825
      }()                                                                                                              // 6825
    }]);                                                                                                               // 6817
                                                                                                                       //
    return Reveal;                                                                                                     // 6838
  }();                                                                                                                 // 6839
                                                                                                                       //
  Reveal.defaults = {                                                                                                  // 6841
    /**                                                                                                                //
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.                       //
     * @option                                                                                                         //
     * @example 'slide-in-left'                                                                                        //
     */                                                                                                                //
    animationIn: '',                                                                                                   // 6847
    /**                                                                                                                //
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.                       //
     * @option                                                                                                         //
     * @example 'slide-out-right'                                                                                      //
     */                                                                                                                //
    animationOut: '',                                                                                                  // 6853
    /**                                                                                                                //
     * Time, in ms, to delay the opening of a modal after a click if no animation used.                                //
     * @option                                                                                                         //
     * @example 10                                                                                                     //
     */                                                                                                                //
    showDelay: 0,                                                                                                      // 6859
    /**                                                                                                                //
     * Time, in ms, to delay the closing of a modal after a click if no animation used.                                //
     * @option                                                                                                         //
     * @example 10                                                                                                     //
     */                                                                                                                //
    hideDelay: 0,                                                                                                      // 6865
    /**                                                                                                                //
     * Allows a click on the body/overlay to close the modal.                                                          //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    closeOnClick: true,                                                                                                // 6871
    /**                                                                                                                //
     * Allows the modal to close if the user presses the `ESCAPE` key.                                                 //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    closeOnEsc: true,                                                                                                  // 6877
    /**                                                                                                                //
     * If true, allows multiple modals to be displayed at once.                                                        //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    multipleOpened: false,                                                                                             // 6883
    /**                                                                                                                //
     * Distance, in pixels, the modal should push down from the top of the screen.                                     //
     * @option                                                                                                         //
     * @example auto                                                                                                   //
     */                                                                                                                //
    vOffset: 'auto',                                                                                                   // 6889
    /**                                                                                                                //
     * Distance, in pixels, the modal should push in from the side of the screen.                                      //
     * @option                                                                                                         //
     * @example auto                                                                                                   //
     */                                                                                                                //
    hOffset: 'auto',                                                                                                   // 6895
    /**                                                                                                                //
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.    //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    fullScreen: false,                                                                                                 // 6901
    /**                                                                                                                //
     * Percentage of screen height the modal should push up from the bottom of the view.                               //
     * @option                                                                                                         //
     * @example 10                                                                                                     //
     */                                                                                                                //
    btmOffsetPct: 10,                                                                                                  // 6907
    /**                                                                                                                //
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.                        //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    overlay: true,                                                                                                     // 6913
    /**                                                                                                                //
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    resetOnClose: false,                                                                                               // 6919
    /**                                                                                                                //
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    deepLink: false                                                                                                    // 6925
  };                                                                                                                   // 6841
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Reveal, 'Reveal');                                                                                 // 6929
                                                                                                                       //
  function iPhoneSniff() {                                                                                             // 6931
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)                                                      // 6932
    );                                                                                                                 // 6932
  }                                                                                                                    // 6934
                                                                                                                       //
  function androidSniff() {                                                                                            // 6936
    return (/Android/.test(window.navigator.userAgent)                                                                 // 6937
    );                                                                                                                 // 6937
  }                                                                                                                    // 6939
                                                                                                                       //
  function mobileSniff() {                                                                                             // 6941
    return iPhoneSniff() || androidSniff();                                                                            // 6942
  }                                                                                                                    // 6943
}(jQuery);                                                                                                             // 6944
'use strict';                                                                                                          // 6945
                                                                                                                       //
var _createClass = function () {                                                                                       // 6947
  function defineProperties(target, props) {                                                                           // 6947
    for (var i = 0; i < props.length; i++) {                                                                           // 6947
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 6947
  }return function (Constructor, protoProps, staticProps) {                                                            // 6947
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 6947
}();                                                                                                                   // 6947
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 6949
  if (!(instance instanceof Constructor)) {                                                                            // 6949
    throw new TypeError("Cannot call a class as a function");                                                          // 6949
  }                                                                                                                    // 6949
}                                                                                                                      // 6949
                                                                                                                       //
!function ($) {                                                                                                        // 6951
                                                                                                                       //
  /**                                                                                                                  //
   * Slider module.                                                                                                    //
   * @module foundation.slider                                                                                         //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.touch                                                                                   //
   */                                                                                                                  //
                                                                                                                       //
  var Slider = function () {                                                                                           // 6962
    /**                                                                                                                //
     * Creates a new instance of a drilldown menu.                                                                     //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to make into an accordion menu.                                         //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Slider(element, options) {                                                                                // 6970
      _classCallCheck(this, Slider);                                                                                   // 6971
                                                                                                                       //
      this.$element = element;                                                                                         // 6973
      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);                                     // 6974
                                                                                                                       //
      this._init();                                                                                                    // 6976
                                                                                                                       //
      Foundation.registerPlugin(this, 'Slider');                                                                       // 6978
      Foundation.Keyboard.register('Slider', {                                                                         // 6979
        'ltr': {                                                                                                       // 6980
          'ARROW_RIGHT': 'increase',                                                                                   // 6981
          'ARROW_UP': 'increase',                                                                                      // 6982
          'ARROW_DOWN': 'decrease',                                                                                    // 6983
          'ARROW_LEFT': 'decrease',                                                                                    // 6984
          'SHIFT_ARROW_RIGHT': 'increase_fast',                                                                        // 6985
          'SHIFT_ARROW_UP': 'increase_fast',                                                                           // 6986
          'SHIFT_ARROW_DOWN': 'decrease_fast',                                                                         // 6987
          'SHIFT_ARROW_LEFT': 'decrease_fast'                                                                          // 6988
        },                                                                                                             // 6980
        'rtl': {                                                                                                       // 6990
          'ARROW_LEFT': 'increase',                                                                                    // 6991
          'ARROW_RIGHT': 'decrease',                                                                                   // 6992
          'SHIFT_ARROW_LEFT': 'increase_fast',                                                                         // 6993
          'SHIFT_ARROW_RIGHT': 'decrease_fast'                                                                         // 6994
        }                                                                                                              // 6990
      });                                                                                                              // 6979
    }                                                                                                                  // 6997
                                                                                                                       //
    /**                                                                                                                //
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Slider, [{                                                                                            // 7006
      key: '_init',                                                                                                    // 7007
      value: function () {                                                                                             // 7008
        function _init() {                                                                                             // 7008
          this.inputs = this.$element.find('input');                                                                   // 7009
          this.handles = this.$element.find('[data-slider-handle]');                                                   // 7010
                                                                                                                       //
          this.$handle = this.handles.eq(0);                                                                           // 7012
          this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));          // 7013
          this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);    // 7014
                                                                                                                       //
          var isDbl = false,                                                                                           // 7016
              _this = this;                                                                                            // 7016
          if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {                           // 7018
            this.options.disabled = true;                                                                              // 7019
            this.$element.addClass(this.options.disabledClass);                                                        // 7020
          }                                                                                                            // 7021
          if (!this.inputs.length) {                                                                                   // 7022
            this.inputs = $().add(this.$input);                                                                        // 7023
            this.options.binding = true;                                                                               // 7024
          }                                                                                                            // 7025
          this._setInitAttr(0);                                                                                        // 7026
          this._events(this.$handle);                                                                                  // 7027
                                                                                                                       //
          if (this.handles[1]) {                                                                                       // 7029
            this.options.doubleSided = true;                                                                           // 7030
            this.$handle2 = this.handles.eq(1);                                                                        // 7031
            this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));  // 7032
                                                                                                                       //
            if (!this.inputs[1]) {                                                                                     // 7034
              this.inputs = this.inputs.add(this.$input2);                                                             // 7035
            }                                                                                                          // 7036
            isDbl = true;                                                                                              // 7037
                                                                                                                       //
            this._setHandlePos(this.$handle, this.options.initialStart, true, function () {                            // 7039
                                                                                                                       //
              _this._setHandlePos(_this.$handle2, _this.options.initialEnd, true);                                     // 7041
            });                                                                                                        // 7042
            // this.$handle.triggerHandler('click.zf.slider');                                                         //
            this._setInitAttr(1);                                                                                      // 7044
            this._events(this.$handle2);                                                                               // 7045
          }                                                                                                            // 7046
                                                                                                                       //
          if (!isDbl) {                                                                                                // 7048
            this._setHandlePos(this.$handle, this.options.initialStart, true);                                         // 7049
          }                                                                                                            // 7050
        }                                                                                                              // 7051
                                                                                                                       //
        return _init;                                                                                                  // 7008
      }()                                                                                                              // 7008
                                                                                                                       //
      /**                                                                                                              //
       * Sets the position of the selected handle and fill bar.                                                        //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $hndl - the selected handle to move.                                                          //
       * @param {Number} location - floating point between the start and end values of the slider bar.                 //
       * @param {Function} cb - callback function to fire on completion.                                               //
       * @fires Slider#moved                                                                                           //
       * @fires Slider#changed                                                                                         //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7006
      key: '_setHandlePos',                                                                                            // 7065
      value: function () {                                                                                             // 7066
        function _setHandlePos($hndl, location, noInvert, cb) {                                                        // 7066
          // don't move if the slider has been disabled since its initialization                                       //
          if (this.$element.hasClass(this.options.disabledClass)) {                                                    // 7068
            return;                                                                                                    // 7069
          }                                                                                                            // 7070
          //might need to alter that slightly for bars that will have odd number selections.                           //
          location = parseFloat(location); //on input change events, convert string to number...grumble.               // 7072
                                                                                                                       //
          // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
          if (location < this.options.start) {                                                                         // 7075
            location = this.options.start;                                                                             // 7076
          } else if (location > this.options.end) {                                                                    // 7077
            location = this.options.end;                                                                               // 7078
          }                                                                                                            // 7079
                                                                                                                       //
          var isDbl = this.options.doubleSided;                                                                        // 7081
                                                                                                                       //
          if (isDbl) {                                                                                                 // 7083
            //this block is to prevent 2 handles from crossing eachother. Could/should be improved.                    //
            if (this.handles.index($hndl) === 0) {                                                                     // 7085
              var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));                                             // 7086
              location = location >= h2Val ? h2Val - this.options.step : location;                                     // 7087
            } else {                                                                                                   // 7088
              var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));                                              // 7089
              location = location <= h1Val ? h1Val + this.options.step : location;                                     // 7090
            }                                                                                                          // 7091
          }                                                                                                            // 7092
                                                                                                                       //
          //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
          //for click and drag events, it's weird due to the scale(-1, 1) css property                                 //
          if (this.options.vertical && !noInvert) {                                                                    // 7096
            location = this.options.end - location;                                                                    // 7097
          }                                                                                                            // 7098
                                                                                                                       //
          var _this = this,                                                                                            // 7100
              vert = this.options.vertical,                                                                            // 7100
              hOrW = vert ? 'height' : 'width',                                                                        // 7100
              lOrT = vert ? 'top' : 'left',                                                                            // 7100
              handleDim = $hndl[0].getBoundingClientRect()[hOrW],                                                      // 7100
              elemDim = this.$element[0].getBoundingClientRect()[hOrW],                                                // 7100
                                                                                                                       // 7100
                                                                                                                       //
          //percentage of bar min/max value based on click or drag point                                               //
          pctOfBar = percent(location - this.options.start, this.options.end - this.options.start).toFixed(2),         // 7108
                                                                                                                       // 7100
                                                                                                                       //
          //number of actual pixels to shift the handle, based on the percentage obtained above                        //
          pxToMove = (elemDim - handleDim) * pctOfBar,                                                                 // 7111
                                                                                                                       // 7100
                                                                                                                       //
          //percentage of bar to shift the handle                                                                      //
          movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);                                 // 7114
          //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
          location = parseFloat(location.toFixed(this.options.decimal));                                               // 7116
          // declare empty object for css adjustments, only used with 2 handled-sliders                                //
          var css = {};                                                                                                // 7118
                                                                                                                       //
          this._setValues($hndl, location);                                                                            // 7120
                                                                                                                       //
          // TODO update to calculate based on values set to respective inputs??                                       //
          if (isDbl) {                                                                                                 // 7123
            var isLeftHndl = this.handles.index($hndl) === 0,                                                          // 7124
                                                                                                                       // 7124
                                                                                                                       //
            //empty variable, will be used for min-height/width for fill bar                                           //
            dim,                                                                                                       // 7127
                                                                                                                       // 7124
                                                                                                                       //
            //percentage w/h of the handle compared to the slider bar                                                  //
            handlePct = ~~(percent(handleDim, elemDim) * 100);                                                         // 7130
            //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
            if (isLeftHndl) {                                                                                          // 7132
              //left or top percentage value to apply to the fill bar.                                                 //
              css[lOrT] = movement + '%';                                                                              // 7134
              //calculate the new min-height/width for the fill bar.                                                   //
              dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;                                   // 7136
              //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
              //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.                        //
              if (cb && typeof cb === 'function') {                                                                    // 7139
                cb();                                                                                                  // 7140
              } //this is only needed for the initialization of 2 handled sliders                                      // 7141
            } else {                                                                                                   // 7142
                //just caching the value of the left/bottom handle's left/top property                                 //
                var handlePos = parseFloat(this.$handle[0].style[lOrT]);                                               // 7144
                //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
                //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
                dim = movement - (isNaN(handlePos) ? this.options.initialStart / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
              }                                                                                                        // 7148
            // assign the min-height/width to our css object                                                           //
            css['min-' + hOrW] = dim + '%';                                                                            // 7150
          }                                                                                                            // 7151
                                                                                                                       //
          this.$element.one('finished.zf.animate', function () {                                                       // 7153
            /**                                                                                                        //
             * Fires when the handle is done moving.                                                                   //
             * @event Slider#moved                                                                                     //
             */                                                                                                        //
            _this.$element.trigger('moved.zf.slider', [$hndl]);                                                        // 7158
          });                                                                                                          // 7159
                                                                                                                       //
          //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
          var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;                           // 7162
                                                                                                                       //
          Foundation.Move(moveTime, $hndl, function () {                                                               // 7164
            //adjusting the left/top property of the handle, based on the percentage calculated above                  //
            $hndl.css(lOrT, movement + '%');                                                                           // 7166
                                                                                                                       //
            if (!_this.options.doubleSided) {                                                                          // 7168
              //if single-handled, a simple method to expand the fill bar                                              //
              _this.$fill.css(hOrW, pctOfBar * 100 + '%');                                                             // 7170
            } else {                                                                                                   // 7171
              //otherwise, use the css object we created above                                                         //
              _this.$fill.css(css);                                                                                    // 7173
            }                                                                                                          // 7174
          });                                                                                                          // 7175
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the value has not been change for a given time.                                                //
           * @event Slider#changed                                                                                     //
           */                                                                                                          //
          clearTimeout(_this.timeout);                                                                                 // 7181
          _this.timeout = setTimeout(function () {                                                                     // 7182
            _this.$element.trigger('changed.zf.slider', [$hndl]);                                                      // 7183
          }, _this.options.changedDelay);                                                                              // 7184
        }                                                                                                              // 7185
                                                                                                                       //
        return _setHandlePos;                                                                                          // 7066
      }()                                                                                                              // 7066
                                                                                                                       //
      /**                                                                                                              //
       * Sets the initial attribute for the slider element.                                                            //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {Number} idx - index of the current handle/input to use.                                               //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7064
      key: '_setInitAttr',                                                                                             // 7195
      value: function () {                                                                                             // 7196
        function _setInitAttr(idx) {                                                                                   // 7196
          var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');                              // 7197
          this.inputs.eq(idx).attr({                                                                                   // 7198
            'id': id,                                                                                                  // 7199
            'max': this.options.end,                                                                                   // 7200
            'min': this.options.start,                                                                                 // 7201
            'step': this.options.step                                                                                  // 7202
          });                                                                                                          // 7198
          this.handles.eq(idx).attr({                                                                                  // 7204
            'role': 'slider',                                                                                          // 7205
            'aria-controls': id,                                                                                       // 7206
            'aria-valuemax': this.options.end,                                                                         // 7207
            'aria-valuemin': this.options.start,                                                                       // 7208
            'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,                          // 7209
            'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',                                     // 7210
            'tabindex': 0                                                                                              // 7211
          });                                                                                                          // 7204
        }                                                                                                              // 7213
                                                                                                                       //
        return _setInitAttr;                                                                                           // 7196
      }()                                                                                                              // 7196
                                                                                                                       //
      /**                                                                                                              //
       * Sets the input and `aria-valuenow` values for the slider element.                                             //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $handle - the currently selected handle.                                                      //
       * @param {Number} val - floating point of the new value.                                                        //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7194
      key: '_setValues',                                                                                               // 7224
      value: function () {                                                                                             // 7225
        function _setValues($handle, val) {                                                                            // 7225
          var idx = this.options.doubleSided ? this.handles.index($handle) : 0;                                        // 7226
          this.inputs.eq(idx).val(val);                                                                                // 7227
          $handle.attr('aria-valuenow', val);                                                                          // 7228
        }                                                                                                              // 7229
                                                                                                                       //
        return _setValues;                                                                                             // 7225
      }()                                                                                                              // 7225
                                                                                                                       //
      /**                                                                                                              //
       * Handles events on the slider element.                                                                         //
       * Calculates the new location of the current handle.                                                            //
       * If there are two handles and the bar was clicked, it determines which handle to move.                         //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {Object} e - the `event` object passed from the listener.                                              //
       * @param {jQuery} $handle - the current handle to calculate for, if selected.                                   //
       * @param {Number} val - floating point number for the new value of the slider.                                  //
       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7223
      key: '_handleEvent',                                                                                             // 7244
      value: function () {                                                                                             // 7245
        function _handleEvent(e, $handle, val) {                                                                       // 7245
          var value, hasVal;                                                                                           // 7246
          if (!val) {                                                                                                  // 7247
            //click or drag events                                                                                     //
            e.preventDefault();                                                                                        // 7249
            var _this = this,                                                                                          // 7250
                vertical = this.options.vertical,                                                                      // 7250
                param = vertical ? 'height' : 'width',                                                                 // 7250
                direction = vertical ? 'top' : 'left',                                                                 // 7250
                eventOffset = vertical ? e.pageY : e.pageX,                                                            // 7250
                halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,                                     // 7250
                barDim = this.$element[0].getBoundingClientRect()[param],                                              // 7250
                windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();                              // 7250
                                                                                                                       //
            var elemOffset = this.$element.offset()[direction];                                                        // 7259
                                                                                                                       //
            // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
            // best way to guess this is simulated is if clientY == pageY                                              //
            if (e.clientY === e.pageY) {                                                                               // 7263
              eventOffset = eventOffset + windowScroll;                                                                // 7264
            }                                                                                                          // 7265
            var eventFromBar = eventOffset - elemOffset;                                                               // 7266
            var barXY;                                                                                                 // 7267
            if (eventFromBar < 0) {                                                                                    // 7268
              barXY = 0;                                                                                               // 7269
            } else if (eventFromBar > barDim) {                                                                        // 7270
              barXY = barDim;                                                                                          // 7271
            } else {                                                                                                   // 7272
              barXY = eventFromBar;                                                                                    // 7273
            }                                                                                                          // 7274
            offsetPct = percent(barXY, barDim);                                                                        // 7275
                                                                                                                       //
            value = (this.options.end - this.options.start) * offsetPct + this.options.start;                          // 7277
                                                                                                                       //
            // turn everything around for RTL, yay math!                                                               //
            if (Foundation.rtl() && !this.options.vertical) {                                                          // 7280
              value = this.options.end - value;                                                                        // 7281
            }                                                                                                          // 7282
                                                                                                                       //
            value = _this._adjustValue(null, value);                                                                   // 7284
            //boolean flag for the setHandlePos fn, specifically for vertical sliders                                  //
            hasVal = false;                                                                                            // 7286
                                                                                                                       //
            if (!$handle) {                                                                                            // 7288
              //figure out which handle it is, pass it to the next function.                                           //
              var firstHndlPos = absPosition(this.$handle, direction, barXY, param),                                   // 7290
                  secndHndlPos = absPosition(this.$handle2, direction, barXY, param);                                  // 7290
              $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;                                   // 7292
            }                                                                                                          // 7293
          } else {                                                                                                     // 7294
            //change event on input                                                                                    //
            value = this._adjustValue(null, val);                                                                      // 7296
            hasVal = true;                                                                                             // 7297
          }                                                                                                            // 7298
                                                                                                                       //
          this._setHandlePos($handle, value, hasVal);                                                                  // 7300
        }                                                                                                              // 7301
                                                                                                                       //
        return _handleEvent;                                                                                           // 7245
      }()                                                                                                              // 7245
                                                                                                                       //
      /**                                                                                                              //
       * Adjustes value for handle in regard to step value. returns adjusted value                                     //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $handle - the selected handle.                                                                //
       * @param {Number} value - value to adjust. used if $handle is falsy                                             //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7243
      key: '_adjustValue',                                                                                             // 7312
      value: function () {                                                                                             // 7313
        function _adjustValue($handle, value) {                                                                        // 7313
          var val,                                                                                                     // 7314
              step = this.options.step,                                                                                // 7314
              div = parseFloat(step / 2),                                                                              // 7314
              left,                                                                                                    // 7314
              prev_val,                                                                                                // 7314
              next_val;                                                                                                // 7314
          if (!!$handle) {                                                                                             // 7320
            val = parseFloat($handle.attr('aria-valuenow'));                                                           // 7321
          } else {                                                                                                     // 7322
            val = value;                                                                                               // 7323
          }                                                                                                            // 7324
          left = val % step;                                                                                           // 7325
          prev_val = val - left;                                                                                       // 7326
          next_val = prev_val + step;                                                                                  // 7327
          if (left === 0) {                                                                                            // 7328
            return val;                                                                                                // 7329
          }                                                                                                            // 7330
          val = val >= prev_val + div ? next_val : prev_val;                                                           // 7331
          return val;                                                                                                  // 7332
        }                                                                                                              // 7333
                                                                                                                       //
        return _adjustValue;                                                                                           // 7313
      }()                                                                                                              // 7313
                                                                                                                       //
      /**                                                                                                              //
       * Adds event listeners to the slider elements.                                                                  //
       * @function                                                                                                     //
       * @private                                                                                                      //
       * @param {jQuery} $handle - the current handle to apply listeners to.                                           //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7311
      key: '_events',                                                                                                  // 7343
      value: function () {                                                                                             // 7344
        function _events($handle) {                                                                                    // 7344
          var _this = this,                                                                                            // 7345
              curHandle,                                                                                               // 7345
              timer;                                                                                                   // 7345
                                                                                                                       //
          this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {                                    // 7349
            var idx = _this.inputs.index($(this));                                                                     // 7350
            _this._handleEvent(e, _this.handles.eq(idx), $(this).val());                                               // 7351
          });                                                                                                          // 7352
                                                                                                                       //
          if (this.options.clickSelect) {                                                                              // 7354
            this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {                                  // 7355
              if (_this.$element.data('dragging')) {                                                                   // 7356
                return false;                                                                                          // 7357
              }                                                                                                        // 7358
                                                                                                                       //
              if (!$(e.target).is('[data-slider-handle]')) {                                                           // 7360
                if (_this.options.doubleSided) {                                                                       // 7361
                  _this._handleEvent(e);                                                                               // 7362
                } else {                                                                                               // 7363
                  _this._handleEvent(e, _this.$handle);                                                                // 7364
                }                                                                                                      // 7365
              }                                                                                                        // 7366
            });                                                                                                        // 7367
          }                                                                                                            // 7368
                                                                                                                       //
          if (this.options.draggable) {                                                                                // 7370
            this.handles.addTouch();                                                                                   // 7371
                                                                                                                       //
            var $body = $('body');                                                                                     // 7373
            $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {                                // 7374
              $handle.addClass('is-dragging');                                                                         // 7375
              _this.$fill.addClass('is-dragging'); //                                                                  // 7376
              _this.$element.data('dragging', true);                                                                   // 7377
                                                                                                                       //
              curHandle = $(e.currentTarget);                                                                          // 7379
                                                                                                                       //
              $body.on('mousemove.zf.slider', function (e) {                                                           // 7381
                e.preventDefault();                                                                                    // 7382
                _this._handleEvent(e, curHandle);                                                                      // 7383
              }).on('mouseup.zf.slider', function (e) {                                                                // 7384
                _this._handleEvent(e, curHandle);                                                                      // 7385
                                                                                                                       //
                $handle.removeClass('is-dragging');                                                                    // 7387
                _this.$fill.removeClass('is-dragging');                                                                // 7388
                _this.$element.data('dragging', false);                                                                // 7389
                                                                                                                       //
                $body.off('mousemove.zf.slider mouseup.zf.slider');                                                    // 7391
              });                                                                                                      // 7392
            })                                                                                                         // 7393
            // prevent events triggered by touch                                                                       //
            .on('selectstart.zf.slider touchmove.zf.slider', function (e) {                                            // 7374
              e.preventDefault();                                                                                      // 7396
            });                                                                                                        // 7397
          }                                                                                                            // 7398
                                                                                                                       //
          $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {                                      // 7400
            var _$handle = $(this),                                                                                    // 7401
                idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,                                   // 7401
                oldValue = parseFloat(_this.inputs.eq(idx).val()),                                                     // 7401
                newValue;                                                                                              // 7401
                                                                                                                       //
            // handle keyboard event with keyboard util                                                                //
            Foundation.Keyboard.handleKey(e, 'Slider', {                                                               // 7407
              decrease: function () {                                                                                  // 7408
                function decrease() {                                                                                  // 7408
                  newValue = oldValue - _this.options.step;                                                            // 7409
                }                                                                                                      // 7410
                                                                                                                       //
                return decrease;                                                                                       // 7408
              }(),                                                                                                     // 7408
              increase: function () {                                                                                  // 7411
                function increase() {                                                                                  // 7411
                  newValue = oldValue + _this.options.step;                                                            // 7412
                }                                                                                                      // 7413
                                                                                                                       //
                return increase;                                                                                       // 7411
              }(),                                                                                                     // 7411
              decrease_fast: function () {                                                                             // 7414
                function decrease_fast() {                                                                             // 7414
                  newValue = oldValue - _this.options.step * 10;                                                       // 7415
                }                                                                                                      // 7416
                                                                                                                       //
                return decrease_fast;                                                                                  // 7414
              }(),                                                                                                     // 7414
              increase_fast: function () {                                                                             // 7417
                function increase_fast() {                                                                             // 7417
                  newValue = oldValue + _this.options.step * 10;                                                       // 7418
                }                                                                                                      // 7419
                                                                                                                       //
                return increase_fast;                                                                                  // 7417
              }(),                                                                                                     // 7417
              handled: function () {                                                                                   // 7420
                function handled() {                                                                                   // 7420
                  // only set handle pos when event was handled specially                                              //
                  e.preventDefault();                                                                                  // 7422
                  _this._setHandlePos(_$handle, newValue, true);                                                       // 7423
                }                                                                                                      // 7424
                                                                                                                       //
                return handled;                                                                                        // 7420
              }()                                                                                                      // 7420
            });                                                                                                        // 7407
            /*if (newValue) { // if pressed key has special function, update value                                     //
              e.preventDefault();                                                                                      //
              _this._setHandlePos(_$handle, newValue);                                                                 //
            }*/                                                                                                        //
          });                                                                                                          // 7430
        }                                                                                                              // 7431
                                                                                                                       //
        return _events;                                                                                                // 7344
      }()                                                                                                              // 7344
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the slider plugin.                                                                                   //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7342
      key: 'destroy',                                                                                                  // 7438
      value: function () {                                                                                             // 7439
        function destroy() {                                                                                           // 7439
          this.handles.off('.zf.slider');                                                                              // 7440
          this.inputs.off('.zf.slider');                                                                               // 7441
          this.$element.off('.zf.slider');                                                                             // 7442
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 7444
        }                                                                                                              // 7445
                                                                                                                       //
        return destroy;                                                                                                // 7439
      }()                                                                                                              // 7439
    }]);                                                                                                               // 7437
                                                                                                                       //
    return Slider;                                                                                                     // 7448
  }();                                                                                                                 // 7449
                                                                                                                       //
  Slider.defaults = {                                                                                                  // 7451
    /**                                                                                                                //
     * Minimum value for the slider scale.                                                                             //
     * @option                                                                                                         //
     * @example 0                                                                                                      //
     */                                                                                                                //
    start: 0,                                                                                                          // 7457
    /**                                                                                                                //
     * Maximum value for the slider scale.                                                                             //
     * @option                                                                                                         //
     * @example 100                                                                                                    //
     */                                                                                                                //
    end: 100,                                                                                                          // 7463
    /**                                                                                                                //
     * Minimum value change per change event.                                                                          //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    step: 1,                                                                                                           // 7469
    /**                                                                                                                //
     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.                 //
     * @option                                                                                                         //
     * @example 0                                                                                                      //
     */                                                                                                                //
    initialStart: 0,                                                                                                   // 7475
    /**                                                                                                                //
     * Value at which the right handle/second input should be set to on initialization.                                //
     * @option                                                                                                         //
     * @example 100                                                                                                    //
     */                                                                                                                //
    initialEnd: 100,                                                                                                   // 7481
    /**                                                                                                                //
     * Allows the input to be located outside the container and visible. Set to by the JS                              //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    binding: false,                                                                                                    // 7487
    /**                                                                                                                //
     * Allows the user to click/tap on the slider bar to select a value.                                               //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    clickSelect: true,                                                                                                 // 7493
    /**                                                                                                                //
     * Set to true and use the `vertical` class to change alignment to vertical.                                       //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    vertical: false,                                                                                                   // 7499
    /**                                                                                                                //
     * Allows the user to drag the slider handle(s) to select a value.                                                 //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    draggable: true,                                                                                                   // 7505
    /**                                                                                                                //
     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    disabled: false,                                                                                                   // 7511
    /**                                                                                                                //
     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.                           //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    doubleSided: false,                                                                                                // 7517
    /**                                                                                                                //
     * Potential future feature.                                                                                       //
     */                                                                                                                //
    // steps: 100,                                                                                                     //
    /**                                                                                                                //
     * Number of decimal places the plugin should go to for floating point precision.                                  //
     * @option                                                                                                         //
     * @example 2                                                                                                      //
     */                                                                                                                //
    decimal: 2,                                                                                                        // 7527
    /**                                                                                                                //
     * Time delay for dragged elements.                                                                                //
     */                                                                                                                //
    // dragDelay: 0,                                                                                                   //
    /**                                                                                                                //
     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
     * @option                                                                                                         //
     * @example 200                                                                                                    //
     */                                                                                                                //
    moveTime: 200, //update this if changing the transition time in the sass                                           // 7537
    /**                                                                                                                //
     * Class applied to disabled sliders.                                                                              //
     * @option                                                                                                         //
     * @example 'disabled'                                                                                             //
     */                                                                                                                //
    disabledClass: 'disabled',                                                                                         // 7543
    /**                                                                                                                //
     * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.    //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    invertVertical: false,                                                                                             // 7549
    /**                                                                                                                //
     * Milliseconds before the `changed.zf-slider` event is triggered after value change.                              //
     * @option                                                                                                         //
     * @example 500                                                                                                    //
     */                                                                                                                //
    changedDelay: 500                                                                                                  // 7555
  };                                                                                                                   // 7451
                                                                                                                       //
  function percent(frac, num) {                                                                                        // 7558
    return frac / num;                                                                                                 // 7559
  }                                                                                                                    // 7560
  function absPosition($handle, dir, clickPos, param) {                                                                // 7561
    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);                                        // 7562
  }                                                                                                                    // 7563
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Slider, 'Slider');                                                                                 // 7566
}(jQuery);                                                                                                             // 7567
                                                                                                                       //
//*********this is in case we go to static, absolute positions instead of dynamic positioning********                  //
// this.setSteps(function() {                                                                                          //
//   _this._events();                                                                                                  //
//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;                                  //
//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;             //
//   if (initStart || initEnd) {                                                                                       //
//     _this._handleEvent(initStart, initEnd);                                                                         //
//   }                                                                                                                 //
// });                                                                                                                 //
                                                                                                                       //
//***********the other part of absolute positions*************                                                         //
// Slider.prototype.setSteps = function(cb) {                                                                          //
//   var posChange = this.$element.outerWidth() / this.options.steps;                                                  //
//   var counter = 0                                                                                                   //
//   while(counter < this.options.steps) {                                                                             //
//     if (counter) {                                                                                                  //
//       this.options.positions.push(this.options.positions[counter - 1] + posChange);                                 //
//     } else {                                                                                                        //
//       this.options.positions.push(posChange);                                                                       //
//     }                                                                                                               //
//     counter++;                                                                                                      //
//   }                                                                                                                 //
//   cb();                                                                                                             //
// };                                                                                                                  //
'use strict';                                                                                                          // 7593
                                                                                                                       //
var _createClass = function () {                                                                                       // 7595
  function defineProperties(target, props) {                                                                           // 7595
    for (var i = 0; i < props.length; i++) {                                                                           // 7595
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 7595
  }return function (Constructor, protoProps, staticProps) {                                                            // 7595
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 7595
}();                                                                                                                   // 7595
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 7597
  if (!(instance instanceof Constructor)) {                                                                            // 7597
    throw new TypeError("Cannot call a class as a function");                                                          // 7597
  }                                                                                                                    // 7597
}                                                                                                                      // 7597
                                                                                                                       //
!function ($) {                                                                                                        // 7599
                                                                                                                       //
  /**                                                                                                                  //
   * Sticky module.                                                                                                    //
   * @module foundation.sticky                                                                                         //
   * @requires foundation.util.triggers                                                                                //
   * @requires foundation.util.mediaQuery                                                                              //
   */                                                                                                                  //
                                                                                                                       //
  var Sticky = function () {                                                                                           // 7608
    /**                                                                                                                //
     * Creates a new instance of a sticky thing.                                                                       //
     * @class                                                                                                          //
     * @param {jQuery} element - jQuery object to make sticky.                                                         //
     * @param {Object} options - options object passed when creating the element programmatically.                     //
     */                                                                                                                //
                                                                                                                       //
    function Sticky(element, options) {                                                                                // 7616
      _classCallCheck(this, Sticky);                                                                                   // 7617
                                                                                                                       //
      this.$element = element;                                                                                         // 7619
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);                                     // 7620
                                                                                                                       //
      this._init();                                                                                                    // 7622
                                                                                                                       //
      Foundation.registerPlugin(this, 'Sticky');                                                                       // 7624
    }                                                                                                                  // 7625
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes        //
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Sticky, [{                                                                                            // 7634
      key: '_init',                                                                                                    // 7635
      value: function () {                                                                                             // 7636
        function _init() {                                                                                             // 7636
          var $parent = this.$element.parent('[data-sticky-container]'),                                               // 7637
              id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),                                         // 7637
              _this = this;                                                                                            // 7637
                                                                                                                       //
          if (!$parent.length) {                                                                                       // 7641
            this.wasWrapped = true;                                                                                    // 7642
          }                                                                                                            // 7643
          this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);             // 7644
          this.$container.addClass(this.options.containerClass);                                                       // 7645
                                                                                                                       //
          this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });                                // 7647
                                                                                                                       //
          this.scrollCount = this.options.checkEvery;                                                                  // 7649
          this.isStuck = false;                                                                                        // 7650
          $(window).one('load.zf.sticky', function () {                                                                // 7651
            if (_this.options.anchor !== '') {                                                                         // 7652
              _this.$anchor = $('#' + _this.options.anchor);                                                           // 7653
            } else {                                                                                                   // 7654
              _this._parsePoints();                                                                                    // 7655
            }                                                                                                          // 7656
                                                                                                                       //
            _this._setSizes(function () {                                                                              // 7658
              _this._calc(false);                                                                                      // 7659
            });                                                                                                        // 7660
            _this._events(id.split('-').reverse().join('-'));                                                          // 7661
          });                                                                                                          // 7662
        }                                                                                                              // 7663
                                                                                                                       //
        return _init;                                                                                                  // 7636
      }()                                                                                                              // 7636
                                                                                                                       //
      /**                                                                                                              //
       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7634
      key: '_parsePoints',                                                                                             // 7672
      value: function () {                                                                                             // 7673
        function _parsePoints() {                                                                                      // 7673
          var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,                                         // 7674
              btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,     // 7674
              pts = [top, btm],                                                                                        // 7674
              breaks = {};                                                                                             // 7674
          for (var i = 0, len = pts.length; i < len && pts[i]; i++) {                                                  // 7678
            var pt;                                                                                                    // 7679
            if (typeof pts[i] === 'number') {                                                                          // 7680
              pt = pts[i];                                                                                             // 7681
            } else {                                                                                                   // 7682
              var place = pts[i].split(':'),                                                                           // 7683
                  anchor = $('#' + place[0]);                                                                          // 7683
                                                                                                                       //
              pt = anchor.offset().top;                                                                                // 7686
              if (place[1] && place[1].toLowerCase() === 'bottom') {                                                   // 7687
                pt += anchor[0].getBoundingClientRect().height;                                                        // 7688
              }                                                                                                        // 7689
            }                                                                                                          // 7690
            breaks[i] = pt;                                                                                            // 7691
          }                                                                                                            // 7692
                                                                                                                       //
          this.points = breaks;                                                                                        // 7694
          return;                                                                                                      // 7695
        }                                                                                                              // 7696
                                                                                                                       //
        return _parsePoints;                                                                                           // 7673
      }()                                                                                                              // 7673
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for the scrolling element.                                                                //
       * @private                                                                                                      //
       * @param {String} id - psuedo-random id for unique scroll event listener.                                       //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7671
      key: '_events',                                                                                                  // 7705
      value: function () {                                                                                             // 7706
        function _events(id) {                                                                                         // 7706
          var _this = this,                                                                                            // 7707
              scrollListener = this.scrollListener = 'scroll.zf.' + id;                                                // 7707
          if (this.isOn) {                                                                                             // 7709
            return;                                                                                                    // 7710
          }                                                                                                            // 7711
          if (this.canStick) {                                                                                         // 7712
            this.isOn = true;                                                                                          // 7713
            $(window).off(scrollListener).on(scrollListener, function (e) {                                            // 7714
              if (_this.scrollCount === 0) {                                                                           // 7715
                _this.scrollCount = _this.options.checkEvery;                                                          // 7716
                _this._setSizes(function () {                                                                          // 7717
                  _this._calc(false, window.pageYOffset);                                                              // 7718
                });                                                                                                    // 7719
              } else {                                                                                                 // 7720
                _this.scrollCount--;                                                                                   // 7721
                _this._calc(false, window.pageYOffset);                                                                // 7722
              }                                                                                                        // 7723
            });                                                                                                        // 7724
          }                                                                                                            // 7725
                                                                                                                       //
          this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {                        // 7727
            _this._setSizes(function () {                                                                              // 7728
              _this._calc(false);                                                                                      // 7729
              if (_this.canStick) {                                                                                    // 7730
                if (!_this.isOn) {                                                                                     // 7731
                  _this._events(id);                                                                                   // 7732
                }                                                                                                      // 7733
              } else if (_this.isOn) {                                                                                 // 7734
                _this._pauseListeners(scrollListener);                                                                 // 7735
              }                                                                                                        // 7736
            });                                                                                                        // 7737
          });                                                                                                          // 7738
        }                                                                                                              // 7739
                                                                                                                       //
        return _events;                                                                                                // 7706
      }()                                                                                                              // 7706
                                                                                                                       //
      /**                                                                                                              //
       * Removes event handlers for scroll and change events on anchor.                                                //
       * @fires Sticky#pause                                                                                           //
       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7704
      key: '_pauseListeners',                                                                                          // 7748
      value: function () {                                                                                             // 7749
        function _pauseListeners(scrollListener) {                                                                     // 7749
          this.isOn = false;                                                                                           // 7750
          $(window).off(scrollListener);                                                                               // 7751
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the plugin is paused due to resize event shrinking the view.                                   //
           * @event Sticky#pause                                                                                       //
           * @private                                                                                                  //
           */                                                                                                          //
          this.$element.trigger('pause.zf.sticky');                                                                    // 7758
        }                                                                                                              // 7759
                                                                                                                       //
        return _pauseListeners;                                                                                        // 7749
      }()                                                                                                              // 7749
                                                                                                                       //
      /**                                                                                                              //
       * Called on every `scroll` event and on `_init`                                                                 //
       * fires functions based on booleans and cached values                                                           //
       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.                        //
       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7747
      key: '_calc',                                                                                                    // 7769
      value: function () {                                                                                             // 7770
        function _calc(checkSizes, scroll) {                                                                           // 7770
          if (checkSizes) {                                                                                            // 7771
            this._setSizes();                                                                                          // 7772
          }                                                                                                            // 7773
                                                                                                                       //
          if (!this.canStick) {                                                                                        // 7775
            if (this.isStuck) {                                                                                        // 7776
              this._removeSticky(true);                                                                                // 7777
            }                                                                                                          // 7778
            return false;                                                                                              // 7779
          }                                                                                                            // 7780
                                                                                                                       //
          if (!scroll) {                                                                                               // 7782
            scroll = window.pageYOffset;                                                                               // 7783
          }                                                                                                            // 7784
                                                                                                                       //
          if (scroll >= this.topPoint) {                                                                               // 7786
            if (scroll <= this.bottomPoint) {                                                                          // 7787
              if (!this.isStuck) {                                                                                     // 7788
                this._setSticky();                                                                                     // 7789
              }                                                                                                        // 7790
            } else {                                                                                                   // 7791
              if (this.isStuck) {                                                                                      // 7792
                this._removeSticky(false);                                                                             // 7793
              }                                                                                                        // 7794
            }                                                                                                          // 7795
          } else {                                                                                                     // 7796
            if (this.isStuck) {                                                                                        // 7797
              this._removeSticky(true);                                                                                // 7798
            }                                                                                                          // 7799
          }                                                                                                            // 7800
        }                                                                                                              // 7801
                                                                                                                       //
        return _calc;                                                                                                  // 7770
      }()                                                                                                              // 7770
                                                                                                                       //
      /**                                                                                                              //
       * Causes the $element to become stuck.                                                                          //
       * Adds `position: fixed;`, and helper classes.                                                                  //
       * @fires Sticky#stuckto                                                                                         //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7768
      key: '_setSticky',                                                                                               // 7812
      value: function () {                                                                                             // 7813
        function _setSticky() {                                                                                        // 7813
          var _this = this,                                                                                            // 7814
              stickTo = this.options.stickTo,                                                                          // 7814
              mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',                                                 // 7814
              notStuckTo = stickTo === 'top' ? 'bottom' : 'top',                                                       // 7814
              css = {};                                                                                                // 7814
                                                                                                                       //
          css[mrgn] = this.options[mrgn] + 'em';                                                                       // 7820
          css[stickTo] = 0;                                                                                            // 7821
          css[notStuckTo] = 'auto';                                                                                    // 7822
          css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])["padding-left"], 10);
          this.isStuck = true;                                                                                         // 7824
          this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)  // 7825
          /**                                                                                                          //
           * Fires when the $element has become `position: fixed;`                                                     //
           * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`                                             //
           * @event Sticky#stuckto                                                                                     //
           */                                                                                                          //
          .trigger('sticky.zf.stuckto:' + stickTo);                                                                    // 7825
          this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
            _this._setSizes();                                                                                         // 7833
          });                                                                                                          // 7834
        }                                                                                                              // 7835
                                                                                                                       //
        return _setSticky;                                                                                             // 7813
      }()                                                                                                              // 7813
                                                                                                                       //
      /**                                                                                                              //
       * Causes the $element to become unstuck.                                                                        //
       * Removes `position: fixed;`, and helper classes.                                                               //
       * Adds other helper classes.                                                                                    //
       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
       * @fires Sticky#unstuckfrom                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7811
      key: '_removeSticky',                                                                                            // 7847
      value: function () {                                                                                             // 7848
        function _removeSticky(isTop) {                                                                                // 7848
          var stickTo = this.options.stickTo,                                                                          // 7849
              stickToTop = stickTo === 'top',                                                                          // 7849
              css = {},                                                                                                // 7849
              anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,        // 7849
              mrgn = stickToTop ? 'marginTop' : 'marginBottom',                                                        // 7849
              notStuckTo = stickToTop ? 'bottom' : 'top',                                                              // 7849
              topOrBottom = isTop ? 'top' : 'bottom';                                                                  // 7849
                                                                                                                       //
          css[mrgn] = 0;                                                                                               // 7857
                                                                                                                       //
          css['bottom'] = 'auto';                                                                                      // 7859
          if (isTop) {                                                                                                 // 7860
            css['top'] = 0;                                                                                            // 7861
          } else {                                                                                                     // 7862
            css['top'] = anchorPt;                                                                                     // 7863
          }                                                                                                            // 7864
                                                                                                                       //
          css['left'] = '';                                                                                            // 7866
          this.isStuck = false;                                                                                        // 7867
          this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)
          /**                                                                                                          //
           * Fires when the $element has become anchored.                                                              //
           * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`                                      //
           * @event Sticky#unstuckfrom                                                                                 //
           */                                                                                                          //
          .trigger('sticky.zf.unstuckfrom:' + topOrBottom);                                                            // 7868
        }                                                                                                              // 7875
                                                                                                                       //
        return _removeSticky;                                                                                          // 7848
      }()                                                                                                              // 7848
                                                                                                                       //
      /**                                                                                                              //
       * Sets the $element and $container sizes for plugin.                                                            //
       * Calls `_setBreakPoints`.                                                                                      //
       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7846
      key: '_setSizes',                                                                                                // 7885
      value: function () {                                                                                             // 7886
        function _setSizes(cb) {                                                                                       // 7886
          this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);                                        // 7887
          if (!this.canStick) {                                                                                        // 7888
            cb();                                                                                                      // 7889
          }                                                                                                            // 7890
          var _this = this,                                                                                            // 7891
              newElemWidth = this.$container[0].getBoundingClientRect().width,                                         // 7891
              comp = window.getComputedStyle(this.$container[0]),                                                      // 7891
              pdng = parseInt(comp['padding-right'], 10);                                                              // 7891
                                                                                                                       //
          if (this.$anchor && this.$anchor.length) {                                                                   // 7896
            this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;                                        // 7897
          } else {                                                                                                     // 7898
            this._parsePoints();                                                                                       // 7899
          }                                                                                                            // 7900
                                                                                                                       //
          this.$element.css({                                                                                          // 7902
            'max-width': newElemWidth - pdng + 'px'                                                                    // 7903
          });                                                                                                          // 7902
                                                                                                                       //
          var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;            // 7906
          if (this.$element.css("display") == "none") {                                                                // 7907
            newContainerHeight = 0;                                                                                    // 7908
          }                                                                                                            // 7909
          this.containerHeight = newContainerHeight;                                                                   // 7910
          this.$container.css({                                                                                        // 7911
            height: newContainerHeight                                                                                 // 7912
          });                                                                                                          // 7911
          this.elemHeight = newContainerHeight;                                                                        // 7914
                                                                                                                       //
          if (this.isStuck) {                                                                                          // 7916
            this.$element.css({ "left": this.$container.offset().left + parseInt(comp['padding-left'], 10) });         // 7917
          }                                                                                                            // 7918
                                                                                                                       //
          this._setBreakPoints(newContainerHeight, function () {                                                       // 7920
            if (cb) {                                                                                                  // 7921
              cb();                                                                                                    // 7922
            }                                                                                                          // 7923
          });                                                                                                          // 7924
        }                                                                                                              // 7925
                                                                                                                       //
        return _setSizes;                                                                                              // 7886
      }()                                                                                                              // 7886
                                                                                                                       //
      /**                                                                                                              //
       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.                               //
       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.                  //
       * @param {Function} cb - optional callback function to be called on completion.                                 //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7884
      key: '_setBreakPoints',                                                                                          // 7935
      value: function () {                                                                                             // 7936
        function _setBreakPoints(elemHeight, cb) {                                                                     // 7936
          if (!this.canStick) {                                                                                        // 7937
            if (cb) {                                                                                                  // 7938
              cb();                                                                                                    // 7939
            } else {                                                                                                   // 7940
              return false;                                                                                            // 7941
            }                                                                                                          // 7942
          }                                                                                                            // 7943
          var mTop = emCalc(this.options.marginTop),                                                                   // 7944
              mBtm = emCalc(this.options.marginBottom),                                                                // 7944
              topPoint = this.points ? this.points[0] : this.$anchor.offset().top,                                     // 7944
              bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,                               // 7944
                                                                                                                       // 7944
                                                                                                                       //
          // topPoint = this.$anchor.offset().top || this.points[0],                                                   //
          // bottomPoint = topPoint + this.anchorHeight || this.points[1],                                             //
          winHeight = window.innerHeight;                                                                              // 7951
                                                                                                                       //
          if (this.options.stickTo === 'top') {                                                                        // 7953
            topPoint -= mTop;                                                                                          // 7954
            bottomPoint -= elemHeight + mTop;                                                                          // 7955
          } else if (this.options.stickTo === 'bottom') {                                                              // 7956
            topPoint -= winHeight - (elemHeight + mBtm);                                                               // 7957
            bottomPoint -= winHeight - mBtm;                                                                           // 7958
          } else {                                                                                                     // 7959
            //this would be the stickTo: both option... tricky                                                         //
          }                                                                                                            // 7961
                                                                                                                       //
          this.topPoint = topPoint;                                                                                    // 7963
          this.bottomPoint = bottomPoint;                                                                              // 7964
                                                                                                                       //
          if (cb) {                                                                                                    // 7966
            cb();                                                                                                      // 7967
          }                                                                                                            // 7968
        }                                                                                                              // 7969
                                                                                                                       //
        return _setBreakPoints;                                                                                        // 7936
      }()                                                                                                              // 7936
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the current sticky element.                                                                          //
       * Resets the element to the top position first.                                                                 //
       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 7934
      key: 'destroy',                                                                                                  // 7979
      value: function () {                                                                                             // 7980
        function destroy() {                                                                                           // 7980
          this._removeSticky(true);                                                                                    // 7981
                                                                                                                       //
          this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({                         // 7983
            height: '',                                                                                                // 7984
            top: '',                                                                                                   // 7985
            bottom: '',                                                                                                // 7986
            'max-width': ''                                                                                            // 7987
          }).off('resizeme.zf.trigger');                                                                               // 7983
          if (this.$anchor && this.$anchor.length) {                                                                   // 7989
            this.$anchor.off('change.zf.sticky');                                                                      // 7990
          }                                                                                                            // 7991
          $(window).off(this.scrollListener);                                                                          // 7992
                                                                                                                       //
          if (this.wasWrapped) {                                                                                       // 7994
            this.$element.unwrap();                                                                                    // 7995
          } else {                                                                                                     // 7996
            this.$container.removeClass(this.options.containerClass).css({                                             // 7997
              height: ''                                                                                               // 7998
            });                                                                                                        // 7997
          }                                                                                                            // 8000
          Foundation.unregisterPlugin(this);                                                                           // 8001
        }                                                                                                              // 8002
                                                                                                                       //
        return destroy;                                                                                                // 7980
      }()                                                                                                              // 7980
    }]);                                                                                                               // 7978
                                                                                                                       //
    return Sticky;                                                                                                     // 8005
  }();                                                                                                                 // 8006
                                                                                                                       //
  Sticky.defaults = {                                                                                                  // 8008
    /**                                                                                                                //
     * Customizable container template. Add your own classes for styling and sizing.                                   //
     * @option                                                                                                         //
     * @example '&lt;div data-sticky-container class="small-6 columns"&gt;&lt;/div&gt;'                                //
     */                                                                                                                //
    container: '<div data-sticky-container></div>',                                                                    // 8014
    /**                                                                                                                //
     * Location in the view the element sticks to.                                                                     //
     * @option                                                                                                         //
     * @example 'top'                                                                                                  //
     */                                                                                                                //
    stickTo: 'top',                                                                                                    // 8020
    /**                                                                                                                //
     * If anchored to a single element, the id of that element.                                                        //
     * @option                                                                                                         //
     * @example 'exampleId'                                                                                            //
     */                                                                                                                //
    anchor: '',                                                                                                        // 8026
    /**                                                                                                                //
     * If using more than one element as anchor points, the id of the top anchor.                                      //
     * @option                                                                                                         //
     * @example 'exampleId:top'                                                                                        //
     */                                                                                                                //
    topAnchor: '',                                                                                                     // 8032
    /**                                                                                                                //
     * If using more than one element as anchor points, the id of the bottom anchor.                                   //
     * @option                                                                                                         //
     * @example 'exampleId:bottom'                                                                                     //
     */                                                                                                                //
    btmAnchor: '',                                                                                                     // 8038
    /**                                                                                                                //
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.                                    //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    marginTop: 1,                                                                                                      // 8044
    /**                                                                                                                //
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.                                 //
     * @option                                                                                                         //
     * @example 1                                                                                                      //
     */                                                                                                                //
    marginBottom: 1,                                                                                                   // 8050
    /**                                                                                                                //
     * Breakpoint string that is the minimum screen size an element should become sticky.                              //
     * @option                                                                                                         //
     * @example 'medium'                                                                                               //
     */                                                                                                                //
    stickyOn: 'medium',                                                                                                // 8056
    /**                                                                                                                //
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.                   //
     * @option                                                                                                         //
     * @example 'sticky'                                                                                               //
     */                                                                                                                //
    stickyClass: 'sticky',                                                                                             // 8062
    /**                                                                                                                //
     * Class applied to sticky container. Foundation defaults to `sticky-container`.                                   //
     * @option                                                                                                         //
     * @example 'sticky-container'                                                                                     //
     */                                                                                                                //
    containerClass: 'sticky-container',                                                                                // 8068
    /**                                                                                                                //
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option                                                                                                         //
     * @example 50                                                                                                     //
     */                                                                                                                //
    checkEvery: -1                                                                                                     // 8074
  };                                                                                                                   // 8008
                                                                                                                       //
  /**                                                                                                                  //
   * Helper function to calculate em values                                                                            //
   * @param Number {em} - number of em's to calculate into pixels                                                      //
   */                                                                                                                  //
  function emCalc(em) {                                                                                                // 8081
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;                                   // 8082
  }                                                                                                                    // 8083
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Sticky, 'Sticky');                                                                                 // 8086
}(jQuery);                                                                                                             // 8087
'use strict';                                                                                                          // 8088
                                                                                                                       //
var _createClass = function () {                                                                                       // 8090
  function defineProperties(target, props) {                                                                           // 8090
    for (var i = 0; i < props.length; i++) {                                                                           // 8090
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 8090
  }return function (Constructor, protoProps, staticProps) {                                                            // 8090
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 8090
}();                                                                                                                   // 8090
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 8092
  if (!(instance instanceof Constructor)) {                                                                            // 8092
    throw new TypeError("Cannot call a class as a function");                                                          // 8092
  }                                                                                                                    // 8092
}                                                                                                                      // 8092
                                                                                                                       //
!function ($) {                                                                                                        // 8094
                                                                                                                       //
  /**                                                                                                                  //
   * Tabs module.                                                                                                      //
   * @module foundation.tabs                                                                                           //
   * @requires foundation.util.keyboard                                                                                //
   * @requires foundation.util.timerAndImageLoader if tabs contain images                                              //
   */                                                                                                                  //
                                                                                                                       //
  var Tabs = function () {                                                                                             // 8103
    /**                                                                                                                //
     * Creates a new instance of tabs.                                                                                 //
     * @class                                                                                                          //
     * @fires Tabs#init                                                                                                //
     * @param {jQuery} element - jQuery object to make into tabs.                                                      //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Tabs(element, options) {                                                                                  // 8112
      _classCallCheck(this, Tabs);                                                                                     // 8113
                                                                                                                       //
      this.$element = element;                                                                                         // 8115
      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);                                       // 8116
                                                                                                                       //
      this._init();                                                                                                    // 8118
      Foundation.registerPlugin(this, 'Tabs');                                                                         // 8119
      Foundation.Keyboard.register('Tabs', {                                                                           // 8120
        'ENTER': 'open',                                                                                               // 8121
        'SPACE': 'open',                                                                                               // 8122
        'ARROW_RIGHT': 'next',                                                                                         // 8123
        'ARROW_UP': 'previous',                                                                                        // 8124
        'ARROW_DOWN': 'next',                                                                                          // 8125
        'ARROW_LEFT': 'previous'                                                                                       // 8126
        // 'TAB': 'next',                                                                                              //
        // 'SHIFT_TAB': 'previous'                                                                                     //
      });                                                                                                              // 8120
    }                                                                                                                  // 8130
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.                         //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Tabs, [{                                                                                              // 8138
      key: '_init',                                                                                                    // 8139
      value: function () {                                                                                             // 8140
        function _init() {                                                                                             // 8140
          var _this = this;                                                                                            // 8141
                                                                                                                       //
          this.$tabTitles = this.$element.find('.' + this.options.linkClass);                                          // 8143
          this.$tabContent = $('[data-tabs-content="' + this.$element[0].id + '"]');                                   // 8144
                                                                                                                       //
          this.$tabTitles.each(function () {                                                                           // 8146
            var $elem = $(this),                                                                                       // 8147
                $link = $elem.find('a'),                                                                               // 8147
                isActive = $elem.hasClass('is-active'),                                                                // 8147
                hash = $link[0].hash.slice(1),                                                                         // 8147
                linkId = $link[0].id ? $link[0].id : hash + '-label',                                                  // 8147
                $tabContent = $('#' + hash);                                                                           // 8147
                                                                                                                       //
            $elem.attr({ 'role': 'presentation' });                                                                    // 8154
                                                                                                                       //
            $link.attr({                                                                                               // 8156
              'role': 'tab',                                                                                           // 8157
              'aria-controls': hash,                                                                                   // 8158
              'aria-selected': isActive,                                                                               // 8159
              'id': linkId                                                                                             // 8160
            });                                                                                                        // 8156
                                                                                                                       //
            $tabContent.attr({                                                                                         // 8163
              'role': 'tabpanel',                                                                                      // 8164
              'aria-hidden': !isActive,                                                                                // 8165
              'aria-labelledby': linkId                                                                                // 8166
            });                                                                                                        // 8163
                                                                                                                       //
            if (isActive && _this.options.autoFocus) {                                                                 // 8169
              $link.focus();                                                                                           // 8170
            }                                                                                                          // 8171
          });                                                                                                          // 8172
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 8174
            var $images = this.$tabContent.find('img');                                                                // 8175
                                                                                                                       //
            if ($images.length) {                                                                                      // 8177
              Foundation.onImagesLoaded($images, this._setHeight.bind(this));                                          // 8178
            } else {                                                                                                   // 8179
              this._setHeight();                                                                                       // 8180
            }                                                                                                          // 8181
          }                                                                                                            // 8182
                                                                                                                       //
          this._events();                                                                                              // 8184
        }                                                                                                              // 8185
                                                                                                                       //
        return _init;                                                                                                  // 8140
      }()                                                                                                              // 8140
                                                                                                                       //
      /**                                                                                                              //
       * Adds event handlers for items within the tabs.                                                                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8138
      key: '_events',                                                                                                  // 8193
      value: function () {                                                                                             // 8194
        function _events() {                                                                                           // 8194
          this._addKeyHandler();                                                                                       // 8195
          this._addClickHandler();                                                                                     // 8196
          this._setHeightMqHandler = null;                                                                             // 8197
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 8199
            this._setHeightMqHandler = this._setHeight.bind(this);                                                     // 8200
                                                                                                                       //
            $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);                                           // 8202
          }                                                                                                            // 8203
        }                                                                                                              // 8204
                                                                                                                       //
        return _events;                                                                                                // 8194
      }()                                                                                                              // 8194
                                                                                                                       //
      /**                                                                                                              //
       * Adds click handlers for items within the tabs.                                                                //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8192
      key: '_addClickHandler',                                                                                         // 8212
      value: function () {                                                                                             // 8213
        function _addClickHandler() {                                                                                  // 8213
          var _this = this;                                                                                            // 8214
                                                                                                                       //
          this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {          // 8216
            e.preventDefault();                                                                                        // 8217
            e.stopPropagation();                                                                                       // 8218
            if ($(this).hasClass('is-active')) {                                                                       // 8219
              return;                                                                                                  // 8220
            }                                                                                                          // 8221
            _this._handleTabChange($(this));                                                                           // 8222
          });                                                                                                          // 8223
        }                                                                                                              // 8224
                                                                                                                       //
        return _addClickHandler;                                                                                       // 8213
      }()                                                                                                              // 8213
                                                                                                                       //
      /**                                                                                                              //
       * Adds keyboard event handlers for items within the tabs.                                                       //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8211
      key: '_addKeyHandler',                                                                                           // 8232
      value: function () {                                                                                             // 8233
        function _addKeyHandler() {                                                                                    // 8233
          var _this = this;                                                                                            // 8234
          var $firstTab = _this.$element.find('li:first-of-type');                                                     // 8235
          var $lastTab = _this.$element.find('li:last-of-type');                                                       // 8236
                                                                                                                       //
          this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {                                  // 8238
            if (e.which === 9) return;                                                                                 // 8239
                                                                                                                       //
            var $element = $(this),                                                                                    // 8241
                $elements = $element.parent('ul').children('li'),                                                      // 8241
                $prevElement,                                                                                          // 8241
                $nextElement;                                                                                          // 8241
                                                                                                                       //
            $elements.each(function (i) {                                                                              // 8246
              if ($(this).is($element)) {                                                                              // 8247
                if (_this.options.wrapOnKeys) {                                                                        // 8248
                  $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);                                     // 8249
                  $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);                 // 8250
                } else {                                                                                               // 8251
                  $prevElement = $elements.eq(Math.max(0, i - 1));                                                     // 8252
                  $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));                                  // 8253
                }                                                                                                      // 8254
                return;                                                                                                // 8255
              }                                                                                                        // 8256
            });                                                                                                        // 8257
                                                                                                                       //
            // handle keyboard event with keyboard util                                                                //
            Foundation.Keyboard.handleKey(e, 'Tabs', {                                                                 // 8260
              open: function () {                                                                                      // 8261
                function open() {                                                                                      // 8261
                  $element.find('[role="tab"]').focus();                                                               // 8262
                  _this._handleTabChange($element);                                                                    // 8263
                }                                                                                                      // 8264
                                                                                                                       //
                return open;                                                                                           // 8261
              }(),                                                                                                     // 8261
              previous: function () {                                                                                  // 8265
                function previous() {                                                                                  // 8265
                  $prevElement.find('[role="tab"]').focus();                                                           // 8266
                  _this._handleTabChange($prevElement);                                                                // 8267
                }                                                                                                      // 8268
                                                                                                                       //
                return previous;                                                                                       // 8265
              }(),                                                                                                     // 8265
              next: function () {                                                                                      // 8269
                function next() {                                                                                      // 8269
                  $nextElement.find('[role="tab"]').focus();                                                           // 8270
                  _this._handleTabChange($nextElement);                                                                // 8271
                }                                                                                                      // 8272
                                                                                                                       //
                return next;                                                                                           // 8269
              }(),                                                                                                     // 8269
              handled: function () {                                                                                   // 8273
                function handled() {                                                                                   // 8273
                  e.stopPropagation();                                                                                 // 8274
                  e.preventDefault();                                                                                  // 8275
                }                                                                                                      // 8276
                                                                                                                       //
                return handled;                                                                                        // 8273
              }()                                                                                                      // 8273
            });                                                                                                        // 8260
          });                                                                                                          // 8278
        }                                                                                                              // 8279
                                                                                                                       //
        return _addKeyHandler;                                                                                         // 8233
      }()                                                                                                              // 8233
                                                                                                                       //
      /**                                                                                                              //
       * Opens the tab `$targetContent` defined by `$target`.                                                          //
       * @param {jQuery} $target - Tab to open.                                                                        //
       * @fires Tabs#change                                                                                            //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8231
      key: '_handleTabChange',                                                                                         // 8289
      value: function () {                                                                                             // 8290
        function _handleTabChange($target) {                                                                           // 8290
          var $tabLink = $target.find('[role="tab"]'),                                                                 // 8291
              hash = $tabLink[0].hash,                                                                                 // 8291
              $targetContent = this.$tabContent.find(hash),                                                            // 8291
              $oldTab = this.$element.find('.' + this.options.linkClass + '.is-active').removeClass('is-active').find('[role="tab"]').attr({ 'aria-selected': 'false' });
                                                                                                                       //
          $('#' + $oldTab.attr('aria-controls')).removeClass('is-active').attr({ 'aria-hidden': 'true' });             // 8296
                                                                                                                       //
          $target.addClass('is-active');                                                                               // 8298
                                                                                                                       //
          $tabLink.attr({ 'aria-selected': 'true' });                                                                  // 8300
                                                                                                                       //
          $targetContent.addClass('is-active').attr({ 'aria-hidden': 'false' });                                       // 8302
                                                                                                                       //
          /**                                                                                                          //
           * Fires when the plugin has successfully changed tabs.                                                      //
           * @event Tabs#change                                                                                        //
           */                                                                                                          //
          this.$element.trigger('change.zf.tabs', [$target]);                                                          // 8308
        }                                                                                                              // 8309
                                                                                                                       //
        return _handleTabChange;                                                                                       // 8290
      }()                                                                                                              // 8290
                                                                                                                       //
      /**                                                                                                              //
       * Public method for selecting a content pane to display.                                                        //
       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.                     //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8288
      key: 'selectTab',                                                                                                // 8318
      value: function () {                                                                                             // 8319
        function selectTab(elem) {                                                                                     // 8319
          var idStr;                                                                                                   // 8320
                                                                                                                       //
          if ((typeof elem === 'undefined' ? 'undefined' : (0, _typeof3['default'])(elem)) === 'object') {             // 8322
            idStr = elem[0].id;                                                                                        // 8323
          } else {                                                                                                     // 8324
            idStr = elem;                                                                                              // 8325
          }                                                                                                            // 8326
                                                                                                                       //
          if (idStr.indexOf('#') < 0) {                                                                                // 8328
            idStr = '#' + idStr;                                                                                       // 8329
          }                                                                                                            // 8330
                                                                                                                       //
          var $target = this.$tabTitles.find('[href="' + idStr + '"]').parent('.' + this.options.linkClass);           // 8332
                                                                                                                       //
          this._handleTabChange($target);                                                                              // 8334
        }                                                                                                              // 8335
                                                                                                                       //
        return selectTab;                                                                                              // 8319
      }()                                                                                                              // 8319
    }, {                                                                                                               // 8317
      key: '_setHeight',                                                                                               // 8337
                                                                                                                       //
      /**                                                                                                              //
       * Sets the height of each panel to the height of the tallest panel.                                             //
       * If enabled in options, gets called on media query change.                                                     //
       * If loading content via external source, can be called directly or with _reflow.                               //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
      value: function () {                                                                                             // 8346
        function _setHeight() {                                                                                        // 8346
          var max = 0;                                                                                                 // 8347
          this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {                    // 8348
            var panel = $(this),                                                                                       // 8349
                isActive = panel.hasClass('is-active');                                                                // 8349
                                                                                                                       //
            if (!isActive) {                                                                                           // 8352
              panel.css({ 'visibility': 'hidden', 'display': 'block' });                                               // 8353
            }                                                                                                          // 8354
                                                                                                                       //
            var temp = this.getBoundingClientRect().height;                                                            // 8356
                                                                                                                       //
            if (!isActive) {                                                                                           // 8358
              panel.css({                                                                                              // 8359
                'visibility': '',                                                                                      // 8360
                'display': ''                                                                                          // 8361
              });                                                                                                      // 8359
            }                                                                                                          // 8363
                                                                                                                       //
            max = temp > max ? temp : max;                                                                             // 8365
          }).css('height', max + 'px');                                                                                // 8366
        }                                                                                                              // 8367
                                                                                                                       //
        return _setHeight;                                                                                             // 8346
      }()                                                                                                              // 8346
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of an tabs.                                                                              //
       * @fires Tabs#destroyed                                                                                         //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8336
      key: 'destroy',                                                                                                  // 8375
      value: function () {                                                                                             // 8376
        function destroy() {                                                                                           // 8376
          this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();
                                                                                                                       //
          if (this.options.matchHeight) {                                                                              // 8379
            if (this._setHeightMqHandler != null) {                                                                    // 8380
              $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);                                        // 8381
            }                                                                                                          // 8382
          }                                                                                                            // 8383
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 8385
        }                                                                                                              // 8386
                                                                                                                       //
        return destroy;                                                                                                // 8376
      }()                                                                                                              // 8376
    }]);                                                                                                               // 8374
                                                                                                                       //
    return Tabs;                                                                                                       // 8389
  }();                                                                                                                 // 8390
                                                                                                                       //
  Tabs.defaults = {                                                                                                    // 8392
    /**                                                                                                                //
     * Allows the window to scroll to content of active pane on load if set to true.                                   //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    autoFocus: false,                                                                                                  // 8398
                                                                                                                       //
    /**                                                                                                                //
     * Allows keyboard input to 'wrap' around the tab links.                                                           //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    wrapOnKeys: true,                                                                                                  // 8405
                                                                                                                       //
    /**                                                                                                                //
     * Allows the tab content panes to match heights if set to true.                                                   //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    matchHeight: false,                                                                                                // 8412
                                                                                                                       //
    /**                                                                                                                //
     * Class applied to `li`'s in tab link list.                                                                       //
     * @option                                                                                                         //
     * @example 'tabs-title'                                                                                           //
     */                                                                                                                //
    linkClass: 'tabs-title',                                                                                           // 8419
                                                                                                                       //
    /**                                                                                                                //
     * Class applied to the content containers.                                                                        //
     * @option                                                                                                         //
     * @example 'tabs-panel'                                                                                           //
     */                                                                                                                //
    panelClass: 'tabs-panel'                                                                                           // 8426
  };                                                                                                                   // 8392
                                                                                                                       //
  function checkClass($elem) {                                                                                         // 8429
    return $elem.hasClass('is-active');                                                                                // 8430
  }                                                                                                                    // 8431
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Tabs, 'Tabs');                                                                                     // 8434
}(jQuery);                                                                                                             // 8435
'use strict';                                                                                                          // 8436
                                                                                                                       //
var _createClass = function () {                                                                                       // 8438
  function defineProperties(target, props) {                                                                           // 8438
    for (var i = 0; i < props.length; i++) {                                                                           // 8438
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 8438
  }return function (Constructor, protoProps, staticProps) {                                                            // 8438
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 8438
}();                                                                                                                   // 8438
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 8440
  if (!(instance instanceof Constructor)) {                                                                            // 8440
    throw new TypeError("Cannot call a class as a function");                                                          // 8440
  }                                                                                                                    // 8440
}                                                                                                                      // 8440
                                                                                                                       //
!function ($) {                                                                                                        // 8442
                                                                                                                       //
  /**                                                                                                                  //
   * Toggler module.                                                                                                   //
   * @module foundation.toggler                                                                                        //
   * @requires foundation.util.motion                                                                                  //
   * @requires foundation.util.triggers                                                                                //
   */                                                                                                                  //
                                                                                                                       //
  var Toggler = function () {                                                                                          // 8451
    /**                                                                                                                //
     * Creates a new instance of Toggler.                                                                              //
     * @class                                                                                                          //
     * @fires Toggler#init                                                                                             //
     * @param {Object} element - jQuery object to add the trigger to.                                                  //
     * @param {Object} options - Overrides to the default plugin settings.                                             //
     */                                                                                                                //
                                                                                                                       //
    function Toggler(element, options) {                                                                               // 8460
      _classCallCheck(this, Toggler);                                                                                  // 8461
                                                                                                                       //
      this.$element = element;                                                                                         // 8463
      this.options = $.extend({}, Toggler.defaults, element.data(), options);                                          // 8464
      this.className = '';                                                                                             // 8465
                                                                                                                       //
      this._init();                                                                                                    // 8467
      this._events();                                                                                                  // 8468
                                                                                                                       //
      Foundation.registerPlugin(this, 'Toggler');                                                                      // 8470
    }                                                                                                                  // 8471
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function                                                                                                       //
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Toggler, [{                                                                                           // 8480
      key: '_init',                                                                                                    // 8481
      value: function () {                                                                                             // 8482
        function _init() {                                                                                             // 8482
          var input;                                                                                                   // 8483
          // Parse animation classes if they were set                                                                  //
          if (this.options.animate) {                                                                                  // 8485
            input = this.options.animate.split(' ');                                                                   // 8486
                                                                                                                       //
            this.animationIn = input[0];                                                                               // 8488
            this.animationOut = input[1] || null;                                                                      // 8489
          }                                                                                                            // 8490
          // Otherwise, parse toggle class                                                                             //
          else {                                                                                                       // 8485
              input = this.$element.data('toggler');                                                                   // 8493
              // Allow for a . at the beginning of the string                                                          //
              this.className = input[0] === '.' ? input.slice(1) : input;                                              // 8495
            }                                                                                                          // 8496
                                                                                                                       //
          // Add ARIA attributes to triggers                                                                           //
          var id = this.$element[0].id;                                                                                // 8499
          $('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id);
          // If the target is hidden, add aria-hidden                                                                  //
          this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);                             // 8502
        }                                                                                                              // 8503
                                                                                                                       //
        return _init;                                                                                                  // 8482
      }()                                                                                                              // 8482
                                                                                                                       //
      /**                                                                                                              //
       * Initializes events for the toggle trigger.                                                                    //
       * @function                                                                                                     //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8480
      key: '_events',                                                                                                  // 8512
      value: function () {                                                                                             // 8513
        function _events() {                                                                                           // 8513
          this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));                      // 8514
        }                                                                                                              // 8515
                                                                                                                       //
        return _events;                                                                                                // 8513
      }()                                                                                                              // 8513
                                                                                                                       //
      /**                                                                                                              //
       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
       * @function                                                                                                     //
       * @fires Toggler#on                                                                                             //
       * @fires Toggler#off                                                                                            //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8511
      key: 'toggle',                                                                                                   // 8525
      value: function () {                                                                                             // 8526
        function toggle() {                                                                                            // 8526
          this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();                                            // 8527
        }                                                                                                              // 8528
                                                                                                                       //
        return toggle;                                                                                                 // 8526
      }()                                                                                                              // 8526
    }, {                                                                                                               // 8524
      key: '_toggleClass',                                                                                             // 8530
      value: function () {                                                                                             // 8531
        function _toggleClass() {                                                                                      // 8531
          this.$element.toggleClass(this.className);                                                                   // 8532
                                                                                                                       //
          var isOn = this.$element.hasClass(this.className);                                                           // 8534
          if (isOn) {                                                                                                  // 8535
            /**                                                                                                        //
             * Fires if the target element has the class after a toggle.                                               //
             * @event Toggler#on                                                                                       //
             */                                                                                                        //
            this.$element.trigger('on.zf.toggler');                                                                    // 8540
          } else {                                                                                                     // 8541
            /**                                                                                                        //
             * Fires if the target element does not have the class after a toggle.                                     //
             * @event Toggler#off                                                                                      //
             */                                                                                                        //
            this.$element.trigger('off.zf.toggler');                                                                   // 8546
          }                                                                                                            // 8547
                                                                                                                       //
          this._updateARIA(isOn);                                                                                      // 8549
        }                                                                                                              // 8550
                                                                                                                       //
        return _toggleClass;                                                                                           // 8531
      }()                                                                                                              // 8531
    }, {                                                                                                               // 8529
      key: '_toggleAnimate',                                                                                           // 8552
      value: function () {                                                                                             // 8553
        function _toggleAnimate() {                                                                                    // 8553
          var _this = this;                                                                                            // 8554
                                                                                                                       //
          if (this.$element.is(':hidden')) {                                                                           // 8556
            Foundation.Motion.animateIn(this.$element, this.animationIn, function () {                                 // 8557
              _this._updateARIA(true);                                                                                 // 8558
              this.trigger('on.zf.toggler');                                                                           // 8559
            });                                                                                                        // 8560
          } else {                                                                                                     // 8561
            Foundation.Motion.animateOut(this.$element, this.animationOut, function () {                               // 8562
              _this._updateARIA(false);                                                                                // 8563
              this.trigger('off.zf.toggler');                                                                          // 8564
            });                                                                                                        // 8565
          }                                                                                                            // 8566
        }                                                                                                              // 8567
                                                                                                                       //
        return _toggleAnimate;                                                                                         // 8553
      }()                                                                                                              // 8553
    }, {                                                                                                               // 8551
      key: '_updateARIA',                                                                                              // 8569
      value: function () {                                                                                             // 8570
        function _updateARIA(isOn) {                                                                                   // 8570
          this.$element.attr('aria-expanded', isOn ? true : false);                                                    // 8571
        }                                                                                                              // 8572
                                                                                                                       //
        return _updateARIA;                                                                                            // 8570
      }()                                                                                                              // 8570
                                                                                                                       //
      /**                                                                                                              //
       * Destroys the instance of Toggler on the element.                                                              //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8568
      key: 'destroy',                                                                                                  // 8580
      value: function () {                                                                                             // 8581
        function destroy() {                                                                                           // 8581
          this.$element.off('.zf.toggler');                                                                            // 8582
          Foundation.unregisterPlugin(this);                                                                           // 8583
        }                                                                                                              // 8584
                                                                                                                       //
        return destroy;                                                                                                // 8581
      }()                                                                                                              // 8581
    }]);                                                                                                               // 8579
                                                                                                                       //
    return Toggler;                                                                                                    // 8587
  }();                                                                                                                 // 8588
                                                                                                                       //
  Toggler.defaults = {                                                                                                 // 8590
    /**                                                                                                                //
     * Tells the plugin if the element should animated when toggled.                                                   //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    animate: false                                                                                                     // 8596
  };                                                                                                                   // 8590
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Toggler, 'Toggler');                                                                               // 8600
}(jQuery);                                                                                                             // 8601
'use strict';                                                                                                          // 8602
                                                                                                                       //
var _createClass = function () {                                                                                       // 8604
  function defineProperties(target, props) {                                                                           // 8604
    for (var i = 0; i < props.length; i++) {                                                                           // 8604
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }                                                                                                                  // 8604
  }return function (Constructor, protoProps, staticProps) {                                                            // 8604
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };                                                                                                                   // 8604
}();                                                                                                                   // 8604
                                                                                                                       //
function _classCallCheck(instance, Constructor) {                                                                      // 8606
  if (!(instance instanceof Constructor)) {                                                                            // 8606
    throw new TypeError("Cannot call a class as a function");                                                          // 8606
  }                                                                                                                    // 8606
}                                                                                                                      // 8606
                                                                                                                       //
!function ($) {                                                                                                        // 8608
                                                                                                                       //
  /**                                                                                                                  //
   * Tooltip module.                                                                                                   //
   * @module foundation.tooltip                                                                                        //
   * @requires foundation.util.box                                                                                     //
   * @requires foundation.util.triggers                                                                                //
   */                                                                                                                  //
                                                                                                                       //
  var Tooltip = function () {                                                                                          // 8617
    /**                                                                                                                //
     * Creates a new instance of a Tooltip.                                                                            //
     * @class                                                                                                          //
     * @fires Tooltip#init                                                                                             //
     * @param {jQuery} element - jQuery object to attach a tooltip to.                                                 //
     * @param {Object} options - object to extend the default configuration.                                           //
     */                                                                                                                //
                                                                                                                       //
    function Tooltip(element, options) {                                                                               // 8626
      _classCallCheck(this, Tooltip);                                                                                  // 8627
                                                                                                                       //
      this.$element = element;                                                                                         // 8629
      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);                                    // 8630
                                                                                                                       //
      this.isActive = false;                                                                                           // 8632
      this.isClick = false;                                                                                            // 8633
      this._init();                                                                                                    // 8634
                                                                                                                       //
      Foundation.registerPlugin(this, 'Tooltip');                                                                      // 8636
    }                                                                                                                  // 8637
                                                                                                                       //
    /**                                                                                                                //
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private                                                                                                        //
     */                                                                                                                //
                                                                                                                       //
    _createClass(Tooltip, [{                                                                                           // 8645
      key: '_init',                                                                                                    // 8646
      value: function () {                                                                                             // 8647
        function _init() {                                                                                             // 8647
          var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');                 // 8648
                                                                                                                       //
          this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);            // 8650
          this.options.tipText = this.options.tipText || this.$element.attr('title');                                  // 8651
          this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);              // 8652
                                                                                                                       //
          this.template.appendTo(document.body).text(this.options.tipText).hide();                                     // 8654
                                                                                                                       //
          this.$element.attr({                                                                                         // 8656
            'title': '',                                                                                               // 8657
            'aria-describedby': elemId,                                                                                // 8658
            'data-yeti-box': elemId,                                                                                   // 8659
            'data-toggle': elemId,                                                                                     // 8660
            'data-resize': elemId                                                                                      // 8661
          }).addClass(this.triggerClass);                                                                              // 8656
                                                                                                                       //
          //helper variables to track movement on collisions                                                           //
          this.usedPositions = [];                                                                                     // 8665
          this.counter = 4;                                                                                            // 8666
          this.classChanged = false;                                                                                   // 8667
                                                                                                                       //
          this._events();                                                                                              // 8669
        }                                                                                                              // 8670
                                                                                                                       //
        return _init;                                                                                                  // 8647
      }()                                                                                                              // 8647
                                                                                                                       //
      /**                                                                                                              //
       * Grabs the current positioning class, if present, and returns the value or an empty string.                    //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8645
      key: '_getPositionClass',                                                                                        // 8678
      value: function () {                                                                                             // 8679
        function _getPositionClass(element) {                                                                          // 8679
          if (!element) {                                                                                              // 8680
            return '';                                                                                                 // 8681
          }                                                                                                            // 8682
          // var position = element.attr('class').match(/top|left|right/g);                                            //
          var position = element[0].className.match(/\b(top|left|right)\b/g);                                          // 8684
          position = position ? position[0] : '';                                                                      // 8685
          return position;                                                                                             // 8686
        }                                                                                                              // 8687
                                                                                                                       //
        return _getPositionClass;                                                                                      // 8679
      }()                                                                                                              // 8679
    }, {                                                                                                               // 8677
      key: '_buildTemplate',                                                                                           // 8689
                                                                                                                       //
      /**                                                                                                              //
       * builds the tooltip element, adds attributes, and returns the template.                                        //
       * @private                                                                                                      //
       */                                                                                                              //
      value: function () {                                                                                             // 8695
        function _buildTemplate(id) {                                                                                  // 8695
          var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();
          var $template = $('<div></div>').addClass(templateClasses).attr({                                            // 8697
            'role': 'tooltip',                                                                                         // 8698
            'aria-hidden': true,                                                                                       // 8699
            'data-is-active': false,                                                                                   // 8700
            'data-is-focus': false,                                                                                    // 8701
            'id': id                                                                                                   // 8702
          });                                                                                                          // 8697
          return $template;                                                                                            // 8704
        }                                                                                                              // 8705
                                                                                                                       //
        return _buildTemplate;                                                                                         // 8695
      }()                                                                                                              // 8695
                                                                                                                       //
      /**                                                                                                              //
       * Function that gets called if a collision event is detected.                                                   //
       * @param {String} position - positioning class to try                                                           //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8688
      key: '_reposition',                                                                                              // 8714
      value: function () {                                                                                             // 8715
        function _reposition(position) {                                                                               // 8715
          this.usedPositions.push(position ? position : 'bottom');                                                     // 8716
                                                                                                                       //
          //default, try switching to opposite side                                                                    //
          if (!position && this.usedPositions.indexOf('top') < 0) {                                                    // 8719
            this.template.addClass('top');                                                                             // 8720
          } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {                                 // 8721
            this.template.removeClass(position);                                                                       // 8722
          } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {                                 // 8723
            this.template.removeClass(position).addClass('right');                                                     // 8724
          } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {                                 // 8725
            this.template.removeClass(position).addClass('left');                                                      // 8726
          }                                                                                                            // 8727
                                                                                                                       //
          //if default change didn't work, try bottom or left first                                                    //
          else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {    // 8725
              this.template.addClass('left');                                                                          // 8731
            } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
              this.template.removeClass(position).addClass('left');                                                    // 8733
            } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
              this.template.removeClass(position);                                                                     // 8735
            } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
              this.template.removeClass(position);                                                                     // 8737
            }                                                                                                          // 8738
            //if nothing cleared, set to bottom                                                                        //
            else {                                                                                                     // 8736
                this.template.removeClass(position);                                                                   // 8741
              }                                                                                                        // 8742
          this.classChanged = true;                                                                                    // 8743
          this.counter--;                                                                                              // 8744
        }                                                                                                              // 8745
                                                                                                                       //
        return _reposition;                                                                                            // 8715
      }()                                                                                                              // 8715
                                                                                                                       //
      /**                                                                                                              //
       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
       * if the tooltip is larger than the screen width, default to full width - any user selected margin              //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8713
      key: '_setPosition',                                                                                             // 8754
      value: function () {                                                                                             // 8755
        function _setPosition() {                                                                                      // 8755
          var position = this._getPositionClass(this.template),                                                        // 8756
              $tipDims = Foundation.Box.GetDimensions(this.template),                                                  // 8756
              $anchorDims = Foundation.Box.GetDimensions(this.$element),                                               // 8756
              direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',                        // 8756
              param = direction === 'top' ? 'height' : 'width',                                                        // 8756
              offset = param === 'height' ? this.options.vOffset : this.options.hOffset,                               // 8756
              _this = this;                                                                                            // 8756
                                                                                                                       //
          if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {
            this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
              // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
              'width': $anchorDims.windowDims.width - this.options.hOffset * 2,                                        // 8767
              'height': 'auto'                                                                                         // 8768
            });                                                                                                        // 8765
            return false;                                                                                              // 8770
          }                                                                                                            // 8771
                                                                                                                       //
          this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));
                                                                                                                       //
          while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {                                    // 8775
            this._reposition(position);                                                                                // 8776
            this._setPosition();                                                                                       // 8777
          }                                                                                                            // 8778
        }                                                                                                              // 8779
                                                                                                                       //
        return _setPosition;                                                                                           // 8755
      }()                                                                                                              // 8755
                                                                                                                       //
      /**                                                                                                              //
       * reveals the tooltip, and fires an event to close any other open tooltips on the page                          //
       * @fires Tooltip#closeme                                                                                        //
       * @fires Tooltip#show                                                                                           //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8753
      key: 'show',                                                                                                     // 8789
      value: function () {                                                                                             // 8790
        function show() {                                                                                              // 8790
          if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {                  // 8791
            // console.error('The screen is too small to display this tooltip');                                       //
            return false;                                                                                              // 8793
          }                                                                                                            // 8794
                                                                                                                       //
          var _this = this;                                                                                            // 8796
          this.template.css('visibility', 'hidden').show();                                                            // 8797
          this._setPosition();                                                                                         // 8798
                                                                                                                       //
          /**                                                                                                          //
           * Fires to close all other open tooltips on the page                                                        //
           * @event Closeme#tooltip                                                                                    //
           */                                                                                                          //
          this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));                                       // 8804
                                                                                                                       //
          this.template.attr({                                                                                         // 8806
            'data-is-active': true,                                                                                    // 8807
            'aria-hidden': false                                                                                       // 8808
          });                                                                                                          // 8806
          _this.isActive = true;                                                                                       // 8810
          // console.log(this.template);                                                                               //
          this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {          // 8812
            //maybe do stuff?                                                                                          //
          });                                                                                                          // 8814
          /**                                                                                                          //
           * Fires when the tooltip is shown                                                                           //
           * @event Tooltip#show                                                                                       //
           */                                                                                                          //
          this.$element.trigger('show.zf.tooltip');                                                                    // 8819
        }                                                                                                              // 8820
                                                                                                                       //
        return show;                                                                                                   // 8790
      }()                                                                                                              // 8790
                                                                                                                       //
      /**                                                                                                              //
       * Hides the current tooltip, and resets the positioning class if it was changed due to collision                //
       * @fires Tooltip#hide                                                                                           //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8788
      key: 'hide',                                                                                                     // 8829
      value: function () {                                                                                             // 8830
        function hide() {                                                                                              // 8830
          // console.log('hiding', this.$element.data('yeti-box'));                                                    //
          var _this = this;                                                                                            // 8832
          this.template.stop().attr({                                                                                  // 8833
            'aria-hidden': true,                                                                                       // 8834
            'data-is-active': false                                                                                    // 8835
          }).fadeOut(this.options.fadeOutDuration, function () {                                                       // 8833
            _this.isActive = false;                                                                                    // 8837
            _this.isClick = false;                                                                                     // 8838
            if (_this.classChanged) {                                                                                  // 8839
              _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);
                                                                                                                       //
              _this.usedPositions = [];                                                                                // 8842
              _this.counter = 4;                                                                                       // 8843
              _this.classChanged = false;                                                                              // 8844
            }                                                                                                          // 8845
          });                                                                                                          // 8846
          /**                                                                                                          //
           * fires when the tooltip is hidden                                                                          //
           * @event Tooltip#hide                                                                                       //
           */                                                                                                          //
          this.$element.trigger('hide.zf.tooltip');                                                                    // 8851
        }                                                                                                              // 8852
                                                                                                                       //
        return hide;                                                                                                   // 8830
      }()                                                                                                              // 8830
                                                                                                                       //
      /**                                                                                                              //
       * adds event listeners for the tooltip and its anchor                                                           //
       * TODO combine some of the listeners like focus and mouseenter, etc.                                            //
       * @private                                                                                                      //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8828
      key: '_events',                                                                                                  // 8861
      value: function () {                                                                                             // 8862
        function _events() {                                                                                           // 8862
          var _this = this;                                                                                            // 8863
          var $template = this.template;                                                                               // 8864
          var isFocus = false;                                                                                         // 8865
                                                                                                                       //
          if (!this.options.disableHover) {                                                                            // 8867
                                                                                                                       //
            this.$element.on('mouseenter.zf.tooltip', function (e) {                                                   // 8869
              if (!_this.isActive) {                                                                                   // 8870
                _this.timeout = setTimeout(function () {                                                               // 8871
                  _this.show();                                                                                        // 8872
                }, _this.options.hoverDelay);                                                                          // 8873
              }                                                                                                        // 8874
            }).on('mouseleave.zf.tooltip', function (e) {                                                              // 8875
              clearTimeout(_this.timeout);                                                                             // 8876
              if (!isFocus || _this.isClick && !_this.options.clickOpen) {                                             // 8877
                _this.hide();                                                                                          // 8878
              }                                                                                                        // 8879
            });                                                                                                        // 8880
          }                                                                                                            // 8881
                                                                                                                       //
          if (this.options.clickOpen) {                                                                                // 8883
            this.$element.on('mousedown.zf.tooltip', function (e) {                                                    // 8884
              e.stopImmediatePropagation();                                                                            // 8885
              if (_this.isClick) {                                                                                     // 8886
                //_this.hide();                                                                                        //
                // _this.isClick = false;                                                                              //
              } else {                                                                                                 // 8889
                  _this.isClick = true;                                                                                // 8890
                  if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {           // 8891
                    _this.show();                                                                                      // 8892
                  }                                                                                                    // 8893
                }                                                                                                      // 8894
            });                                                                                                        // 8895
          } else {                                                                                                     // 8896
            this.$element.on('mousedown.zf.tooltip', function (e) {                                                    // 8897
              e.stopImmediatePropagation();                                                                            // 8898
              _this.isClick = true;                                                                                    // 8899
            });                                                                                                        // 8900
          }                                                                                                            // 8901
                                                                                                                       //
          if (!this.options.disableForTouch) {                                                                         // 8903
            this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {                                      // 8904
              _this.isActive ? _this.hide() : _this.show();                                                            // 8905
            });                                                                                                        // 8906
          }                                                                                                            // 8907
                                                                                                                       //
          this.$element.on({                                                                                           // 8909
            // 'toggle.zf.trigger': this.toggle.bind(this),                                                            //
            // 'close.zf.trigger': this.hide.bind(this)                                                                //
            'close.zf.trigger': this.hide.bind(this)                                                                   // 8912
          });                                                                                                          // 8909
                                                                                                                       //
          this.$element.on('focus.zf.tooltip', function (e) {                                                          // 8915
            isFocus = true;                                                                                            // 8916
            if (_this.isClick) {                                                                                       // 8917
              // If we're not showing open on clicks, we need to pretend a click-launched focus isn't                  //
              // a real focus, otherwise on hover and come back we get bad behavior                                    //
              if (!_this.options.clickOpen) {                                                                          // 8920
                isFocus = false;                                                                                       // 8921
              }                                                                                                        // 8922
              return false;                                                                                            // 8923
            } else {                                                                                                   // 8924
              _this.show();                                                                                            // 8925
            }                                                                                                          // 8926
          }).on('focusout.zf.tooltip', function (e) {                                                                  // 8927
            isFocus = false;                                                                                           // 8928
            _this.isClick = false;                                                                                     // 8929
            _this.hide();                                                                                              // 8930
          }).on('resizeme.zf.trigger', function () {                                                                   // 8931
            if (_this.isActive) {                                                                                      // 8932
              _this._setPosition();                                                                                    // 8933
            }                                                                                                          // 8934
          });                                                                                                          // 8935
        }                                                                                                              // 8936
                                                                                                                       //
        return _events;                                                                                                // 8862
      }()                                                                                                              // 8862
                                                                                                                       //
      /**                                                                                                              //
       * adds a toggle method, in addition to the static show() & hide() functions                                     //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8860
      key: 'toggle',                                                                                                   // 8944
      value: function () {                                                                                             // 8945
        function toggle() {                                                                                            // 8945
          if (this.isActive) {                                                                                         // 8946
            this.hide();                                                                                               // 8947
          } else {                                                                                                     // 8948
            this.show();                                                                                               // 8949
          }                                                                                                            // 8950
        }                                                                                                              // 8951
                                                                                                                       //
        return toggle;                                                                                                 // 8945
      }()                                                                                                              // 8945
                                                                                                                       //
      /**                                                                                                              //
       * Destroys an instance of tooltip, removes template element from the view.                                      //
       * @function                                                                                                     //
       */                                                                                                              //
                                                                                                                       //
    }, {                                                                                                               // 8943
      key: 'destroy',                                                                                                  // 8959
      value: function () {                                                                                             // 8960
        function destroy() {                                                                                           // 8960
          this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tootip')                              // 8961
          //  .removeClass('has-tip')                                                                                  //
          .removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');
                                                                                                                       //
          this.template.remove();                                                                                      // 8965
                                                                                                                       //
          Foundation.unregisterPlugin(this);                                                                           // 8967
        }                                                                                                              // 8968
                                                                                                                       //
        return destroy;                                                                                                // 8960
      }()                                                                                                              // 8960
    }]);                                                                                                               // 8958
                                                                                                                       //
    return Tooltip;                                                                                                    // 8971
  }();                                                                                                                 // 8972
                                                                                                                       //
  Tooltip.defaults = {                                                                                                 // 8974
    disableForTouch: false,                                                                                            // 8975
    /**                                                                                                                //
     * Time, in ms, before a tooltip should open on hover.                                                             //
     * @option                                                                                                         //
     * @example 200                                                                                                    //
     */                                                                                                                //
    hoverDelay: 200,                                                                                                   // 8981
    /**                                                                                                                //
     * Time, in ms, a tooltip should take to fade into view.                                                           //
     * @option                                                                                                         //
     * @example 150                                                                                                    //
     */                                                                                                                //
    fadeInDuration: 150,                                                                                               // 8987
    /**                                                                                                                //
     * Time, in ms, a tooltip should take to fade out of view.                                                         //
     * @option                                                                                                         //
     * @example 150                                                                                                    //
     */                                                                                                                //
    fadeOutDuration: 150,                                                                                              // 8993
    /**                                                                                                                //
     * Disables hover events from opening the tooltip if set to true                                                   //
     * @option                                                                                                         //
     * @example false                                                                                                  //
     */                                                                                                                //
    disableHover: false,                                                                                               // 8999
    /**                                                                                                                //
     * Optional addtional classes to apply to the tooltip template on init.                                            //
     * @option                                                                                                         //
     * @example 'my-cool-tip-class'                                                                                    //
     */                                                                                                                //
    templateClasses: '',                                                                                               // 9005
    /**                                                                                                                //
     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.                                 //
     * @option                                                                                                         //
     * @example 'tooltip'                                                                                              //
     */                                                                                                                //
    tooltipClass: 'tooltip',                                                                                           // 9011
    /**                                                                                                                //
     * Class applied to the tooltip anchor element.                                                                    //
     * @option                                                                                                         //
     * @example 'has-tip'                                                                                              //
     */                                                                                                                //
    triggerClass: 'has-tip',                                                                                           // 9017
    /**                                                                                                                //
     * Minimum breakpoint size at which to open the tooltip.                                                           //
     * @option                                                                                                         //
     * @example 'small'                                                                                                //
     */                                                                                                                //
    showOn: 'small',                                                                                                   // 9023
    /**                                                                                                                //
     * Custom template to be used to generate markup for tooltip.                                                      //
     * @option                                                                                                         //
     * @example '&lt;div class="tooltip"&gt;&lt;/div&gt;'                                                              //
     */                                                                                                                //
    template: '',                                                                                                      // 9029
    /**                                                                                                                //
     * Text displayed in the tooltip template on open.                                                                 //
     * @option                                                                                                         //
     * @example 'Some cool space fact here.'                                                                           //
     */                                                                                                                //
    tipText: '',                                                                                                       // 9035
    touchCloseText: 'Tap to close.',                                                                                   // 9036
    /**                                                                                                                //
     * Allows the tooltip to remain open if triggered with a click or touch event.                                     //
     * @option                                                                                                         //
     * @example true                                                                                                   //
     */                                                                                                                //
    clickOpen: true,                                                                                                   // 9042
    /**                                                                                                                //
     * Additional positioning classes, set by the JS                                                                   //
     * @option                                                                                                         //
     * @example 'top'                                                                                                  //
     */                                                                                                                //
    positionClass: '',                                                                                                 // 9048
    /**                                                                                                                //
     * Distance, in pixels, the template should push away from the anchor on the Y axis.                               //
     * @option                                                                                                         //
     * @example 10                                                                                                     //
     */                                                                                                                //
    vOffset: 10,                                                                                                       // 9054
    /**                                                                                                                //
     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.         //
     * @option                                                                                                         //
     * @example 12                                                                                                     //
     */                                                                                                                //
    hOffset: 12                                                                                                        // 9060
  };                                                                                                                   // 8974
                                                                                                                       //
  /**                                                                                                                  //
   * TODO utilize resize event trigger                                                                                 //
   */                                                                                                                  //
                                                                                                                       //
  // Window exports                                                                                                    //
  Foundation.plugin(Tooltip, 'Tooltip');                                                                               // 9068
}(jQuery);                                                                                                             // 9069
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}]}}}}},{"extensions":[".js",".json",".scss",".css"]});
require("./node_modules/meteor/zurb:foundation-sites/dist/foundation.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['zurb:foundation-sites'] = {};

})();
